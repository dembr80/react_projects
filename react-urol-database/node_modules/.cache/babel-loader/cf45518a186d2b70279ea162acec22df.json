{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar PacketNodeEncoded = require('./packet-node-encoded');\n\nvar PacketIconvEncoded = require('./packet-node-iconv');\n\nvar Utils = require('../misc/utils');\n/**\n * MySQL packet parser\n * see : https://mariadb.com/kb/en/library/0-packet/\n */\n\n\nvar PacketInputStream =\n/*#__PURE__*/\nfunction () {\n  function PacketInputStream(unexpectedPacket, receiveQueue, out, opts, info) {\n    _classCallCheck(this, PacketInputStream);\n\n    this.unexpectedPacket = unexpectedPacket;\n    this.opts = opts;\n    this.receiveQueue = receiveQueue;\n    this.info = info;\n    this.out = out; //in case packet is not complete\n\n    this.header = Buffer.allocUnsafe(4);\n    this.headerLen = 0;\n    this.packetLen = null;\n    this.remainingLen = null;\n    this.parts = null;\n    this.partsTotalLen = 0;\n    this.changeEncoding(this.opts.collation);\n    this.changeDebug(this.opts.logPackets, this.opts.debug);\n    this.opts.on('collation', this.changeEncoding.bind(this));\n    this.opts.on('debug', this.changeDebug.bind(this));\n  }\n\n  _createClass(PacketInputStream, [{\n    key: \"changeEncoding\",\n    value: function changeEncoding(collation) {\n      this.encoding = collation.charset;\n      this.packetConstructor = Buffer.isEncoding(this.encoding) ? PacketNodeEncoded : PacketIconvEncoded;\n    }\n  }, {\n    key: \"changeDebug\",\n    value: function changeDebug(logPackets, debug) {\n      this.logPackets = logPackets;\n      this.debug = debug;\n      this.receivePacket = this.logPackets || this.debug ? this.receivePacketDebug : this.receivePacketBasic;\n    }\n  }, {\n    key: \"receivePacketDebug\",\n    value: function receivePacketDebug(packet) {\n      var cmd = this.currentCmd();\n\n      if (packet) {\n        var packetStr = Utils.log(this.opts, packet.buf, packet.pos, packet.end, this.header);\n\n        if (this.opts.logPackets) {\n          this.info.addPacket('<== conn:' + (this.info.threadId ? this.info.threadId : -1) + ' ' + (cmd ? cmd.onPacketReceive ? cmd.constructor.name + '.' + cmd.onPacketReceive.name : cmd.constructor.name : 'no command') + ' (' + packet.pos + ',' + packet.end + '))\\n' + packetStr);\n        }\n\n        if (this.opts.debug) {\n          console.log('<== conn:%d %s (%d,%d)\\n%s', this.info.threadId ? this.info.threadId : -1, cmd ? cmd.onPacketReceive ? cmd.constructor.name + '.' + cmd.onPacketReceive.name : cmd.constructor.name : 'no command', packet.pos, packet.end, packetStr);\n        }\n      }\n\n      if (!cmd) {\n        this.unexpectedPacket(packet);\n        return;\n      }\n\n      cmd.sequenceNo = this.header[3];\n      cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n      if (!cmd.onPacketReceive) this.receiveQueue.shift();\n    }\n  }, {\n    key: \"receivePacketBasic\",\n    value: function receivePacketBasic(packet) {\n      var cmd = this.currentCmd();\n\n      if (!cmd) {\n        this.unexpectedPacket(packet);\n        return;\n      }\n\n      cmd.sequenceNo = this.header[3];\n      cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n      if (!cmd.onPacketReceive) this.receiveQueue.shift();\n    }\n  }, {\n    key: \"resetHeader\",\n    value: function resetHeader() {\n      this.remainingLen = null;\n      this.headerLen = 0;\n    }\n  }, {\n    key: \"currentCmd\",\n    value: function currentCmd() {\n      var cmd;\n\n      while (cmd = this.receiveQueue.peek()) {\n        if (cmd.onPacketReceive) return cmd;\n        this.receiveQueue.shift();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onData\",\n    value: function onData(chunk) {\n      var pos = 0;\n      var length;\n      var chunkLen = chunk.length;\n\n      do {\n        //read header\n        if (this.remainingLen) {\n          length = this.remainingLen;\n        } else {\n          length = null;\n\n          while (chunkLen - pos > 0) {\n            this.header[this.headerLen++] = chunk[pos++];\n\n            if (this.headerLen === 4) {\n              this.packetLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n              length = this.packetLen;\n              break;\n            }\n          }\n        }\n\n        if (length) {\n          if (chunkLen - pos >= length) {\n            var buf = chunk.slice(pos, pos + length);\n            pos += length;\n\n            if (this.parts) {\n              this.parts.push(buf);\n              this.partsTotalLen += length;\n\n              if (this.packetLen < 0xffffff) {\n                var _buf = Buffer.concat(this.parts, this.partsTotalLen);\n\n                this.parts = null;\n                var packet = new this.packetConstructor(_buf, 0, this.partsTotalLen, this.encoding);\n                this.receivePacket(packet);\n              }\n            } else {\n              if (this.packetLen < 0xffffff) {\n                var _packet = new this.packetConstructor(buf, 0, length, this.encoding);\n\n                this.receivePacket(_packet);\n              } else {\n                this.parts = [buf];\n                this.partsTotalLen = length;\n              }\n            }\n\n            this.resetHeader();\n          } else {\n            var _buf2 = chunk.slice(pos, chunkLen);\n\n            if (!this.parts) {\n              this.parts = [_buf2];\n              this.partsTotalLen = chunkLen - pos;\n            } else {\n              this.parts.push(_buf2);\n              this.partsTotalLen += chunkLen - pos;\n            }\n\n            this.remainingLen = length - (chunkLen - pos);\n            return;\n          }\n        }\n      } while (pos < chunkLen);\n    }\n  }]);\n\n  return PacketInputStream;\n}();\n\nmodule.exports = PacketInputStream;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/io/packet-input-stream.js"],"names":["PacketNodeEncoded","require","PacketIconvEncoded","Utils","PacketInputStream","unexpectedPacket","receiveQueue","out","opts","info","header","Buffer","allocUnsafe","headerLen","packetLen","remainingLen","parts","partsTotalLen","changeEncoding","collation","changeDebug","logPackets","debug","on","bind","encoding","charset","packetConstructor","isEncoding","receivePacket","receivePacketDebug","receivePacketBasic","packet","cmd","currentCmd","packetStr","log","buf","pos","end","addPacket","threadId","onPacketReceive","constructor","name","console","sequenceNo","shift","peek","chunk","length","chunkLen","slice","push","concat","resetHeader","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,qBAAD,CAAlC;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,eAAD,CAArB;AAEA;;;;;;IAIMG,iB;;;AACJ,6BAAYC,gBAAZ,EAA8BC,YAA9B,EAA4CC,GAA5C,EAAiDC,IAAjD,EAAuDC,IAAvD,EAA6D;AAAA;;AAC3D,SAAKJ,gBAAL,GAAwBA,gBAAxB;AACA,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKF,GAAL,GAAWA,GAAX,CAL2D,CAO3D;;AACA,SAAKG,MAAL,GAAcC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAd;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,YAAL,GAAoB,IAApB;AAEA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,cAAL,CAAoB,KAAKV,IAAL,CAAUW,SAA9B;AACA,SAAKC,WAAL,CAAiB,KAAKZ,IAAL,CAAUa,UAA3B,EAAuC,KAAKb,IAAL,CAAUc,KAAjD;AACA,SAAKd,IAAL,CAAUe,EAAV,CAAa,WAAb,EAA0B,KAAKL,cAAL,CAAoBM,IAApB,CAAyB,IAAzB,CAA1B;AACA,SAAKhB,IAAL,CAAUe,EAAV,CAAa,OAAb,EAAsB,KAAKH,WAAL,CAAiBI,IAAjB,CAAsB,IAAtB,CAAtB;AACD;;;;mCAEcL,S,EAAW;AACxB,WAAKM,QAAL,GAAgBN,SAAS,CAACO,OAA1B;AACA,WAAKC,iBAAL,GAAyBhB,MAAM,CAACiB,UAAP,CAAkB,KAAKH,QAAvB,IACrBzB,iBADqB,GAErBE,kBAFJ;AAGD;;;gCAEWmB,U,EAAYC,K,EAAO;AAC7B,WAAKD,UAAL,GAAkBA,UAAlB;AACA,WAAKC,KAAL,GAAaA,KAAb;AACA,WAAKO,aAAL,GACE,KAAKR,UAAL,IAAmB,KAAKC,KAAxB,GAAgC,KAAKQ,kBAArC,GAA0D,KAAKC,kBADjE;AAED;;;uCAEkBC,M,EAAQ;AACzB,UAAIC,GAAG,GAAG,KAAKC,UAAL,EAAV;;AAEA,UAAIF,MAAJ,EAAY;AACV,YAAMG,SAAS,GAAGhC,KAAK,CAACiC,GAAN,CAAU,KAAK5B,IAAf,EAAqBwB,MAAM,CAACK,GAA5B,EAAiCL,MAAM,CAACM,GAAxC,EAA6CN,MAAM,CAACO,GAApD,EAAyD,KAAK7B,MAA9D,CAAlB;;AACA,YAAI,KAAKF,IAAL,CAAUa,UAAd,EAA0B;AACxB,eAAKZ,IAAL,CAAU+B,SAAV,CACE,eACG,KAAK/B,IAAL,CAAUgC,QAAV,GAAqB,KAAKhC,IAAL,CAAUgC,QAA/B,GAA0C,CAAC,CAD9C,IAEE,GAFF,IAGGR,GAAG,GACAA,GAAG,CAACS,eAAJ,GACET,GAAG,CAACU,WAAJ,CAAgBC,IAAhB,GAAuB,GAAvB,GAA6BX,GAAG,CAACS,eAAJ,CAAoBE,IADnD,GAEEX,GAAG,CAACU,WAAJ,CAAgBC,IAHlB,GAIA,YAPN,IAQE,IARF,GASEZ,MAAM,CAACM,GATT,GAUE,GAVF,GAWEN,MAAM,CAACO,GAXT,GAYE,MAZF,GAaEJ,SAdJ;AAgBD;;AACD,YAAI,KAAK3B,IAAL,CAAUc,KAAd,EAAqB;AACnBuB,UAAAA,OAAO,CAACT,GAAR,CACE,4BADF,EAEE,KAAK3B,IAAL,CAAUgC,QAAV,GAAqB,KAAKhC,IAAL,CAAUgC,QAA/B,GAA0C,CAAC,CAF7C,EAGER,GAAG,GACCA,GAAG,CAACS,eAAJ,GACET,GAAG,CAACU,WAAJ,CAAgBC,IAAhB,GAAuB,GAAvB,GAA6BX,GAAG,CAACS,eAAJ,CAAoBE,IADnD,GAEEX,GAAG,CAACU,WAAJ,CAAgBC,IAHnB,GAIC,YAPN,EAQEZ,MAAM,CAACM,GART,EASEN,MAAM,CAACO,GATT,EAUEJ,SAVF;AAYD;AACF;;AAED,UAAI,CAACF,GAAL,EAAU;AACR,aAAK5B,gBAAL,CAAsB2B,MAAtB;AACA;AACD;;AAEDC,MAAAA,GAAG,CAACa,UAAJ,GAAiB,KAAKpC,MAAL,CAAY,CAAZ,CAAjB;AACAuB,MAAAA,GAAG,CAACS,eAAJ,CAAoBV,MAApB,EAA4B,KAAKzB,GAAjC,EAAsC,KAAKC,IAA3C,EAAiD,KAAKC,IAAtD;AACA,UAAI,CAACwB,GAAG,CAACS,eAAT,EAA0B,KAAKpC,YAAL,CAAkByC,KAAlB;AAC3B;;;uCAEkBf,M,EAAQ;AACzB,UAAIC,GAAG,GAAG,KAAKC,UAAL,EAAV;;AACA,UAAI,CAACD,GAAL,EAAU;AACR,aAAK5B,gBAAL,CAAsB2B,MAAtB;AACA;AACD;;AACDC,MAAAA,GAAG,CAACa,UAAJ,GAAiB,KAAKpC,MAAL,CAAY,CAAZ,CAAjB;AACAuB,MAAAA,GAAG,CAACS,eAAJ,CAAoBV,MAApB,EAA4B,KAAKzB,GAAjC,EAAsC,KAAKC,IAA3C,EAAiD,KAAKC,IAAtD;AACA,UAAI,CAACwB,GAAG,CAACS,eAAT,EAA0B,KAAKpC,YAAL,CAAkByC,KAAlB;AAC3B;;;kCAEa;AACZ,WAAKhC,YAAL,GAAoB,IAApB;AACA,WAAKF,SAAL,GAAiB,CAAjB;AACD;;;iCAEY;AACX,UAAIoB,GAAJ;;AACA,aAAQA,GAAG,GAAG,KAAK3B,YAAL,CAAkB0C,IAAlB,EAAd,EAAyC;AACvC,YAAIf,GAAG,CAACS,eAAR,EAAyB,OAAOT,GAAP;AACzB,aAAK3B,YAAL,CAAkByC,KAAlB;AACD;;AACD,aAAO,IAAP;AACD;;;2BAEME,K,EAAO;AACZ,UAAIX,GAAG,GAAG,CAAV;AACA,UAAIY,MAAJ;AACA,UAAMC,QAAQ,GAAGF,KAAK,CAACC,MAAvB;;AAEA,SAAG;AACD;AACA,YAAI,KAAKnC,YAAT,EAAuB;AACrBmC,UAAAA,MAAM,GAAG,KAAKnC,YAAd;AACD,SAFD,MAEO;AACLmC,UAAAA,MAAM,GAAG,IAAT;;AACA,iBAAOC,QAAQ,GAAGb,GAAX,GAAiB,CAAxB,EAA2B;AACzB,iBAAK5B,MAAL,CAAY,KAAKG,SAAL,EAAZ,IAAgCoC,KAAK,CAACX,GAAG,EAAJ,CAArC;;AACA,gBAAI,KAAKzB,SAAL,KAAmB,CAAvB,EAA0B;AACxB,mBAAKC,SAAL,GAAiB,KAAKJ,MAAL,CAAY,CAAZ,KAAkB,KAAKA,MAAL,CAAY,CAAZ,KAAkB,CAApC,KAA0C,KAAKA,MAAL,CAAY,CAAZ,KAAkB,EAA5D,CAAjB;AACAwC,cAAAA,MAAM,GAAG,KAAKpC,SAAd;AACA;AACD;AACF;AACF;;AAED,YAAIoC,MAAJ,EAAY;AACV,cAAIC,QAAQ,GAAGb,GAAX,IAAkBY,MAAtB,EAA8B;AAC5B,gBAAMb,GAAG,GAAGY,KAAK,CAACG,KAAN,CAAYd,GAAZ,EAAiBA,GAAG,GAAGY,MAAvB,CAAZ;AACAZ,YAAAA,GAAG,IAAIY,MAAP;;AACA,gBAAI,KAAKlC,KAAT,EAAgB;AACd,mBAAKA,KAAL,CAAWqC,IAAX,CAAgBhB,GAAhB;AACA,mBAAKpB,aAAL,IAAsBiC,MAAtB;;AAEA,kBAAI,KAAKpC,SAAL,GAAiB,QAArB,EAA+B;AAC7B,oBAAIuB,IAAG,GAAG1B,MAAM,CAAC2C,MAAP,CAAc,KAAKtC,KAAnB,EAA0B,KAAKC,aAA/B,CAAV;;AACA,qBAAKD,KAAL,GAAa,IAAb;AACA,oBAAMgB,MAAM,GAAG,IAAI,KAAKL,iBAAT,CAA2BU,IAA3B,EAAgC,CAAhC,EAAmC,KAAKpB,aAAxC,EAAuD,KAAKQ,QAA5D,CAAf;AACA,qBAAKI,aAAL,CAAmBG,MAAnB;AACD;AACF,aAVD,MAUO;AACL,kBAAI,KAAKlB,SAAL,GAAiB,QAArB,EAA+B;AAC7B,oBAAMkB,OAAM,GAAG,IAAI,KAAKL,iBAAT,CAA2BU,GAA3B,EAAgC,CAAhC,EAAmCa,MAAnC,EAA2C,KAAKzB,QAAhD,CAAf;;AACA,qBAAKI,aAAL,CAAmBG,OAAnB;AACD,eAHD,MAGO;AACL,qBAAKhB,KAAL,GAAa,CAACqB,GAAD,CAAb;AACA,qBAAKpB,aAAL,GAAqBiC,MAArB;AACD;AACF;;AACD,iBAAKK,WAAL;AACD,WAvBD,MAuBO;AACL,gBAAMlB,KAAG,GAAGY,KAAK,CAACG,KAAN,CAAYd,GAAZ,EAAiBa,QAAjB,CAAZ;;AACA,gBAAI,CAAC,KAAKnC,KAAV,EAAiB;AACf,mBAAKA,KAAL,GAAa,CAACqB,KAAD,CAAb;AACA,mBAAKpB,aAAL,GAAqBkC,QAAQ,GAAGb,GAAhC;AACD,aAHD,MAGO;AACL,mBAAKtB,KAAL,CAAWqC,IAAX,CAAgBhB,KAAhB;AACA,mBAAKpB,aAAL,IAAsBkC,QAAQ,GAAGb,GAAjC;AACD;;AACD,iBAAKvB,YAAL,GAAoBmC,MAAM,IAAIC,QAAQ,GAAGb,GAAf,CAA1B;AACA;AACD;AACF;AACF,OArDD,QAqDSA,GAAG,GAAGa,QArDf;AAsDD;;;;;;AAGHK,MAAM,CAACC,OAAP,GAAiBrD,iBAAjB","sourcesContent":["'use strict';\n\nconst PacketNodeEncoded = require('./packet-node-encoded');\nconst PacketIconvEncoded = require('./packet-node-iconv');\n\nconst Utils = require('../misc/utils');\n\n/**\n * MySQL packet parser\n * see : https://mariadb.com/kb/en/library/0-packet/\n */\nclass PacketInputStream {\n  constructor(unexpectedPacket, receiveQueue, out, opts, info) {\n    this.unexpectedPacket = unexpectedPacket;\n    this.opts = opts;\n    this.receiveQueue = receiveQueue;\n    this.info = info;\n    this.out = out;\n\n    //in case packet is not complete\n    this.header = Buffer.allocUnsafe(4);\n    this.headerLen = 0;\n    this.packetLen = null;\n    this.remainingLen = null;\n\n    this.parts = null;\n    this.partsTotalLen = 0;\n    this.changeEncoding(this.opts.collation);\n    this.changeDebug(this.opts.logPackets, this.opts.debug);\n    this.opts.on('collation', this.changeEncoding.bind(this));\n    this.opts.on('debug', this.changeDebug.bind(this));\n  }\n\n  changeEncoding(collation) {\n    this.encoding = collation.charset;\n    this.packetConstructor = Buffer.isEncoding(this.encoding)\n      ? PacketNodeEncoded\n      : PacketIconvEncoded;\n  }\n\n  changeDebug(logPackets, debug) {\n    this.logPackets = logPackets;\n    this.debug = debug;\n    this.receivePacket =\n      this.logPackets || this.debug ? this.receivePacketDebug : this.receivePacketBasic;\n  }\n\n  receivePacketDebug(packet) {\n    let cmd = this.currentCmd();\n\n    if (packet) {\n      const packetStr = Utils.log(this.opts, packet.buf, packet.pos, packet.end, this.header);\n      if (this.opts.logPackets) {\n        this.info.addPacket(\n          '<== conn:' +\n            (this.info.threadId ? this.info.threadId : -1) +\n            ' ' +\n            (cmd\n              ? cmd.onPacketReceive\n                ? cmd.constructor.name + '.' + cmd.onPacketReceive.name\n                : cmd.constructor.name\n              : 'no command') +\n            ' (' +\n            packet.pos +\n            ',' +\n            packet.end +\n            '))\\n' +\n            packetStr\n        );\n      }\n      if (this.opts.debug) {\n        console.log(\n          '<== conn:%d %s (%d,%d)\\n%s',\n          this.info.threadId ? this.info.threadId : -1,\n          cmd\n            ? cmd.onPacketReceive\n              ? cmd.constructor.name + '.' + cmd.onPacketReceive.name\n              : cmd.constructor.name\n            : 'no command',\n          packet.pos,\n          packet.end,\n          packetStr\n        );\n      }\n    }\n\n    if (!cmd) {\n      this.unexpectedPacket(packet);\n      return;\n    }\n\n    cmd.sequenceNo = this.header[3];\n    cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n    if (!cmd.onPacketReceive) this.receiveQueue.shift();\n  }\n\n  receivePacketBasic(packet) {\n    let cmd = this.currentCmd();\n    if (!cmd) {\n      this.unexpectedPacket(packet);\n      return;\n    }\n    cmd.sequenceNo = this.header[3];\n    cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n    if (!cmd.onPacketReceive) this.receiveQueue.shift();\n  }\n\n  resetHeader() {\n    this.remainingLen = null;\n    this.headerLen = 0;\n  }\n\n  currentCmd() {\n    let cmd;\n    while ((cmd = this.receiveQueue.peek())) {\n      if (cmd.onPacketReceive) return cmd;\n      this.receiveQueue.shift();\n    }\n    return null;\n  }\n\n  onData(chunk) {\n    let pos = 0;\n    let length;\n    const chunkLen = chunk.length;\n\n    do {\n      //read header\n      if (this.remainingLen) {\n        length = this.remainingLen;\n      } else {\n        length = null;\n        while (chunkLen - pos > 0) {\n          this.header[this.headerLen++] = chunk[pos++];\n          if (this.headerLen === 4) {\n            this.packetLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n            length = this.packetLen;\n            break;\n          }\n        }\n      }\n\n      if (length) {\n        if (chunkLen - pos >= length) {\n          const buf = chunk.slice(pos, pos + length);\n          pos += length;\n          if (this.parts) {\n            this.parts.push(buf);\n            this.partsTotalLen += length;\n\n            if (this.packetLen < 0xffffff) {\n              let buf = Buffer.concat(this.parts, this.partsTotalLen);\n              this.parts = null;\n              const packet = new this.packetConstructor(buf, 0, this.partsTotalLen, this.encoding);\n              this.receivePacket(packet);\n            }\n          } else {\n            if (this.packetLen < 0xffffff) {\n              const packet = new this.packetConstructor(buf, 0, length, this.encoding);\n              this.receivePacket(packet);\n            } else {\n              this.parts = [buf];\n              this.partsTotalLen = length;\n            }\n          }\n          this.resetHeader();\n        } else {\n          const buf = chunk.slice(pos, chunkLen);\n          if (!this.parts) {\n            this.parts = [buf];\n            this.partsTotalLen = chunkLen - pos;\n          } else {\n            this.parts.push(buf);\n            this.partsTotalLen += chunkLen - pos;\n          }\n          this.remainingLen = length - (chunkLen - pos);\n          return;\n        }\n      }\n    } while (pos < chunkLen);\n  }\n}\n\nmodule.exports = PacketInputStream;\n"]},"metadata":{},"sourceType":"script"}