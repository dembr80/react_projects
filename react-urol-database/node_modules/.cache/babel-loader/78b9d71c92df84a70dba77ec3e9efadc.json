{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Collations = require('../const/collations.js');\n\nvar urlFormat = /mariadb:\\/\\/(([^/@:]+)?(:([^/]+))?@)?(([^/:]+)(:([0-9]+))?)\\/([^?]+)(\\?(.*))?$/;\n\nvar moment = require('moment-timezone');\n\nvar Errors = require('../misc/errors');\n/**\r\n * Default option similar to mysql driver.\r\n * known differences\r\n * - no queryFormat option. Permitting client to parse is a security risk. Best is to give SQL + parameters\r\n *   Only possible Objects are :\r\n *   - Buffer\r\n *   - Date\r\n *   - Object that implement toSqlString function\r\n *   - JSON object\r\n * + rowsAsArray (in mysql2) permit to have rows by index, not by name. Avoiding to parsing metadata string => faster\r\n */\n\n\nvar ConnectionOptions =\n/*#__PURE__*/\nfunction () {\n  function ConnectionOptions(opts) {\n    _classCallCheck(this, ConnectionOptions);\n\n    if (typeof opts === 'string') {\n      opts = ConnectionOptions.parse(opts);\n    }\n\n    if (!opts) opts = {};\n    this.bigNumberStrings = opts.bigNumberStrings || false;\n    this.bulk = opts.bulk === undefined || opts.bulk;\n\n    if (opts.charset && typeof opts.charset === 'string') {\n      this.collation = Collations.fromCharset(opts.charset.toLowerCase());\n\n      if (this.collation === undefined) {\n        this.collation = Collations.fromName(opts.charset.toUpperCase());\n\n        if (this.collation !== undefined) {\n          console.log(\"warning: please use option 'collation' \" + \"in replacement of 'charset' when using a collation name ('\" + opts.charset + \"')\\n\" + \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\");\n        }\n      }\n\n      if (this.collation === undefined) throw new RangeError(\"Unknown charset '\" + opts.charset + \"'\");\n    } else if (opts.collation && typeof opts.collation === 'string') {\n      this.collation = Collations.fromName(opts.collation.toUpperCase());\n      if (this.collation === undefined) throw new RangeError(\"Unknown collation '\" + opts.collation + \"'\");\n    } else {\n      this.collation = Collations.fromIndex(opts.charsetNumber) || Collations.fromIndex(224); //UTF8MB4_UNICODE_CI;\n    }\n\n    this.compress = opts.compress || false;\n    this.logPackets = opts.logPackets || false;\n    this.connectAttributes = opts.connectAttributes || false;\n    this.connectTimeout = opts.connectTimeout === undefined ? 10000 : opts.connectTimeout;\n    this.queryTimeout = opts.queryTimeout === undefined ? 0 : opts.queryTimeout;\n    this.socketTimeout = opts.socketTimeout === undefined ? 0 : opts.socketTimeout;\n    this.database = opts.database;\n    this.checkDuplicate = opts.checkDuplicate === undefined ? true : opts.checkDuplicate;\n    this.dateStrings = opts.dateStrings || false;\n    this.debug = opts.debug || false;\n    this.debugCompress = opts.debugCompress || false;\n    this.debugLen = opts.debugLen || 256;\n    this.foundRows = opts.foundRows === undefined || opts.foundRows;\n    this.host = opts.host || 'localhost';\n    this.initSql = opts.initSql;\n    this.forceVersionCheck = opts.forceVersionCheck || false;\n    this.maxAllowedPacket = opts.maxAllowedPacket;\n    this.metaAsArray = opts.metaAsArray || false;\n    this.multipleStatements = opts.multipleStatements || false;\n    this.namedPlaceholders = opts.namedPlaceholders || false;\n    this.nestTables = opts.nestTables;\n    this.password = opts.password;\n    this.permitSetMultiParamEntries = opts.permitSetMultiParamEntries || false;\n    this.permitConnectionWhenExpired = opts.permitConnectionWhenExpired || false;\n    this.pipelining = opts.pipelining;\n\n    if (opts.pipelining === undefined) {\n      this.permitLocalInfile = opts.permitLocalInfile || false;\n      this.pipelining = !this.permitLocalInfile;\n    } else {\n      this.pipelining = opts.pipelining;\n\n      if (opts.permitLocalInfile === true && this.pipelining) {\n        throw new Error('enabling options `permitLocalInfile` and ' + '`pipelining` is not possible, options are incompatible.');\n      }\n\n      this.permitLocalInfile = this.pipelining ? false : opts.permitLocalInfile || false;\n    }\n\n    this.port = opts.port || 3306;\n    this.rowsAsArray = opts.rowsAsArray || false;\n    this.socketPath = opts.socketPath;\n    this.sessionVariables = opts.sessionVariables;\n    this.ssl = opts.ssl;\n\n    if (opts.ssl) {\n      if (typeof opts.ssl !== 'boolean' && typeof opts.ssl !== 'string') {\n        this.ssl.rejectUnauthorized = opts.ssl.rejectUnauthorized !== false;\n      }\n    }\n\n    this.supportBigNumbers = opts.supportBigNumbers || false;\n    this.timezone = opts.timezone || 'local';\n\n    if (this.timezone && this.timezone !== 'local' && this.timezone !== 'auto') {\n      var tzName = this.timezone;\n\n      if (this.timezone === 'Z') {\n        tzName = 'Etc/UTC';\n      } else {\n        var matched = this.timezone.match(/([+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n\n        if (matched) {\n          var hour = (matched[1] === '-' ? 1 : -1) * Number.parseInt(matched[2], 10);\n          var minutes = matched.length > 2 && matched[3] ? Number.parseInt(matched[3], 10) : 0;\n\n          if (minutes > 0) {\n            throw new RangeError(\"timezone format incompatible with IANA standard timezone format was '\" + this.timezone + \"'\");\n          }\n\n          tzName = 'Etc/GMT' + (matched[1] === '-' ? '+' : '') + hour;\n          console.log(\"warning: please use IANA standard timezone format ('Etc/GMT\" + (matched[1] === '-' ? '+' : '') + hour + \"')\");\n        }\n      }\n\n      this.localTz = moment.tz.guess();\n\n      if (tzName === this.localTz) {\n        this.tz = null;\n      } else {\n        this.tz = moment.tz.setDefault(tzName);\n\n        if (!this.tz.defaultZone) {\n          throw Errors.createError(\"Unknown IANA timezone '\" + tzName + \"'.\", true, null, '08S01', Errors.ER_WRONG_IANA_TIMEZONE);\n        }\n      }\n    }\n\n    this.trace = opts.trace || false;\n    this.typeCast = opts.typeCast;\n\n    if (this.typeCast !== undefined && typeof this.typeCast !== 'function') {\n      this.typeCast = undefined;\n    }\n\n    this.user = opts.user || process.env.USERNAME;\n\n    if (this.maxAllowedPacket && !Number.isInteger(this.maxAllowedPacket)) {\n      throw new RangeError(\"maxAllowedPacket must be an integer. was '\" + this.maxAllowedPacket + \"'\");\n    }\n  }\n  /**\r\n   * When parsing from String, correcting type.\r\n   *\r\n   * @param opts options\r\n   * @return {opts}\r\n   */\n\n\n  _createClass(ConnectionOptions, null, [{\n    key: \"parseOptionDataType\",\n    value: function parseOptionDataType(opts) {\n      if (opts.bigNumberStrings) opts.bigNumberStrings = opts.bigNumberStrings == 'true';\n      if (opts.bulk) opts.bulk = opts.bulk == 'true';\n      if (opts.logPackets) opts.logPackets = opts.logPackets == 'true';\n\n      if (opts.charsetNumber && !isNaN(Number.parseInt(opts.charsetNumber))) {\n        opts.charsetNumber = Number.parseInt(opts.charsetNumber);\n      }\n\n      if (opts.compress) opts.compress = opts.compress == 'true';\n      if (opts.connectAttributes) opts.connectAttributes = opts.connectAttributes == 'true';\n      if (opts.connectTimeout) opts.connectTimeout = parseInt(opts.connectTimeout);\n      if (opts.socketTimeout) opts.socketTimeout = parseInt(opts.socketTimeout);\n      if (opts.dateStrings) opts.dateStrings = opts.dateStrings == 'true';\n      if (opts.debug) opts.debug = opts.debug == 'true';\n      if (opts.checkDuplicate) opts.checkDuplicate = opts.checkDuplicate == 'true';\n      if (opts.debugCompress) opts.debugCompress = opts.debugCompress == 'true';\n      if (opts.debugLen) opts.debugLen = parseInt(opts.debugLen);\n      if (opts.queryTimeout) opts.queryTimeout = parseInt(opts.queryTimeout);\n      if (opts.foundRows) opts.foundRows = opts.foundRows == 'true';\n      if (opts.maxAllowedPacket && !isNaN(Number.parseInt(opts.maxAllowedPacket))) opts.maxAllowedPacket = parseInt(opts.maxAllowedPacket);\n      if (opts.metaAsArray) opts.metaAsArray = opts.metaAsArray == 'true';\n      if (opts.multipleStatements) opts.multipleStatements = opts.multipleStatements == 'true';\n      if (opts.namedPlaceholders) opts.namedPlaceholders = opts.namedPlaceholders == 'true';\n      if (opts.nestTables) opts.nestTables = opts.nestTables == 'true';\n      if (opts.permitSetMultiParamEntries) opts.permitSetMultiParamEntries = opts.permitSetMultiParamEntries == 'true';\n      if (opts.pipelining) opts.pipelining = opts.pipelining == 'true';\n      if (opts.forceVersionCheck) opts.forceVersionCheck = opts.forceVersionCheck == 'true';\n      if (opts.rowsAsArray) opts.rowsAsArray = opts.rowsAsArray == 'true';\n      if (opts.supportBigNumbers) opts.supportBigNumbers = opts.supportBigNumbers == 'true';\n      if (opts.trace) opts.trace = opts.trace == 'true';\n      if (opts.ssl && (opts.ssl == 'true' || opts.ssl == 'false')) opts.ssl = opts.ssl == 'true';\n      return opts;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(opts) {\n      var matchResults = opts.match(urlFormat);\n\n      if (!matchResults) {\n        throw new Error(\"error parsing connection string '\" + opts + \"'. format must be 'mariadb://[<user>[:<password>]@]<host>[:<port>]/[<db>[?<opt1>=<value1>[&<opt2>=<value2>]]]'\");\n      }\n\n      var options = {\n        user: matchResults[2],\n        password: matchResults[4],\n        host: matchResults[6],\n        port: matchResults[8] ? parseInt(matchResults[8]) : undefined,\n        database: matchResults[9]\n      };\n      var variousOptsString = matchResults[11];\n\n      if (variousOptsString) {\n        var keyVals = variousOptsString.split('&');\n        keyVals.forEach(function (keyVal) {\n          var equalIdx = keyVal.indexOf('=');\n\n          if (equalIdx !== 1) {\n            options[keyVal.substring(0, equalIdx)] = keyVal.substring(equalIdx + 1);\n          }\n        });\n      }\n\n      return this.parseOptionDataType(options);\n    }\n  }]);\n\n  return ConnectionOptions;\n}();\n\nmodule.exports = ConnectionOptions;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/config/connection-options.js"],"names":["Collations","require","urlFormat","moment","Errors","ConnectionOptions","opts","parse","bigNumberStrings","bulk","undefined","charset","collation","fromCharset","toLowerCase","fromName","toUpperCase","console","log","RangeError","fromIndex","charsetNumber","compress","logPackets","connectAttributes","connectTimeout","queryTimeout","socketTimeout","database","checkDuplicate","dateStrings","debug","debugCompress","debugLen","foundRows","host","initSql","forceVersionCheck","maxAllowedPacket","metaAsArray","multipleStatements","namedPlaceholders","nestTables","password","permitSetMultiParamEntries","permitConnectionWhenExpired","pipelining","permitLocalInfile","Error","port","rowsAsArray","socketPath","sessionVariables","ssl","rejectUnauthorized","supportBigNumbers","timezone","tzName","matched","match","hour","Number","parseInt","minutes","length","localTz","tz","guess","setDefault","defaultZone","createError","ER_WRONG_IANA_TIMEZONE","trace","typeCast","user","process","env","USERNAME","isInteger","isNaN","matchResults","options","variousOptsString","keyVals","split","forEach","keyVal","equalIdx","indexOf","substring","parseOptionDataType","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst Collations = require('../const/collations.js');\r\nconst urlFormat = /mariadb:\\/\\/(([^/@:]+)?(:([^/]+))?@)?(([^/:]+)(:([0-9]+))?)\\/([^?]+)(\\?(.*))?$/;\r\nconst moment = require('moment-timezone');\r\nconst Errors = require('../misc/errors');\r\n\r\n/**\r\n * Default option similar to mysql driver.\r\n * known differences\r\n * - no queryFormat option. Permitting client to parse is a security risk. Best is to give SQL + parameters\r\n *   Only possible Objects are :\r\n *   - Buffer\r\n *   - Date\r\n *   - Object that implement toSqlString function\r\n *   - JSON object\r\n * + rowsAsArray (in mysql2) permit to have rows by index, not by name. Avoiding to parsing metadata string => faster\r\n */\r\nclass ConnectionOptions {\r\n  constructor(opts) {\r\n    if (typeof opts === 'string') {\r\n      opts = ConnectionOptions.parse(opts);\r\n    }\r\n\r\n    if (!opts) opts = {};\r\n    this.bigNumberStrings = opts.bigNumberStrings || false;\r\n    this.bulk = opts.bulk === undefined || opts.bulk;\r\n    if (opts.charset && typeof opts.charset === 'string') {\r\n      this.collation = Collations.fromCharset(opts.charset.toLowerCase());\r\n      if (this.collation === undefined) {\r\n        this.collation = Collations.fromName(opts.charset.toUpperCase());\r\n        if (this.collation !== undefined) {\r\n          console.log(\r\n            \"warning: please use option 'collation' \" +\r\n              \"in replacement of 'charset' when using a collation name ('\" +\r\n              opts.charset +\r\n              \"')\\n\" +\r\n              \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\"\r\n          );\r\n        }\r\n      }\r\n      if (this.collation === undefined)\r\n        throw new RangeError(\"Unknown charset '\" + opts.charset + \"'\");\r\n    } else if (opts.collation && typeof opts.collation === 'string') {\r\n      this.collation = Collations.fromName(opts.collation.toUpperCase());\r\n      if (this.collation === undefined)\r\n        throw new RangeError(\"Unknown collation '\" + opts.collation + \"'\");\r\n    } else {\r\n      this.collation = Collations.fromIndex(opts.charsetNumber) || Collations.fromIndex(224); //UTF8MB4_UNICODE_CI;\r\n    }\r\n    this.compress = opts.compress || false;\r\n    this.logPackets = opts.logPackets || false;\r\n    this.connectAttributes = opts.connectAttributes || false;\r\n    this.connectTimeout = opts.connectTimeout === undefined ? 10000 : opts.connectTimeout;\r\n    this.queryTimeout = opts.queryTimeout === undefined ? 0 : opts.queryTimeout;\r\n    this.socketTimeout = opts.socketTimeout === undefined ? 0 : opts.socketTimeout;\r\n    this.database = opts.database;\r\n    this.checkDuplicate = opts.checkDuplicate === undefined ? true : opts.checkDuplicate;\r\n    this.dateStrings = opts.dateStrings || false;\r\n    this.debug = opts.debug || false;\r\n    this.debugCompress = opts.debugCompress || false;\r\n    this.debugLen = opts.debugLen || 256;\r\n    this.foundRows = opts.foundRows === undefined || opts.foundRows;\r\n    this.host = opts.host || 'localhost';\r\n    this.initSql = opts.initSql;\r\n    this.forceVersionCheck = opts.forceVersionCheck || false;\r\n    this.maxAllowedPacket = opts.maxAllowedPacket;\r\n    this.metaAsArray = opts.metaAsArray || false;\r\n    this.multipleStatements = opts.multipleStatements || false;\r\n    this.namedPlaceholders = opts.namedPlaceholders || false;\r\n    this.nestTables = opts.nestTables;\r\n    this.password = opts.password;\r\n    this.permitSetMultiParamEntries = opts.permitSetMultiParamEntries || false;\r\n    this.permitConnectionWhenExpired = opts.permitConnectionWhenExpired || false;\r\n    this.pipelining = opts.pipelining;\r\n    if (opts.pipelining === undefined) {\r\n      this.permitLocalInfile = opts.permitLocalInfile || false;\r\n      this.pipelining = !this.permitLocalInfile;\r\n    } else {\r\n      this.pipelining = opts.pipelining;\r\n      if (opts.permitLocalInfile === true && this.pipelining) {\r\n        throw new Error(\r\n          'enabling options `permitLocalInfile` and ' +\r\n            '`pipelining` is not possible, options are incompatible.'\r\n        );\r\n      }\r\n      this.permitLocalInfile = this.pipelining ? false : opts.permitLocalInfile || false;\r\n    }\r\n    this.port = opts.port || 3306;\r\n    this.rowsAsArray = opts.rowsAsArray || false;\r\n    this.socketPath = opts.socketPath;\r\n    this.sessionVariables = opts.sessionVariables;\r\n    this.ssl = opts.ssl;\r\n    if (opts.ssl) {\r\n      if (typeof opts.ssl !== 'boolean' && typeof opts.ssl !== 'string') {\r\n        this.ssl.rejectUnauthorized = opts.ssl.rejectUnauthorized !== false;\r\n      }\r\n    }\r\n    this.supportBigNumbers = opts.supportBigNumbers || false;\r\n    this.timezone = opts.timezone || 'local';\r\n    if (this.timezone && this.timezone !== 'local' && this.timezone !== 'auto') {\r\n      let tzName = this.timezone;\r\n      if (this.timezone === 'Z') {\r\n        tzName = 'Etc/UTC';\r\n      } else {\r\n        const matched = this.timezone.match(/([+\\-\\s])(\\d\\d):?(\\d\\d)?/);\r\n        if (matched) {\r\n          const hour = (matched[1] === '-' ? 1 : -1) * Number.parseInt(matched[2], 10);\r\n          const minutes = matched.length > 2 && matched[3] ? Number.parseInt(matched[3], 10) : 0;\r\n          if (minutes > 0) {\r\n            throw new RangeError(\r\n              \"timezone format incompatible with IANA standard timezone format was '\" +\r\n                this.timezone +\r\n                \"'\"\r\n            );\r\n          }\r\n          tzName = 'Etc/GMT' + (matched[1] === '-' ? '+' : '') + hour;\r\n          console.log(\r\n            \"warning: please use IANA standard timezone format ('Etc/GMT\" +\r\n              (matched[1] === '-' ? '+' : '') +\r\n              hour +\r\n              \"')\"\r\n          );\r\n        }\r\n      }\r\n      this.localTz = moment.tz.guess();\r\n      if (tzName === this.localTz) {\r\n        this.tz = null;\r\n      } else {\r\n        this.tz = moment.tz.setDefault(tzName);\r\n        if (!this.tz.defaultZone) {\r\n          throw Errors.createError(\r\n            \"Unknown IANA timezone '\" + tzName + \"'.\",\r\n            true,\r\n            null,\r\n            '08S01',\r\n            Errors.ER_WRONG_IANA_TIMEZONE\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.trace = opts.trace || false;\r\n    this.typeCast = opts.typeCast;\r\n    if (this.typeCast !== undefined && typeof this.typeCast !== 'function') {\r\n      this.typeCast = undefined;\r\n    }\r\n    this.user = opts.user || process.env.USERNAME;\r\n\r\n    if (this.maxAllowedPacket && !Number.isInteger(this.maxAllowedPacket)) {\r\n      throw new RangeError(\r\n        \"maxAllowedPacket must be an integer. was '\" + this.maxAllowedPacket + \"'\"\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When parsing from String, correcting type.\r\n   *\r\n   * @param opts options\r\n   * @return {opts}\r\n   */\r\n  static parseOptionDataType(opts) {\r\n    if (opts.bigNumberStrings) opts.bigNumberStrings = opts.bigNumberStrings == 'true';\r\n    if (opts.bulk) opts.bulk = opts.bulk == 'true';\r\n    if (opts.logPackets) opts.logPackets = opts.logPackets == 'true';\r\n    if (opts.charsetNumber && !isNaN(Number.parseInt(opts.charsetNumber))) {\r\n      opts.charsetNumber = Number.parseInt(opts.charsetNumber);\r\n    }\r\n    if (opts.compress) opts.compress = opts.compress == 'true';\r\n    if (opts.connectAttributes) opts.connectAttributes = opts.connectAttributes == 'true';\r\n    if (opts.connectTimeout) opts.connectTimeout = parseInt(opts.connectTimeout);\r\n    if (opts.socketTimeout) opts.socketTimeout = parseInt(opts.socketTimeout);\r\n    if (opts.dateStrings) opts.dateStrings = opts.dateStrings == 'true';\r\n    if (opts.debug) opts.debug = opts.debug == 'true';\r\n    if (opts.checkDuplicate) opts.checkDuplicate = opts.checkDuplicate == 'true';\r\n    if (opts.debugCompress) opts.debugCompress = opts.debugCompress == 'true';\r\n    if (opts.debugLen) opts.debugLen = parseInt(opts.debugLen);\r\n    if (opts.queryTimeout) opts.queryTimeout = parseInt(opts.queryTimeout);\r\n    if (opts.foundRows) opts.foundRows = opts.foundRows == 'true';\r\n    if (opts.maxAllowedPacket && !isNaN(Number.parseInt(opts.maxAllowedPacket)))\r\n      opts.maxAllowedPacket = parseInt(opts.maxAllowedPacket);\r\n    if (opts.metaAsArray) opts.metaAsArray = opts.metaAsArray == 'true';\r\n    if (opts.multipleStatements) opts.multipleStatements = opts.multipleStatements == 'true';\r\n    if (opts.namedPlaceholders) opts.namedPlaceholders = opts.namedPlaceholders == 'true';\r\n    if (opts.nestTables) opts.nestTables = opts.nestTables == 'true';\r\n    if (opts.permitSetMultiParamEntries)\r\n      opts.permitSetMultiParamEntries = opts.permitSetMultiParamEntries == 'true';\r\n    if (opts.pipelining) opts.pipelining = opts.pipelining == 'true';\r\n    if (opts.forceVersionCheck) opts.forceVersionCheck = opts.forceVersionCheck == 'true';\r\n    if (opts.rowsAsArray) opts.rowsAsArray = opts.rowsAsArray == 'true';\r\n    if (opts.supportBigNumbers) opts.supportBigNumbers = opts.supportBigNumbers == 'true';\r\n    if (opts.trace) opts.trace = opts.trace == 'true';\r\n    if (opts.ssl && (opts.ssl == 'true' || opts.ssl == 'false')) opts.ssl = opts.ssl == 'true';\r\n    return opts;\r\n  }\r\n\r\n  static parse(opts) {\r\n    const matchResults = opts.match(urlFormat);\r\n\r\n    if (!matchResults) {\r\n      throw new Error(\r\n        \"error parsing connection string '\" +\r\n          opts +\r\n          \"'. format must be 'mariadb://[<user>[:<password>]@]<host>[:<port>]/[<db>[?<opt1>=<value1>[&<opt2>=<value2>]]]'\"\r\n      );\r\n    }\r\n    const options = {\r\n      user: matchResults[2],\r\n      password: matchResults[4],\r\n      host: matchResults[6],\r\n      port: matchResults[8] ? parseInt(matchResults[8]) : undefined,\r\n      database: matchResults[9]\r\n    };\r\n\r\n    const variousOptsString = matchResults[11];\r\n    if (variousOptsString) {\r\n      const keyVals = variousOptsString.split('&');\r\n      keyVals.forEach(function(keyVal) {\r\n        const equalIdx = keyVal.indexOf('=');\r\n        if (equalIdx !== 1) {\r\n          options[keyVal.substring(0, equalIdx)] = keyVal.substring(equalIdx + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.parseOptionDataType(options);\r\n  }\r\n}\r\n\r\nmodule.exports = ConnectionOptions;\r\n"]},"metadata":{},"sourceType":"script"}