{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar ResultSet = require('./resultset');\n\nvar FieldDetail = require('../const/field-detail');\n\nvar FieldType = require('../const/field-type');\n\nvar Long = require('long');\n\nvar QUOTE = 0x27;\n\nvar CommonText =\n/*#__PURE__*/\nfunction (_ResultSet) {\n  _inherits(CommonText, _ResultSet);\n\n  function CommonText(resolve, reject, cmdOpts, connOpts, sql, values) {\n    var _this;\n\n    _classCallCheck(this, CommonText);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommonText).call(this, resolve, reject));\n\n    _this.configAssign(connOpts, cmdOpts);\n\n    _this.sql = sql;\n    _this.initialValues = values;\n    _this.getDateQuote = _this.opts.tz ? CommonText.getTimezoneDate : CommonText.getLocalDate;\n    return _this;\n  }\n  /**\n   * Write (and escape) current parameter value to output writer\n   *\n   * @param out     output writer\n   * @param value   current parameter\n   * @param opts    connection options\n   * @param info    connection information\n   */\n\n\n  _createClass(CommonText, [{\n    key: \"writeParam\",\n    value: function writeParam(out, value, opts, info) {\n      switch (typeof value) {\n        case 'boolean':\n          out.writeStringAscii(value ? 'true' : 'false');\n          break;\n\n        case 'number':\n          out.writeStringAscii('' + value);\n          break;\n\n        case 'object':\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            out.writeStringAscii(this.getDateQuote(value, opts));\n          } else if (Buffer.isBuffer(value)) {\n            out.writeStringAscii(\"_BINARY '\");\n            out.writeBufferEscape(value);\n            out.writeInt8(QUOTE);\n          } else if (typeof value.toSqlString === 'function') {\n            out.writeStringEscapeQuote(String(value.toSqlString()));\n          } else if (Long.isLong(value)) {\n            out.writeStringAscii(value.toString());\n          } else if (Array.isArray(value)) {\n            out.writeStringAscii('(');\n\n            for (var i = 0; i < value.length; i++) {\n              if (i !== 0) out.writeStringAscii(',');\n              this.writeParam(out, value[i], opts, info);\n            }\n\n            out.writeStringAscii(')');\n          } else {\n            if (value.type != null && ['Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon', 'GeometryCollection'].includes(value.type)) {\n              //GeoJSON format.\n              var prefix = info.isMariaDB() && info.hasMinVersion(10, 1, 4) || !info.isMariaDB() && info.hasMinVersion(5, 7, 6) ? 'ST_' : '';\n\n              switch (value.type) {\n                case 'Point':\n                  out.writeStringAscii(prefix + \"PointFromText('POINT(\" + CommonText.geoPointToString(value.coordinates) + \")')\");\n                  break;\n\n                case 'LineString':\n                  out.writeStringAscii(prefix + \"LineFromText('LINESTRING(\" + CommonText.geoArrayPointToString(value.coordinates) + \")')\");\n                  break;\n\n                case 'Polygon':\n                  out.writeStringAscii(prefix + \"PolygonFromText('POLYGON(\" + CommonText.geoMultiArrayPointToString(value.coordinates) + \")')\");\n                  break;\n\n                case 'MultiPoint':\n                  out.writeStringAscii(prefix + \"MULTIPOINTFROMTEXT('MULTIPOINT(\" + CommonText.geoArrayPointToString(value.coordinates) + \")')\");\n                  break;\n\n                case 'MultiLineString':\n                  out.writeStringAscii(prefix + \"MLineFromText('MULTILINESTRING(\" + CommonText.geoMultiArrayPointToString(value.coordinates) + \")')\");\n                  break;\n\n                case 'MultiPolygon':\n                  out.writeStringAscii(prefix + \"MPolyFromText('MULTIPOLYGON(\" + CommonText.geoMultiPolygonToString(value.coordinates) + \")')\");\n                  break;\n\n                case 'GeometryCollection':\n                  out.writeStringAscii(prefix + \"GeomCollFromText('GEOMETRYCOLLECTION(\" + CommonText.geometricCollectionToString(value.geometries) + \")')\");\n                  break;\n              }\n            } else {\n              if (opts.permitSetMultiParamEntries) {\n                var first = true;\n\n                for (var key in value) {\n                  var val = value[key];\n                  if (typeof val === 'function') continue;\n\n                  if (first) {\n                    first = false;\n                  } else {\n                    out.writeStringAscii(',');\n                  }\n\n                  out.writeString('`' + key + '`');\n                  out.writeStringAscii('=');\n                  this.writeParam(out, val, opts, info);\n                }\n\n                if (first) out.writeStringEscapeQuote(JSON.stringify(value));\n              } else {\n                out.writeStringEscapeQuote(JSON.stringify(value));\n              }\n            }\n          }\n\n          break;\n\n        default:\n          out.writeStringEscapeQuote(value);\n      }\n    }\n  }, {\n    key: \"parseRowAsArray\",\n    value: function parseRowAsArray(columns, packet, connOpts) {\n      var row = new Array(this._columnCount);\n\n      for (var i = 0; i < this._columnCount; i++) {\n        row[i] = this._getValue(i, columns[i], this.opts, connOpts, packet);\n      }\n\n      return row;\n    }\n  }, {\n    key: \"parseRowNested\",\n    value: function parseRowNested(columns, packet, connOpts) {\n      var row = {};\n\n      for (var i = 0; i < this._columnCount; i++) {\n        if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n        row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._getValue(i, columns[i], this.opts, connOpts, packet);\n      }\n\n      return row;\n    }\n  }, {\n    key: \"parseRowStd\",\n    value: function parseRowStd(columns, packet, connOpts) {\n      var row = {};\n\n      for (var i = 0; i < this._columnCount; i++) {\n        row[this.tableHeader[i]] = this._getValue(i, columns[i], this.opts, connOpts, packet);\n      }\n\n      return row;\n    }\n  }, {\n    key: \"castTextWrapper\",\n    value: function castTextWrapper(column, opts, connOpts, packet) {\n      column.string = function () {\n        return packet.readStringLength();\n      };\n\n      column.buffer = function () {\n        return packet.readBufferLengthEncoded();\n      };\n\n      column.float = function () {\n        return packet.readFloatLengthCoded();\n      };\n\n      column.int = function () {\n        return packet.readIntLengthEncoded();\n      };\n\n      column.long = function () {\n        return packet.readLongLengthEncoded(opts.supportBigNumbers, opts.bigNumberStrings, (column.flags & FieldDetail.UNSIGNED) > 0);\n      };\n\n      column.decimal = function () {\n        return packet.readDecimalLengthEncoded(opts.supportBigNumbers, opts.bigNumberStrings);\n      };\n\n      column.date = function () {\n        return packet.readDateTime(opts);\n      };\n\n      column.geometry = function () {\n        return column.readGeometry();\n      };\n    }\n  }, {\n    key: \"readCastValue\",\n    value: function readCastValue(index, column, opts, connOpts, packet) {\n      this.castTextWrapper(column, opts, connOpts, packet);\n      return opts.typeCast(column, this.readRowData.bind(this, index, column, opts, connOpts, packet));\n    }\n    /**\n     * Read row data.\n     *\n     * @param index     current data index in row\n     * @param column    associate metadata\n     * @param opts   query options\n     * @param connOpts  connection options\n     * @param packet    row packet\n     * @returns {*}     data\n     */\n\n  }, {\n    key: \"readRowData\",\n    value: function readRowData(index, column, opts, connOpts, packet) {\n      switch (column.columnType) {\n        case FieldType.TINY:\n        case FieldType.SHORT:\n        case FieldType.LONG:\n        case FieldType.INT24:\n        case FieldType.YEAR:\n          return packet.readIntLengthEncoded();\n\n        case FieldType.FLOAT:\n        case FieldType.DOUBLE:\n          return packet.readFloatLengthCoded();\n\n        case FieldType.LONGLONG:\n          return packet.readLongLengthEncoded(opts.supportBigNumbers, opts.bigNumberStrings, (column.flags & FieldDetail.UNSIGNED) > 0);\n\n        case FieldType.DECIMAL:\n        case FieldType.NEWDECIMAL:\n          return packet.readDecimalLengthEncoded(opts.supportBigNumbers, opts.bigNumberStrings);\n\n        case FieldType.DATE:\n          if (opts.dateStrings) {\n            return packet.readAsciiStringLengthEncoded();\n          }\n\n          return packet.readDate();\n\n        case FieldType.DATETIME:\n        case FieldType.TIMESTAMP:\n          if (opts.dateStrings) {\n            return packet.readAsciiStringLengthEncoded();\n          }\n\n          return packet.readDateTime(opts);\n\n        case FieldType.TIME:\n          return packet.readAsciiStringLengthEncoded();\n\n        case FieldType.GEOMETRY:\n          return packet.readGeometry();\n\n        case FieldType.JSON:\n          //for mysql only => parse string as JSON object\n          return JSON.parse(packet.readStringLengthEncoded('utf8'));\n\n        default:\n          if (column.collation.index === 63) {\n            return packet.readBufferLengthEncoded();\n          }\n\n          var string = packet.readStringLength();\n\n          if (column.flags & 2048) {\n            //SET\n            return string == null ? null : string === '' ? [] : string.split(',');\n          }\n\n          return string;\n      }\n    }\n  }], [{\n    key: \"geometricCollectionToString\",\n    value: function geometricCollectionToString(geo) {\n      if (!geo) return '';\n      var st = '';\n\n      for (var i = 0; i < geo.length; i++) {\n        //GeoJSON format.\n        st += i !== 0 ? ',' : '';\n\n        switch (geo[i].type) {\n          case 'Point':\n            st += 'POINT(' + CommonText.geoPointToString(geo[i].coordinates) + ')';\n            break;\n\n          case 'LineString':\n            st += 'LINESTRING(' + CommonText.geoArrayPointToString(geo[i].coordinates) + ')';\n            break;\n\n          case 'Polygon':\n            st += 'POLYGON(' + CommonText.geoMultiArrayPointToString(geo[i].coordinates) + ')';\n            break;\n\n          case 'MultiPoint':\n            st += 'MULTIPOINT(' + CommonText.geoArrayPointToString(geo[i].coordinates) + ')';\n            break;\n\n          case 'MultiLineString':\n            st += 'MULTILINESTRING(' + CommonText.geoMultiArrayPointToString(geo[i].coordinates) + ')';\n            break;\n\n          case 'MultiPolygon':\n            st += 'MULTIPOLYGON(' + CommonText.geoMultiPolygonToString(geo[i].coordinates) + ')';\n            break;\n        }\n      }\n\n      return st;\n    }\n  }, {\n    key: \"geoMultiPolygonToString\",\n    value: function geoMultiPolygonToString(coords) {\n      if (!coords) return '';\n      var st = '';\n\n      for (var i = 0; i < coords.length; i++) {\n        st += (i !== 0 ? ',(' : '(') + CommonText.geoMultiArrayPointToString(coords[i]) + ')';\n      }\n\n      return st;\n    }\n  }, {\n    key: \"geoMultiArrayPointToString\",\n    value: function geoMultiArrayPointToString(coords) {\n      if (!coords) return '';\n      var st = '';\n\n      for (var i = 0; i < coords.length; i++) {\n        st += (i !== 0 ? ',(' : '(') + CommonText.geoArrayPointToString(coords[i]) + ')';\n      }\n\n      return st;\n    }\n  }, {\n    key: \"geoArrayPointToString\",\n    value: function geoArrayPointToString(coords) {\n      if (!coords) return '';\n      var st = '';\n\n      for (var i = 0; i < coords.length; i++) {\n        st += (i !== 0 ? ',' : '') + CommonText.geoPointToString(coords[i]);\n      }\n\n      return st;\n    }\n  }, {\n    key: \"geoPointToString\",\n    value: function geoPointToString(coords) {\n      if (!coords) return '';\n      return (isNaN(coords[0]) ? '' : coords[0]) + ' ' + (isNaN(coords[1]) ? '' : coords[1]);\n    }\n  }]);\n\n  return CommonText;\n}(ResultSet);\n\nfunction getDatePartQuote(year, mon, day, hour, min, sec, ms) {\n  //return 'YYYY-MM-DD HH:MM:SS' datetime format\n  //see https://mariadb.com/kb/en/library/datetime/\n  return \"'\" + (year > 999 ? year : year > 99 ? '0' + year : year > 9 ? '00' + year : '000' + year) + '-' + (mon < 10 ? '0' : '') + mon + '-' + (day < 10 ? '0' : '') + day + ' ' + (hour < 10 ? '0' : '') + hour + ':' + (min < 10 ? '0' : '') + min + ':' + (sec < 10 ? '0' : '') + sec + '.' + (ms > 99 ? ms : ms > 9 ? '0' + ms : '00' + ms) + \"'\";\n}\n\nfunction getLocalDate(date, opts) {\n  var year = date.getFullYear();\n  var mon = date.getMonth() + 1;\n  var day = date.getDate();\n  var hour = date.getHours();\n  var min = date.getMinutes();\n  var sec = date.getSeconds();\n  var ms = date.getMilliseconds();\n  return getDatePartQuote(year, mon, day, hour, min, sec, ms);\n}\n\nfunction getTimezoneDate(date, opts) {\n  if (date.getMilliseconds() != 0) {\n    return opts.tz(date).format(\"'YYYY-MM-DD HH:mm:ss.SSS'\");\n  }\n\n  return opts.tz(date).format(\"'YYYY-MM-DD HH:mm:ss'\");\n}\n\nmodule.exports = CommonText;\nmodule.exports.getTimezoneDate = getTimezoneDate;\nmodule.exports.getLocalDate = getLocalDate;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/common-text-cmd.js"],"names":["ResultSet","require","FieldDetail","FieldType","Long","QUOTE","CommonText","resolve","reject","cmdOpts","connOpts","sql","values","configAssign","initialValues","getDateQuote","opts","tz","getTimezoneDate","getLocalDate","out","value","info","writeStringAscii","Object","prototype","toString","call","Buffer","isBuffer","writeBufferEscape","writeInt8","toSqlString","writeStringEscapeQuote","String","isLong","Array","isArray","i","length","writeParam","type","includes","prefix","isMariaDB","hasMinVersion","geoPointToString","coordinates","geoArrayPointToString","geoMultiArrayPointToString","geoMultiPolygonToString","geometricCollectionToString","geometries","permitSetMultiParamEntries","first","key","val","writeString","JSON","stringify","columns","packet","row","_columnCount","_getValue","tableHeader","column","string","readStringLength","buffer","readBufferLengthEncoded","float","readFloatLengthCoded","int","readIntLengthEncoded","long","readLongLengthEncoded","supportBigNumbers","bigNumberStrings","flags","UNSIGNED","decimal","readDecimalLengthEncoded","date","readDateTime","geometry","readGeometry","index","castTextWrapper","typeCast","readRowData","bind","columnType","TINY","SHORT","LONG","INT24","YEAR","FLOAT","DOUBLE","LONGLONG","DECIMAL","NEWDECIMAL","DATE","dateStrings","readAsciiStringLengthEncoded","readDate","DATETIME","TIMESTAMP","TIME","GEOMETRY","parse","readStringLengthEncoded","collation","split","geo","st","coords","isNaN","getDatePartQuote","year","mon","day","hour","min","sec","ms","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","format","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ResultSet = require('./resultset');\nconst FieldDetail = require('../const/field-detail');\nconst FieldType = require('../const/field-type');\nconst Long = require('long');\nconst QUOTE = 0x27;\n\nclass CommonText extends ResultSet {\n  constructor(resolve, reject, cmdOpts, connOpts, sql, values) {\n    super(resolve, reject);\n    this.configAssign(connOpts, cmdOpts);\n    this.sql = sql;\n    this.initialValues = values;\n    this.getDateQuote = this.opts.tz ? CommonText.getTimezoneDate : CommonText.getLocalDate;\n  }\n\n  /**\n   * Write (and escape) current parameter value to output writer\n   *\n   * @param out     output writer\n   * @param value   current parameter\n   * @param opts    connection options\n   * @param info    connection information\n   */\n  writeParam(out, value, opts, info) {\n    switch (typeof value) {\n      case 'boolean':\n        out.writeStringAscii(value ? 'true' : 'false');\n        break;\n      case 'number':\n        out.writeStringAscii('' + value);\n        break;\n      case 'object':\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          out.writeStringAscii(this.getDateQuote(value, opts));\n        } else if (Buffer.isBuffer(value)) {\n          out.writeStringAscii(\"_BINARY '\");\n          out.writeBufferEscape(value);\n          out.writeInt8(QUOTE);\n        } else if (typeof value.toSqlString === 'function') {\n          out.writeStringEscapeQuote(String(value.toSqlString()));\n        } else if (Long.isLong(value)) {\n          out.writeStringAscii(value.toString());\n        } else if (Array.isArray(value)) {\n          out.writeStringAscii('(');\n          for (let i = 0; i < value.length; i++) {\n            if (i !== 0) out.writeStringAscii(',');\n            this.writeParam(out, value[i], opts, info);\n          }\n          out.writeStringAscii(')');\n        } else {\n          if (\n            value.type != null &&\n            [\n              'Point',\n              'LineString',\n              'Polygon',\n              'MultiPoint',\n              'MultiLineString',\n              'MultiPolygon',\n              'GeometryCollection'\n            ].includes(value.type)\n          ) {\n            //GeoJSON format.\n            let prefix =\n              (info.isMariaDB() && info.hasMinVersion(10, 1, 4)) ||\n              (!info.isMariaDB() && info.hasMinVersion(5, 7, 6))\n                ? 'ST_'\n                : '';\n            switch (value.type) {\n              case 'Point':\n                out.writeStringAscii(\n                  prefix +\n                    \"PointFromText('POINT(\" +\n                    CommonText.geoPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'LineString':\n                out.writeStringAscii(\n                  prefix +\n                    \"LineFromText('LINESTRING(\" +\n                    CommonText.geoArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'Polygon':\n                out.writeStringAscii(\n                  prefix +\n                    \"PolygonFromText('POLYGON(\" +\n                    CommonText.geoMultiArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'MultiPoint':\n                out.writeStringAscii(\n                  prefix +\n                    \"MULTIPOINTFROMTEXT('MULTIPOINT(\" +\n                    CommonText.geoArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'MultiLineString':\n                out.writeStringAscii(\n                  prefix +\n                    \"MLineFromText('MULTILINESTRING(\" +\n                    CommonText.geoMultiArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'MultiPolygon':\n                out.writeStringAscii(\n                  prefix +\n                    \"MPolyFromText('MULTIPOLYGON(\" +\n                    CommonText.geoMultiPolygonToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'GeometryCollection':\n                out.writeStringAscii(\n                  prefix +\n                    \"GeomCollFromText('GEOMETRYCOLLECTION(\" +\n                    CommonText.geometricCollectionToString(value.geometries) +\n                    \")')\"\n                );\n                break;\n            }\n          } else {\n            if (opts.permitSetMultiParamEntries) {\n              let first = true;\n              for (let key in value) {\n                const val = value[key];\n                if (typeof val === 'function') continue;\n                if (first) {\n                  first = false;\n                } else {\n                  out.writeStringAscii(',');\n                }\n                out.writeString('`' + key + '`');\n                out.writeStringAscii('=');\n                this.writeParam(out, val, opts, info);\n              }\n              if (first) out.writeStringEscapeQuote(JSON.stringify(value));\n            } else {\n              out.writeStringEscapeQuote(JSON.stringify(value));\n            }\n          }\n        }\n        break;\n      default:\n        out.writeStringEscapeQuote(value);\n    }\n  }\n\n  static geometricCollectionToString(geo) {\n    if (!geo) return '';\n    let st = '';\n    for (let i = 0; i < geo.length; i++) {\n      //GeoJSON format.\n      st += i !== 0 ? ',' : '';\n      switch (geo[i].type) {\n        case 'Point':\n          st += 'POINT(' + CommonText.geoPointToString(geo[i].coordinates) + ')';\n          break;\n\n        case 'LineString':\n          st += 'LINESTRING(' + CommonText.geoArrayPointToString(geo[i].coordinates) + ')';\n          break;\n\n        case 'Polygon':\n          st += 'POLYGON(' + CommonText.geoMultiArrayPointToString(geo[i].coordinates) + ')';\n          break;\n\n        case 'MultiPoint':\n          st += 'MULTIPOINT(' + CommonText.geoArrayPointToString(geo[i].coordinates) + ')';\n          break;\n\n        case 'MultiLineString':\n          st +=\n            'MULTILINESTRING(' + CommonText.geoMultiArrayPointToString(geo[i].coordinates) + ')';\n          break;\n\n        case 'MultiPolygon':\n          st += 'MULTIPOLYGON(' + CommonText.geoMultiPolygonToString(geo[i].coordinates) + ')';\n          break;\n      }\n    }\n    return st;\n  }\n\n  static geoMultiPolygonToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',(' : '(') + CommonText.geoMultiArrayPointToString(coords[i]) + ')';\n    }\n    return st;\n  }\n\n  static geoMultiArrayPointToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',(' : '(') + CommonText.geoArrayPointToString(coords[i]) + ')';\n    }\n    return st;\n  }\n\n  static geoArrayPointToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',' : '') + CommonText.geoPointToString(coords[i]);\n    }\n    return st;\n  }\n\n  static geoPointToString(coords) {\n    if (!coords) return '';\n    return (isNaN(coords[0]) ? '' : coords[0]) + ' ' + (isNaN(coords[1]) ? '' : coords[1]);\n  }\n\n  parseRowAsArray(columns, packet, connOpts) {\n    const row = new Array(this._columnCount);\n    for (let i = 0; i < this._columnCount; i++) {\n      row[i] = this._getValue(i, columns[i], this.opts, connOpts, packet);\n    }\n    return row;\n  }\n\n  parseRowNested(columns, packet, connOpts) {\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n      row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._getValue(\n        i,\n        columns[i],\n        this.opts,\n        connOpts,\n        packet\n      );\n    }\n    return row;\n  }\n\n  parseRowStd(columns, packet, connOpts) {\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._getValue(i, columns[i], this.opts, connOpts, packet);\n    }\n    return row;\n  }\n\n  castTextWrapper(column, opts, connOpts, packet) {\n    column.string = () => packet.readStringLength();\n    column.buffer = () => packet.readBufferLengthEncoded();\n    column.float = () => packet.readFloatLengthCoded();\n    column.int = () => packet.readIntLengthEncoded();\n    column.long = () =>\n      packet.readLongLengthEncoded(\n        opts.supportBigNumbers,\n        opts.bigNumberStrings,\n        (column.flags & FieldDetail.UNSIGNED) > 0\n      );\n    column.decimal = () =>\n      packet.readDecimalLengthEncoded(opts.supportBigNumbers, opts.bigNumberStrings);\n    column.date = () => packet.readDateTime(opts);\n    column.geometry = () => {\n      return column.readGeometry();\n    };\n  }\n\n  readCastValue(index, column, opts, connOpts, packet) {\n    this.castTextWrapper(column, opts, connOpts, packet);\n    return opts.typeCast(\n      column,\n      this.readRowData.bind(this, index, column, opts, connOpts, packet)\n    );\n  }\n\n  /**\n   * Read row data.\n   *\n   * @param index     current data index in row\n   * @param column    associate metadata\n   * @param opts   query options\n   * @param connOpts  connection options\n   * @param packet    row packet\n   * @returns {*}     data\n   */\n  readRowData(index, column, opts, connOpts, packet) {\n    switch (column.columnType) {\n      case FieldType.TINY:\n      case FieldType.SHORT:\n      case FieldType.LONG:\n      case FieldType.INT24:\n      case FieldType.YEAR:\n        return packet.readIntLengthEncoded();\n      case FieldType.FLOAT:\n      case FieldType.DOUBLE:\n        return packet.readFloatLengthCoded();\n      case FieldType.LONGLONG:\n        return packet.readLongLengthEncoded(\n          opts.supportBigNumbers,\n          opts.bigNumberStrings,\n          (column.flags & FieldDetail.UNSIGNED) > 0\n        );\n      case FieldType.DECIMAL:\n      case FieldType.NEWDECIMAL:\n        return packet.readDecimalLengthEncoded(opts.supportBigNumbers, opts.bigNumberStrings);\n      case FieldType.DATE:\n        if (opts.dateStrings) {\n          return packet.readAsciiStringLengthEncoded();\n        }\n        return packet.readDate();\n      case FieldType.DATETIME:\n      case FieldType.TIMESTAMP:\n        if (opts.dateStrings) {\n          return packet.readAsciiStringLengthEncoded();\n        }\n        return packet.readDateTime(opts);\n      case FieldType.TIME:\n        return packet.readAsciiStringLengthEncoded();\n      case FieldType.GEOMETRY:\n        return packet.readGeometry();\n      case FieldType.JSON:\n        //for mysql only => parse string as JSON object\n        return JSON.parse(packet.readStringLengthEncoded('utf8'));\n\n      default:\n        if (column.collation.index === 63) {\n          return packet.readBufferLengthEncoded();\n        }\n        const string = packet.readStringLength();\n        if (column.flags & 2048) {\n          //SET\n          return string == null ? null : string === '' ? [] : string.split(',');\n        }\n        return string;\n    }\n  }\n}\n\nfunction getDatePartQuote(year, mon, day, hour, min, sec, ms) {\n  //return 'YYYY-MM-DD HH:MM:SS' datetime format\n  //see https://mariadb.com/kb/en/library/datetime/\n  return (\n    \"'\" +\n    (year > 999 ? year : year > 99 ? '0' + year : year > 9 ? '00' + year : '000' + year) +\n    '-' +\n    (mon < 10 ? '0' : '') +\n    mon +\n    '-' +\n    (day < 10 ? '0' : '') +\n    day +\n    ' ' +\n    (hour < 10 ? '0' : '') +\n    hour +\n    ':' +\n    (min < 10 ? '0' : '') +\n    min +\n    ':' +\n    (sec < 10 ? '0' : '') +\n    sec +\n    '.' +\n    (ms > 99 ? ms : ms > 9 ? '0' + ms : '00' + ms) +\n    \"'\"\n  );\n}\n\nfunction getLocalDate(date, opts) {\n  const year = date.getFullYear();\n  const mon = date.getMonth() + 1;\n  const day = date.getDate();\n  const hour = date.getHours();\n  const min = date.getMinutes();\n  const sec = date.getSeconds();\n  const ms = date.getMilliseconds();\n  return getDatePartQuote(year, mon, day, hour, min, sec, ms);\n}\n\nfunction getTimezoneDate(date, opts) {\n  if (date.getMilliseconds() != 0) {\n    return opts.tz(date).format(\"'YYYY-MM-DD HH:mm:ss.SSS'\");\n  }\n  return opts.tz(date).format(\"'YYYY-MM-DD HH:mm:ss'\");\n}\n\nmodule.exports = CommonText;\nmodule.exports.getTimezoneDate = getTimezoneDate;\nmodule.exports.getLocalDate = getLocalDate;\n"]},"metadata":{},"sourceType":"script"}