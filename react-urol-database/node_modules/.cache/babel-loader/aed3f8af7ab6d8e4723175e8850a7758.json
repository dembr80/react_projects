{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Collations = require('../const/collations.js');\n\nvar FieldType = require('../const/field-type');\n/**\n * Column definition\n * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n */\n\n\nvar ColumnDef =\n/*#__PURE__*/\nfunction () {\n  function ColumnDef(packet, stringParser) {\n    _classCallCheck(this, ColumnDef);\n\n    this._parse = stringParser;\n    this.collation = Collations.fromIndex(packet.readUInt16());\n    this.columnLength = packet.readUInt32();\n    this.columnType = packet.readUInt8();\n    this.flags = packet.readUInt16();\n    this.scale = packet.readUInt8();\n    this.type = FieldType.TYPES[this.columnType];\n  }\n\n  _createClass(ColumnDef, [{\n    key: \"db\",\n    value: function db() {\n      return this._parse.packet.readString(this._parse.dbOffset, this._parse.dbLength);\n    }\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      return this._parse.packet.readString(this._parse.dbOffset, this._parse.dbLength);\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      return this._parse.packet.readString(this._parse.tableOffset, this._parse.tableLength);\n    }\n  }, {\n    key: \"orgTable\",\n    value: function orgTable() {\n      return this._parse.packet.readString(this._parse.orgTableOffset, this._parse.orgTableLength);\n    }\n  }, {\n    key: \"name\",\n    value: function name() {\n      return this._parse.packet.readString(this._parse.nameOffset, this._parse.nameLength);\n    }\n  }, {\n    key: \"orgName\",\n    value: function orgName() {\n      return this._parse.packet.readString(this._parse.orgNameOffset, this._parse.orgNameLength);\n    }\n  }]);\n\n  return ColumnDef;\n}();\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */\n\n\nvar StringParser = function StringParser(packet) {\n  _classCallCheck(this, StringParser);\n\n  packet.skip(4); // skip 'def'\n\n  this.dbLength = packet.readUnsignedLength();\n  this.dbOffset = packet.pos;\n  packet.skip(this.dbLength);\n  this.tableLength = packet.readUnsignedLength();\n  this.tableOffset = packet.pos;\n  packet.skip(this.tableLength);\n  this.orgTableLength = packet.readUnsignedLength();\n  this.orgTableOffset = packet.pos;\n  packet.skip(this.orgTableLength);\n  this.nameLength = packet.readUnsignedLength();\n  this.nameOffset = packet.pos;\n  packet.skip(this.nameLength);\n  this.orgNameLength = packet.readUnsignedLength();\n  this.orgNameOffset = packet.pos;\n  packet.skip(this.orgNameLength + 1);\n  this.packet = packet;\n};\n\nmodule.exports.parseColumn = function (packet) {\n  var stringParser = new StringParser(packet);\n  return new ColumnDef(packet, stringParser);\n};","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/column-definition.js"],"names":["Collations","require","FieldType","ColumnDef","packet","stringParser","_parse","collation","fromIndex","readUInt16","columnLength","readUInt32","columnType","readUInt8","flags","scale","type","TYPES","readString","dbOffset","dbLength","tableOffset","tableLength","orgTableOffset","orgTableLength","nameOffset","nameLength","orgNameOffset","orgNameLength","StringParser","skip","readUnsignedLength","pos","module","exports","parseColumn"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Collations = require('../const/collations.js');\nconst FieldType = require('../const/field-type');\n\n/**\n * Column definition\n * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n */\nclass ColumnDef {\n  constructor(packet, stringParser) {\n    this._parse = stringParser;\n    this.collation = Collations.fromIndex(packet.readUInt16());\n    this.columnLength = packet.readUInt32();\n    this.columnType = packet.readUInt8();\n    this.flags = packet.readUInt16();\n    this.scale = packet.readUInt8();\n    this.type = FieldType.TYPES[this.columnType];\n  }\n\n  db() {\n    return this._parse.packet.readString(this._parse.dbOffset, this._parse.dbLength);\n  }\n\n  schema() {\n    return this._parse.packet.readString(this._parse.dbOffset, this._parse.dbLength);\n  }\n\n  table() {\n    return this._parse.packet.readString(this._parse.tableOffset, this._parse.tableLength);\n  }\n\n  orgTable() {\n    return this._parse.packet.readString(this._parse.orgTableOffset, this._parse.orgTableLength);\n  }\n\n  name() {\n    return this._parse.packet.readString(this._parse.nameOffset, this._parse.nameLength);\n  }\n\n  orgName() {\n    return this._parse.packet.readString(this._parse.orgNameOffset, this._parse.orgNameLength);\n  }\n}\n\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */\nclass StringParser {\n  constructor(packet) {\n    packet.skip(4); // skip 'def'\n\n    this.dbLength = packet.readUnsignedLength();\n    this.dbOffset = packet.pos;\n    packet.skip(this.dbLength);\n\n    this.tableLength = packet.readUnsignedLength();\n    this.tableOffset = packet.pos;\n    packet.skip(this.tableLength);\n\n    this.orgTableLength = packet.readUnsignedLength();\n    this.orgTableOffset = packet.pos;\n    packet.skip(this.orgTableLength);\n\n    this.nameLength = packet.readUnsignedLength();\n    this.nameOffset = packet.pos;\n    packet.skip(this.nameLength);\n\n    this.orgNameLength = packet.readUnsignedLength();\n    this.orgNameOffset = packet.pos;\n    packet.skip(this.orgNameLength + 1);\n    this.packet = packet;\n  }\n}\n\nmodule.exports.parseColumn = function(packet) {\n  const stringParser = new StringParser(packet);\n  return new ColumnDef(packet, stringParser);\n};\n"]},"metadata":{},"sourceType":"script"}