{"ast":null,"code":"var Errors = require('../misc/errors');\n\nvar State = {\n  Normal: 1\n  /* inside  query */\n  ,\n  String: 2\n  /* inside string */\n  ,\n  SlashStarComment: 3\n  /* inside slash-star comment */\n  ,\n  Escape: 4\n  /* found backslash */\n  ,\n  EOLComment: 5\n  /* # comment, or // comment, or -- comment */\n  ,\n  Backtick: 6\n  /* found backtick */\n  ,\n  Placeholder: 7\n  /* found placeholder */\n\n};\n/**\n * Split query according to parameters (question mark).\n * Question mark in comment are not taken in account\n *\n * @returns {Array} query separated by parameters\n */\n\nmodule.exports.splitQuery = function (sql) {\n  var partList = [];\n  var state = State.Normal;\n  var lastChar = '\\0';\n  var singleQuotes = false;\n  var lastParameterPosition = 0;\n  var idx = 0;\n  var car = sql.charAt(idx++);\n\n  while (car !== '') {\n    if (state === State.Escape && !(car === \"'\" && singleQuotes || car === '\"' && !singleQuotes)) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') state = State.SlashStarComment;\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') state = State.Normal;\n        break;\n\n      case '#':\n        if (state === State.Normal) state = State.EOLComment;\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case '\\\\':\n        if (state === State.String) state = State.Escape;\n        break;\n\n      case '?':\n        if (state === State.Normal) {\n          partList.push(sql.substring(lastParameterPosition, idx - 1));\n          lastParameterPosition = idx;\n        }\n\n        break;\n\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n\n        break;\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (lastParameterPosition === 0) {\n    partList.push(sql);\n  } else {\n    partList.push(sql.substring(lastParameterPosition));\n  }\n\n  return partList;\n};\n/**\n * Split query according to parameters using placeholder.\n *\n * @param sql             sql with placeholders\n * @param info            connection information\n * @param initialValues   placeholder object\n * @param displaySql      display sql function\n * @returns {{parts: Array, values: Array}}\n */\n\n\nmodule.exports.splitQueryPlaceholder = function (sql, info, initialValues, displaySql) {\n  var partList = [];\n  var values = [];\n  var state = State.Normal;\n  var lastChar = '\\0';\n  var singleQuotes = false;\n  var lastParameterPosition = 0;\n  var idx = 0;\n  var car = sql.charAt(idx++);\n  var placeholderName;\n\n  while (car !== '') {\n    if (state === State.Escape && !(car === \"'\" && singleQuotes || car === '\"' && !singleQuotes)) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') state = State.SlashStarComment;\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') state = State.Normal;\n        break;\n\n      case '#':\n        if (state === State.Normal) state = State.EOLComment;\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n          singleQuotes = false;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case '\\\\':\n        if (state === State.String) state = State.Escape;\n        break;\n\n      case ':':\n        if (state === State.Normal) {\n          partList.push(sql.substring(lastParameterPosition, idx - 1));\n          placeholderName = '';\n\n          while ((car = sql.charAt(idx++)) !== '' && car >= '0' && car <= '9' || car >= 'A' && car <= 'Z' || car >= 'a' && car <= 'z' || car === '-' || car === '_') {\n            placeholderName += car;\n          }\n\n          idx--;\n          var val = initialValues[placeholderName];\n\n          if (val === undefined) {\n            throw Errors.createError(\"Placeholder '\" + placeholderName + \"' is not defined\\n\" + displaySql.call(), false, info, 'HY000', Errors.ER_PLACEHOLDER_UNDEFINED);\n          }\n\n          values.push(val);\n          lastParameterPosition = idx;\n        }\n\n        break;\n\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (lastParameterPosition === 0) {\n    partList.push(sql);\n  } else {\n    partList.push(sql.substring(lastParameterPosition));\n  }\n\n  return {\n    parts: partList,\n    values: values\n  };\n};\n/**\n * Split query according to parameters (question mark).\n *\n * The only rewritten queries follow these notation: INSERT [LOW_PRIORITY | DELAYED |\n * HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_list)] [(col,...)] {VALUES |\n * VALUE} (...) [ ON DUPLICATE KEY UPDATE col=expr [, col=expr] ... ] With expr without\n * parameter.\n *\n * Query with INSERT ... SELECT / containing LAST_INSERT_ID() will not be rewritten\n *\n * query parts will be split this way :\n * - pre-value part\n * - after value part\n * [- after parameter part] (after each parameter)\n * - ending part\n *\n * example : INSERT INTO MyTABLE VALUES (9, ?, 5, ?, 8) ON DUPLICATE KEY UPDATE col2=col2+10\n * will result in :\n * - pre-value       : \"INSERT INTO MyTABLE VALUES\"\n * - after value     : \" (9, \"\n * - after parameter : \", 5, \"\n * - after parameter : \", 8)\"\n * - ending          : \" ON DUPLICATE KEY UPDATE col2=col2+10\"\n *\n *\n * @returns {JSON} query separated by parameters\n */\n\n\nmodule.exports.splitRewritableQuery = function (sql) {\n  var reWritablePrepare = true;\n  var multipleQueriesPrepare = true;\n  var partList = [];\n  var lastChar = '\\0';\n  var lastParameterPosition = 0;\n  var preValuePart1 = null;\n  var preValuePart2 = null;\n  var postValuePart = null;\n  var singleQuotes = false;\n  var isInParenthesis = 0;\n  var isFirstChar = true;\n  var isInsert = false;\n  var semicolon = false;\n  var hasParam = false;\n  var state = State.Normal;\n  var idx = 0;\n  var car = sql.charAt(idx++);\n\n  while (car !== '') {\n    if (state === State.Escape && !(car === \"'\" && singleQuotes || car === '\"' && !singleQuotes)) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') {\n          state = State.SlashStarComment;\n        }\n\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '#':\n        if (state === State.Normal) {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case ';':\n        if (state === State.Normal) {\n          semicolon = true;\n          multipleQueriesPrepare = false;\n        }\n\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case '\\\\':\n        if (state === State.String) {\n          state = State.Escape;\n        }\n\n        break;\n\n      case '?':\n        if (state === State.Normal) {\n          hasParam = true;\n          var part = sql.substring(lastParameterPosition, idx - 1);\n          lastParameterPosition = idx;\n\n          if (preValuePart1 === null) {\n            preValuePart1 = part;\n            preValuePart2 = '';\n          } else if (preValuePart2 === null) {\n            preValuePart2 = part;\n          } else {\n            if (postValuePart) {\n              //having parameters after the last \")\" of value is not rewritable\n              reWritablePrepare = false;\n              partList.push(postValuePart + part);\n              postValuePart = null;\n            } else partList.push(part);\n          }\n        }\n\n        break;\n\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n\n        break;\n\n      case 's':\n      case 'S':\n        if (state === State.Normal && postValuePart === null && sql.length > idx + 5 && (sql.charAt(idx) === 'e' || sql.charAt(idx) === 'E') && (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') && (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') && (sql.charAt(idx + 3) === 'c' || sql.charAt(idx + 3) === 'C') && (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T')) {\n          //field/table name might contain 'select'\n          if (idx > 1 && sql.charAt(idx - 2) > ' ' && '();><=-+,'.indexOf(sql.charAt(idx - 2)) === -1) {\n            break;\n          }\n\n          if (sql.charAt(idx + 5) > ' ' && '();><=-+,'.indexOf(sql.charAt(idx + 5)) === -1) {\n            break;\n          } //SELECT queries, INSERT FROM SELECT not rewritable\n\n\n          reWritablePrepare = false;\n        }\n\n        break;\n\n      case 'v':\n      case 'V':\n        if (state === State.Normal && !preValuePart1 && (lastChar == ')' || lastChar <= ' ') && sql.length > idx + 6 && (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') && (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') && (sql.charAt(idx + 2) === 'u' || sql.charAt(idx + 2) === 'U') && (sql.charAt(idx + 3) === 'e' || sql.charAt(idx + 3) === 'E') && (sql.charAt(idx + 4) === 's' || sql.charAt(idx + 4) === 'S') && (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')) {\n          idx += 5;\n          preValuePart1 = sql.substring(lastParameterPosition, idx);\n          lastParameterPosition = idx;\n        }\n\n        break;\n\n      case 'l':\n      case 'L':\n        if (state === State.Normal && sql.length > idx + 13 && (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') && (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') && (sql.charAt(idx + 2) === 't' || sql.charAt(idx + 2) === 'T') && sql.charAt(idx + 3) === '_' && (sql.charAt(idx + 4) === 'i' || sql.charAt(idx + 4) === 'I') && (sql.charAt(idx + 5) === 'n' || sql.charAt(idx + 5) === 'N') && (sql.charAt(idx + 6) === 's' || sql.charAt(idx + 6) === 'S') && (sql.charAt(idx + 7) === 'e' || sql.charAt(idx + 7) === 'E') && (sql.charAt(idx + 8) === 'r' || sql.charAt(idx + 8) === 'R') && (sql.charAt(idx + 9) === 't' || sql.charAt(idx + 9) === 'T') && sql.charAt(idx + 10) === '_' && (sql.charAt(idx + 11) === 'i' || sql.charAt(idx + 11) === 'I') && (sql.charAt(idx + 12) === 'd' || sql.charAt(idx + 12) === 'D') && sql.charAt(idx + 13) === '(') {\n          reWritablePrepare = false;\n          idx += 13;\n        }\n\n        break;\n\n      case '(':\n        if (state === State.Normal) {\n          isInParenthesis++;\n        }\n\n        break;\n\n      case ')':\n        if (state === State.Normal) {\n          isInParenthesis--;\n\n          if (isInParenthesis === 0 && preValuePart2 !== null && postValuePart === null) {\n            postValuePart = sql.substring(lastParameterPosition, idx);\n            lastParameterPosition = idx;\n          }\n        }\n\n        break;\n\n      default:\n        if (state === State.Normal && isFirstChar && car > ' ') {\n          if ((car === 'I' || car === 'i') && sql.length > idx + 6 && (sql.charAt(idx) === 'n' || sql.charAt(idx) === 'N') && (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') && (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') && (sql.charAt(idx + 3) === 'r' || sql.charAt(idx + 3) === 'R') && (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T') && (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')) {\n            isInsert = true;\n          }\n\n          isFirstChar = false;\n        } //multiple queries\n\n\n        if (state === State.Normal && semicolon && car >= ' ') {\n          reWritablePrepare = false;\n          multipleQueriesPrepare = true;\n        }\n\n        break;\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (state === State.EOLComment) multipleQueriesPrepare = false;\n\n  if (!hasParam) {\n    //permit to have rewrite without parameter\n    if (preValuePart1 === null) {\n      partList.unshift('');\n      partList.unshift(sql);\n    } else {\n      partList.unshift(sql.substring(lastParameterPosition, idx));\n      partList.unshift(preValuePart1);\n    }\n\n    lastParameterPosition = idx;\n  } else {\n    partList.unshift(preValuePart2 !== null ? preValuePart2 : '');\n    partList.unshift(preValuePart1 !== null ? preValuePart1 : '');\n  }\n\n  if (!isInsert) {\n    reWritablePrepare = false;\n  } //postValuePart is the value after the last parameter and parenthesis\n  //if no param, don't add to the list.\n\n\n  if (hasParam) {\n    partList.push(postValuePart !== null ? postValuePart : '');\n  }\n\n  partList.push(sql.substring(lastParameterPosition, idx));\n  return {\n    partList: partList,\n    reWritable: reWritablePrepare,\n    multipleQueries: multipleQueriesPrepare\n  };\n};\n\nmodule.exports.searchPlaceholder = function (sql, info, initialValues, displaySql) {\n  var sqlPlaceHolder = '';\n  var rowNumber = initialValues.length;\n  var values = new Array(rowNumber);\n\n  for (var i = 0; i < rowNumber; i++) {\n    values[i] = [];\n  }\n\n  var state = State.Normal;\n  var lastChar = '\\0';\n  var singleQuotes = false;\n  var lastParameterPosition = 0;\n  var idx = 0;\n  var car = sql.charAt(idx++);\n  var placeholderName;\n\n  while (car !== '') {\n    if (state === State.Escape && !(car === \"'\" && singleQuotes || car === '\"' && !singleQuotes)) {\n      state = State.String;\n      lastChar = car;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') state = State.SlashStarComment;\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') state = State.Normal;\n        break;\n\n      case '#':\n        if (state === State.Normal) state = State.EOLComment;\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n          singleQuotes = false;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case '\\\\':\n        if (state === State.String) state = State.Escape;\n        break;\n\n      case ':':\n        if (state === State.Normal) {\n          sqlPlaceHolder += sql.substring(lastParameterPosition, idx - 1) + '?';\n          placeholderName = '';\n\n          while ((car = sql.charAt(idx++)) !== '' && car >= '0' && car <= '9' || car >= 'A' && car <= 'Z' || car >= 'a' && car <= 'z' || car === '-' || car === '_') {\n            placeholderName += car;\n          }\n\n          idx--;\n\n          for (var _i = 0; _i < rowNumber; _i++) {\n            var val = initialValues[_i][placeholderName];\n\n            if (val !== undefined) {\n              values[_i].push(val);\n            } else {\n              values[_i].push(null);\n            }\n          }\n\n          lastParameterPosition = idx;\n        }\n\n        break;\n\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (lastParameterPosition === 0) {\n    sqlPlaceHolder = sql;\n  } else {\n    sqlPlaceHolder += sql.substring(lastParameterPosition);\n  }\n\n  return {\n    sql: sqlPlaceHolder,\n    values: values\n  };\n};\n/**\n * Split query according to named parameters.\n *\n * The only rewritten queries follow these notation: INSERT [LOW_PRIORITY | DELAYED |\n * HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_list)] [(col,...)] {VALUES |\n * VALUE} (...) [ ON DUPLICATE KEY UPDATE col=expr [, col=expr] ... ] With expr without\n * parameter.\n *\n * Query with INSERT ... SELECT / containing LAST_INSERT_ID() will not be rewritten\n *\n * query parts will be split this way :\n * - pre-value part\n * - after value part\n * [- after parameter part] (after each parameter)\n * - ending part\n *\n * example : INSERT INTO MyTABLE VALUES (9, :param1, 5, :param2, 8) ON DUPLICATE KEY UPDATE col2=col2+10\n * will result in :\n * - pre-value       : \"INSERT INTO MyTABLE VALUES\"\n * - after value     : \" (9, \"\n * - after parameter : \", 5, \"\n * - after parameter : \", 8)\"\n * - ending          : \" ON DUPLICATE KEY UPDATE col2=col2+10\"\n *\n *\n * @returns {JSON} query separated by parameters\n */\n\n\nmodule.exports.splitRewritableNamedParameterQuery = function (sql, initialValues) {\n  var reWritablePrepare = true;\n  var multipleQueriesPrepare = true;\n  var partList = [];\n  var values = new Array(initialValues.length);\n\n  for (var i = 0; i < values.length; i++) {\n    values[i] = [];\n  }\n\n  var lastChar = '\\0';\n  var lastParameterPosition = 0;\n  var preValuePart1 = null;\n  var preValuePart2 = null;\n  var postValuePart = null;\n  var singleQuotes = false;\n  var isInParenthesis = 0;\n  var isFirstChar = true;\n  var isInsert = false;\n  var semicolon = false;\n  var hasParam = false;\n  var placeholderName;\n  var state = State.Normal;\n  var idx = 0;\n  var car = sql.charAt(idx++);\n\n  while (car !== '') {\n    if (state === State.Escape && !(car === \"'\" && singleQuotes || car === '\"' && !singleQuotes)) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') {\n          state = State.SlashStarComment;\n        }\n\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '#':\n        if (state === State.Normal) {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case ';':\n        if (state === State.Normal) {\n          semicolon = true;\n          multipleQueriesPrepare = false;\n        }\n\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n\n        break;\n\n      case '\\\\':\n        if (state === State.String) {\n          state = State.Escape;\n        }\n\n        break;\n\n      case ':':\n        if (state === State.Normal) {\n          var part = sql.substring(lastParameterPosition, idx - 1);\n          placeholderName = '';\n\n          while ((car = sql.charAt(idx++)) !== '' && car >= '0' && car <= '9' || car >= 'A' && car <= 'Z' || car >= 'a' && car <= 'z' || car === '-' || car === '_') {\n            placeholderName += car;\n          }\n\n          idx--;\n          hasParam = true;\n          initialValues.forEach(function (row, idx) {\n            if (row[placeholderName] !== undefined) {\n              values[idx].push(row[placeholderName]);\n            } else {\n              values[idx].push(null);\n            }\n          });\n          lastParameterPosition = idx;\n\n          if (preValuePart1 === null) {\n            preValuePart1 = part;\n            preValuePart2 = '';\n          } else if (preValuePart2 === null) {\n            preValuePart2 = part;\n          } else {\n            if (postValuePart) {\n              //having parameters after the last \")\" of value is not rewritable\n              reWritablePrepare = false;\n              partList.push(postValuePart + part);\n              postValuePart = null;\n            } else partList.push(part);\n          }\n        }\n\n        break;\n\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n\n        break;\n\n      case 's':\n      case 'S':\n        if (state === State.Normal && postValuePart === null && sql.length > idx + 5 && (sql.charAt(idx) === 'e' || sql.charAt(idx) === 'E') && (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') && (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') && (sql.charAt(idx + 3) === 'c' || sql.charAt(idx + 3) === 'C') && (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T')) {\n          //field/table name might contain 'select'\n          if (idx > 1 && sql.charAt(idx - 2) > ' ' && '();><=-+,'.indexOf(sql.charAt(idx - 2)) === -1) {\n            break;\n          }\n\n          if (sql.charAt(idx + 5) > ' ' && '();><=-+,'.indexOf(sql.charAt(idx + 5)) === -1) {\n            break;\n          } //SELECT queries, INSERT FROM SELECT not rewritable\n\n\n          reWritablePrepare = false;\n        }\n\n        break;\n\n      case 'v':\n      case 'V':\n        if (state === State.Normal && !preValuePart1 && (lastChar == ')' || lastChar <= ' ') && sql.length > idx + 6 && (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') && (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') && (sql.charAt(idx + 2) === 'u' || sql.charAt(idx + 2) === 'U') && (sql.charAt(idx + 3) === 'e' || sql.charAt(idx + 3) === 'E') && (sql.charAt(idx + 4) === 's' || sql.charAt(idx + 4) === 'S') && (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')) {\n          idx += 5;\n          preValuePart1 = sql.substring(lastParameterPosition, idx);\n          lastParameterPosition = idx;\n        }\n\n        break;\n\n      case 'l':\n      case 'L':\n        if (state === State.Normal && sql.length > idx + 13 && (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') && (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') && (sql.charAt(idx + 2) === 't' || sql.charAt(idx + 2) === 'T') && sql.charAt(idx + 3) === '_' && (sql.charAt(idx + 4) === 'i' || sql.charAt(idx + 4) === 'I') && (sql.charAt(idx + 5) === 'n' || sql.charAt(idx + 5) === 'N') && (sql.charAt(idx + 6) === 's' || sql.charAt(idx + 6) === 'S') && (sql.charAt(idx + 7) === 'e' || sql.charAt(idx + 7) === 'E') && (sql.charAt(idx + 8) === 'r' || sql.charAt(idx + 8) === 'R') && (sql.charAt(idx + 9) === 't' || sql.charAt(idx + 9) === 'T') && sql.charAt(idx + 10) === '_' && (sql.charAt(idx + 11) === 'i' || sql.charAt(idx + 11) === 'I') && (sql.charAt(idx + 12) === 'd' || sql.charAt(idx + 12) === 'D') && sql.charAt(idx + 13) === '(') {\n          reWritablePrepare = false;\n          idx += 13;\n        }\n\n        break;\n\n      case '(':\n        if (state === State.Normal) {\n          isInParenthesis++;\n        }\n\n        break;\n\n      case ')':\n        if (state === State.Normal) {\n          isInParenthesis--;\n\n          if (isInParenthesis === 0 && preValuePart2 !== null && postValuePart === null) {\n            postValuePart = sql.substring(lastParameterPosition, idx);\n            lastParameterPosition = idx;\n          }\n        }\n\n        break;\n\n      default:\n        if (state === State.Normal && isFirstChar && car > ' ') {\n          if ((car === 'I' || car === 'i') && sql.length > idx + 6 && (sql.charAt(idx) === 'n' || sql.charAt(idx) === 'N') && (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') && (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') && (sql.charAt(idx + 3) === 'r' || sql.charAt(idx + 3) === 'R') && (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T') && (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')) {\n            isInsert = true;\n          }\n\n          isFirstChar = false;\n        } //multiple queries\n\n\n        if (state === State.Normal && semicolon && car >= ' ') {\n          reWritablePrepare = false;\n          multipleQueriesPrepare = true;\n        }\n\n        break;\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (state === State.EOLComment) multipleQueriesPrepare = false;\n\n  if (!hasParam) {\n    //permit to have rewrite without parameter\n    if (preValuePart1 === null) {\n      partList.unshift('');\n      partList.unshift(sql);\n    } else {\n      partList.unshift(sql.substring(lastParameterPosition, idx));\n      partList.unshift(preValuePart1);\n    }\n\n    lastParameterPosition = idx;\n  } else {\n    partList.unshift(preValuePart2 !== null ? preValuePart2 : '');\n    partList.unshift(preValuePart1 !== null ? preValuePart1 : '');\n  }\n\n  if (!isInsert) {\n    reWritablePrepare = false;\n  } //postValuePart is the value after the last parameter and parenthesis\n  //if no param, don't add to the list.\n\n\n  if (hasParam) {\n    partList.push(postValuePart !== null ? postValuePart : '');\n  }\n\n  partList.push(sql.substring(lastParameterPosition, idx));\n  return {\n    partList: partList,\n    reWritable: reWritablePrepare,\n    multipleQueries: multipleQueriesPrepare,\n    values: values\n  };\n};\n/**\n * Ensure that filename requested by server corresponds to query\n * protocol : https://mariadb.com/kb/en/library/local_infile-packet/\n *\n * @param sql         query\n * @param parameters  parameters if any\n * @param fileName    server requested file\n * @returns {boolean} is filename corresponding to query\n */\n\n\nmodule.exports.validateFileName = function (sql, parameters, fileName) {\n  var queryValidator = new RegExp(\"^(\\\\s*\\\\/\\\\*([^\\\\*]|\\\\*[^\\\\/])*\\\\*\\\\/)*\\\\s*LOAD\\\\s+DATA\\\\s+((LOW_PRIORITY|CONCURRENT)\\\\s+)?LOCAL\\\\s+INFILE\\\\s+'\" + fileName + \"'\", 'i');\n  if (queryValidator.test(sql)) return true;\n\n  if (parameters != null) {\n    queryValidator = new RegExp('^(\\\\s*\\\\/\\\\*([^\\\\*]|\\\\*[^\\\\/])*\\\\*\\\\/)*\\\\s*LOAD\\\\s+DATA\\\\s+((LOW_PRIORITY|CONCURRENT)\\\\s+)?LOCAL\\\\s+INFILE\\\\s+\\\\?', 'i');\n\n    if (queryValidator.test(sql) && parameters.length > 0) {\n      return parameters[0].toLowerCase() === fileName.toLowerCase();\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/misc/parse.js"],"names":["Errors","require","State","Normal","String","SlashStarComment","Escape","EOLComment","Backtick","Placeholder","module","exports","splitQuery","sql","partList","state","lastChar","singleQuotes","lastParameterPosition","idx","car","charAt","push","substring","splitQueryPlaceholder","info","initialValues","displaySql","values","placeholderName","val","undefined","createError","call","ER_PLACEHOLDER_UNDEFINED","parts","splitRewritableQuery","reWritablePrepare","multipleQueriesPrepare","preValuePart1","preValuePart2","postValuePart","isInParenthesis","isFirstChar","isInsert","semicolon","hasParam","part","length","indexOf","unshift","reWritable","multipleQueries","searchPlaceholder","sqlPlaceHolder","rowNumber","Array","i","splitRewritableNamedParameterQuery","forEach","row","validateFileName","parameters","fileName","queryValidator","RegExp","test","toLowerCase"],"mappings":"AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AAAE;AADE;AAEZC,EAAAA,MAAM,EAAE;AAAE;AAFE;AAGZC,EAAAA,gBAAgB,EAAE;AAAE;AAHR;AAIZC,EAAAA,MAAM,EAAE;AAAE;AAJE;AAKZC,EAAAA,UAAU,EAAE;AAAE;AALF;AAMZC,EAAAA,QAAQ,EAAE;AAAE;AANA;AAOZC,EAAAA,WAAW,EAAE;AAAE;;AAPH,CAAd;AAUA;;;;;;;AAMAC,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,UAASC,GAAT,EAAc;AACxC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAGb,KAAK,CAACC,MAAlB;AACA,MAAIa,QAAQ,GAAG,IAAf;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAV;;AAEA,SAAOC,GAAG,KAAK,EAAf,EAAmB;AACjB,QACEL,KAAK,KAAKb,KAAK,CAACI,MAAhB,IACA,EAAGc,GAAG,KAAK,GAAR,IAAeH,YAAhB,IAAkCG,GAAG,KAAK,GAAR,IAAe,CAACH,YAApD,CAFF,EAGE;AACAF,MAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAgB,MAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACA;AACD;;AAED,YAAQC,GAAR;AACE,WAAK,GAAL;AACE,YAAIL,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+CD,KAAK,GAAGb,KAAK,CAACG,gBAAd;AAC/C;;AAEF,WAAK,GAAL;AACE,YAAIU,KAAK,KAAKb,KAAK,CAACG,gBAAhB,IAAoCW,QAAQ,IAAI,GAApD,EAAyDD,KAAK,GAAGb,KAAK,CAACC,MAAd;AACzD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4BY,KAAK,GAAGb,KAAK,CAACK,UAAd;AAC5B;;AAEF,WAAK,GAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC;AAC9BQ,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,KAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0B,CAACa,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0B,CAACW,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,IAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0Ba,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0BW,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACE,MAApB,EAA4BW,KAAK,GAAGb,KAAK,CAACI,MAAd;AAC5B;;AAEF,WAAK,GAAL;AACE,YAAIS,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BW,UAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAAG,GAAG,CAA3C,CAAd;AACAD,UAAAA,qBAAqB,GAAGC,GAAxB;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACM,QAApB,EAA8B;AAC5BO,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFD,MAEO,IAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AACjCY,UAAAA,KAAK,GAAGb,KAAK,CAACM,QAAd;AACD;;AACD;AA/DJ;;AAiEAQ,IAAAA,QAAQ,GAAGI,GAAX;AAEAA,IAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACD;;AACD,MAAID,qBAAqB,KAAK,CAA9B,EAAiC;AAC/BJ,IAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAd;AACD,GAFD,MAEO;AACLC,IAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,CAACU,SAAJ,CAAcL,qBAAd,CAAd;AACD;;AAED,SAAOJ,QAAP;AACD,CA/FD;AAiGA;;;;;;;;;;;AASAJ,MAAM,CAACC,OAAP,CAAea,qBAAf,GAAuC,UAASX,GAAT,EAAcY,IAAd,EAAoBC,aAApB,EAAmCC,UAAnC,EAA+C;AACpF,MAAIb,QAAQ,GAAG,EAAf;AACA,MAAIc,MAAM,GAAG,EAAb;AACA,MAAIb,KAAK,GAAGb,KAAK,CAACC,MAAlB;AACA,MAAIa,QAAQ,GAAG,IAAf;AAEA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AAEA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAV;AACA,MAAIU,eAAJ;;AAEA,SAAOT,GAAG,KAAK,EAAf,EAAmB;AACjB,QACEL,KAAK,KAAKb,KAAK,CAACI,MAAhB,IACA,EAAGc,GAAG,KAAK,GAAR,IAAeH,YAAhB,IAAkCG,GAAG,KAAK,GAAR,IAAe,CAACH,YAApD,CAFF,EAGE;AACAF,MAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAgB,MAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACA;AACD;;AAED,YAAQC,GAAR;AACE,WAAK,GAAL;AACE,YAAIL,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+CD,KAAK,GAAGb,KAAK,CAACG,gBAAd;AAC/C;;AAEF,WAAK,GAAL;AACE,YAAIU,KAAK,KAAKb,KAAK,CAACG,gBAAhB,IAAoCW,QAAQ,IAAI,GAApD,EAAyDD,KAAK,GAAGb,KAAK,CAACC,MAAd;AACzD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4BY,KAAK,GAAGb,KAAK,CAACK,UAAd;AAC5B;;AAEF,WAAK,GAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC;AAC9BQ,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,KAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0B,CAACa,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0B,CAACW,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,IAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0Ba,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACAc,UAAAA,YAAY,GAAG,KAAf;AACD,SAHM,MAGA,IAAIF,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0BW,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACE,MAApB,EAA4BW,KAAK,GAAGb,KAAK,CAACI,MAAd;AAC5B;;AAEF,WAAK,GAAL;AACE,YAAIS,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BW,UAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAAG,GAAG,CAA3C,CAAd;AACAU,UAAAA,eAAe,GAAG,EAAlB;;AACA,iBACG,CAACT,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAP,MAA8B,EAA9B,IAAoCC,GAAG,IAAI,GAA3C,IAAkDA,GAAG,IAAI,GAA1D,IACCA,GAAG,IAAI,GAAP,IAAcA,GAAG,IAAI,GADtB,IAECA,GAAG,IAAI,GAAP,IAAcA,GAAG,IAAI,GAFtB,IAGAA,GAAG,KAAK,GAHR,IAIAA,GAAG,KAAK,GALV,EAME;AACAS,YAAAA,eAAe,IAAIT,GAAnB;AACD;;AACDD,UAAAA,GAAG;AACH,cAAMW,GAAG,GAAGJ,aAAa,CAACG,eAAD,CAAzB;;AACA,cAAIC,GAAG,KAAKC,SAAZ,EAAuB;AACrB,kBAAM/B,MAAM,CAACgC,WAAP,CACJ,kBAAkBH,eAAlB,GAAoC,oBAApC,GAA2DF,UAAU,CAACM,IAAX,EADvD,EAEJ,KAFI,EAGJR,IAHI,EAIJ,OAJI,EAKJzB,MAAM,CAACkC,wBALH,CAAN;AAOD;;AACDN,UAAAA,MAAM,CAACN,IAAP,CAAYQ,GAAZ;AACAZ,UAAAA,qBAAqB,GAAGC,GAAxB;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACM,QAApB,EAA8B;AAC5BO,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFD,MAEO,IAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AACjCY,UAAAA,KAAK,GAAGb,KAAK,CAACM,QAAd;AACD;;AArFL;;AAuFAQ,IAAAA,QAAQ,GAAGI,GAAX;AAEAA,IAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACD;;AACD,MAAID,qBAAqB,KAAK,CAA9B,EAAiC;AAC/BJ,IAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAd;AACD,GAFD,MAEO;AACLC,IAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,CAACU,SAAJ,CAAcL,qBAAd,CAAd;AACD;;AAED,SAAO;AAAEiB,IAAAA,KAAK,EAAErB,QAAT;AAAmBc,IAAAA,MAAM,EAAEA;AAA3B,GAAP;AACD,CAzHD;AA2HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAlB,MAAM,CAACC,OAAP,CAAeyB,oBAAf,GAAsC,UAASvB,GAAT,EAAc;AAClD,MAAIwB,iBAAiB,GAAG,IAAxB;AACA,MAAIC,sBAAsB,GAAG,IAA7B;AACA,MAAIxB,QAAQ,GAAG,EAAf;AACA,MAAIE,QAAQ,GAAG,IAAf;AAEA,MAAIE,qBAAqB,GAAG,CAA5B;AAEA,MAAIqB,aAAa,GAAG,IAApB;AACA,MAAIC,aAAa,GAAG,IAApB;AACA,MAAIC,aAAa,GAAG,IAApB;AAEA,MAAIxB,YAAY,GAAG,KAAnB;AAEA,MAAIyB,eAAe,GAAG,CAAtB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAI/B,KAAK,GAAGb,KAAK,CAACC,MAAlB;AAEA,MAAIgB,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAV;;AACA,SAAOC,GAAG,KAAK,EAAf,EAAmB;AACjB,QACEL,KAAK,KAAKb,KAAK,CAACI,MAAhB,IACA,EAAGc,GAAG,KAAK,GAAR,IAAeH,YAAhB,IAAkCG,GAAG,KAAK,GAAR,IAAe,CAACH,YAApD,CAFF,EAGE;AACAF,MAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAgB,MAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACA;AACD;;AAED,YAAQC,GAAR;AACE,WAAK,GAAL;AACE,YAAIL,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACG,gBAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIU,KAAK,KAAKb,KAAK,CAACG,gBAAhB,IAAoCW,QAAQ,IAAI,GAApD,EAAyD;AACvDD,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC;AAC9BQ,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,KAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0B,CAACa,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0B,CAACW,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1B0C,UAAAA,SAAS,GAAG,IAAZ;AACAP,UAAAA,sBAAsB,GAAG,KAAzB;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIvB,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,IAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0Ba,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0BW,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACE,MAApB,EAA4B;AAC1BW,UAAAA,KAAK,GAAGb,KAAK,CAACI,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIS,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1B2C,UAAAA,QAAQ,GAAG,IAAX;AACA,cAAIC,IAAI,GAAGlC,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAAG,GAAG,CAA3C,CAAX;AACAD,UAAAA,qBAAqB,GAAGC,GAAxB;;AAEA,cAAIoB,aAAa,KAAK,IAAtB,EAA4B;AAC1BA,YAAAA,aAAa,GAAGQ,IAAhB;AACAP,YAAAA,aAAa,GAAG,EAAhB;AACD,WAHD,MAGO,IAAIA,aAAa,KAAK,IAAtB,EAA4B;AACjCA,YAAAA,aAAa,GAAGO,IAAhB;AACD,WAFM,MAEA;AACL,gBAAIN,aAAJ,EAAmB;AACjB;AACAJ,cAAAA,iBAAiB,GAAG,KAApB;AACAvB,cAAAA,QAAQ,CAACQ,IAAT,CAAcmB,aAAa,GAAGM,IAA9B;AACAN,cAAAA,aAAa,GAAG,IAAhB;AACD,aALD,MAKO3B,QAAQ,CAACQ,IAAT,CAAcyB,IAAd;AACR;AACF;;AACD;;AACF,WAAK,GAAL;AACE,YAAIhC,KAAK,KAAKb,KAAK,CAACM,QAApB,EAA8B;AAC5BO,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFD,MAEO,IAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AACjCY,UAAAA,KAAK,GAAGb,KAAK,CAACM,QAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YACEO,KAAK,KAAKb,KAAK,CAACC,MAAhB,IACAsC,aAAa,KAAK,IADlB,IAEA5B,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,CAFnB,KAGCN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAHhD,MAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAJxD,MAKCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxD,MAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAPxD,CADF,EASE;AACA;AACA,cACEA,GAAG,GAAG,CAAN,IACAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,IAAsB,GADtB,IAEA,YAAY8B,OAAZ,CAAoBpC,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,CAApB,MAA6C,CAAC,CAHhD,EAIE;AACA;AACD;;AACD,cAAIN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,IAAsB,GAAtB,IAA6B,YAAY8B,OAAZ,CAAoBpC,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,CAApB,MAA6C,CAAC,CAA/E,EAAkF;AAChF;AACD,WAXD,CAaA;;;AACAkB,UAAAA,iBAAiB,GAAG,KAApB;AACD;;AACD;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YACEtB,KAAK,KAAKb,KAAK,CAACC,MAAhB,IACA,CAACoC,aADD,KAECvB,QAAQ,IAAI,GAAZ,IAAmBA,QAAQ,IAAI,GAFhC,KAGAH,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,CAHnB,KAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAJhD,MAKCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxD,MAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAPxD,MAQCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GARxD,MASCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,KAAuB,GATvD,CADF,EAWE;AACAA,UAAAA,GAAG,IAAI,CAAP;AACAoB,UAAAA,aAAa,GAAG1B,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAhB;AACAD,UAAAA,qBAAqB,GAAGC,GAAxB;AACD;;AACD;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YACEJ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IACAU,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,EADnB,KAECN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAFhD,MAGCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAHxD,MAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAJxD,KAKAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxB,KAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAPxD,MAQCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GARxD,MASCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GATxD,MAUCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAVxD,MAWCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAXxD,KAYAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAZzB,KAaCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAAzB,IAAgCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAb1D,MAcCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAAzB,IAAgCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAd1D,KAeAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAhB3B,EAiBE;AACAkB,UAAAA,iBAAiB,GAAG,KAApB;AACAlB,UAAAA,GAAG,IAAI,EAAP;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BuC,UAAAA,eAAe;AAChB;;AACD;;AACF,WAAK,GAAL;AACE,YAAI3B,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BuC,UAAAA,eAAe;;AACf,cAAIA,eAAe,KAAK,CAApB,IAAyBF,aAAa,KAAK,IAA3C,IAAmDC,aAAa,KAAK,IAAzE,EAA+E;AAC7EA,YAAAA,aAAa,GAAG5B,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAhB;AACAD,YAAAA,qBAAqB,GAAGC,GAAxB;AACD;AACF;;AACD;;AACF;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0BwC,WAA1B,IAAyCvB,GAAG,GAAG,GAAnD,EAAwD;AACtD,cACE,CAACA,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,GAAxB,KACAP,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,CADnB,KAECN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAFhD,MAGCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAHxD,MAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAJxD,MAKCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxD,MAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,KAAuB,GAPvD,CADF,EASE;AACAyB,YAAAA,QAAQ,GAAG,IAAX;AACD;;AACDD,UAAAA,WAAW,GAAG,KAAd;AACD,SAfH,CAgBE;;;AACA,YAAI5B,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0B0C,SAA1B,IAAuCzB,GAAG,IAAI,GAAlD,EAAuD;AACrDiB,UAAAA,iBAAiB,GAAG,KAApB;AACAC,UAAAA,sBAAsB,GAAG,IAAzB;AACD;;AACD;AAvMJ;;AA0MAtB,IAAAA,QAAQ,GAAGI,GAAX;AACAA,IAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACD;;AAED,MAAIJ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC+B,sBAAsB,GAAG,KAAzB;;AAEhC,MAAI,CAACQ,QAAL,EAAe;AACb;AACA,QAAIP,aAAa,KAAK,IAAtB,EAA4B;AAC1BzB,MAAAA,QAAQ,CAACoC,OAAT,CAAiB,EAAjB;AACApC,MAAAA,QAAQ,CAACoC,OAAT,CAAiBrC,GAAjB;AACD,KAHD,MAGO;AACLC,MAAAA,QAAQ,CAACoC,OAAT,CAAiBrC,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAjB;AACAL,MAAAA,QAAQ,CAACoC,OAAT,CAAiBX,aAAjB;AACD;;AACDrB,IAAAA,qBAAqB,GAAGC,GAAxB;AACD,GAVD,MAUO;AACLL,IAAAA,QAAQ,CAACoC,OAAT,CAAiBV,aAAa,KAAK,IAAlB,GAAyBA,aAAzB,GAAyC,EAA1D;AACA1B,IAAAA,QAAQ,CAACoC,OAAT,CAAiBX,aAAa,KAAK,IAAlB,GAAyBA,aAAzB,GAAyC,EAA1D;AACD;;AAED,MAAI,CAACK,QAAL,EAAe;AACbP,IAAAA,iBAAiB,GAAG,KAApB;AACD,GAlQiD,CAoQlD;AACA;;;AACA,MAAIS,QAAJ,EAAc;AACZhC,IAAAA,QAAQ,CAACQ,IAAT,CAAcmB,aAAa,KAAK,IAAlB,GAAyBA,aAAzB,GAAyC,EAAvD;AACD;;AACD3B,EAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAd;AAEA,SAAO;AACLL,IAAAA,QAAQ,EAAEA,QADL;AAELqC,IAAAA,UAAU,EAAEd,iBAFP;AAGLe,IAAAA,eAAe,EAAEd;AAHZ,GAAP;AAKD,CAhRD;;AAkRA5B,MAAM,CAACC,OAAP,CAAe0C,iBAAf,GAAmC,UAASxC,GAAT,EAAcY,IAAd,EAAoBC,aAApB,EAAmCC,UAAnC,EAA+C;AAChF,MAAI2B,cAAc,GAAG,EAArB;AACA,MAAMC,SAAS,GAAG7B,aAAa,CAACsB,MAAhC;AACA,MAAIpB,MAAM,GAAG,IAAI4B,KAAJ,CAAUD,SAAV,CAAb;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC;AAAoC7B,IAAAA,MAAM,CAAC6B,CAAD,CAAN,GAAY,EAAZ;AAApC;;AACA,MAAI1C,KAAK,GAAGb,KAAK,CAACC,MAAlB;AACA,MAAIa,QAAQ,GAAG,IAAf;AAEA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AAEA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAV;AACA,MAAIU,eAAJ;;AAEA,SAAOT,GAAG,KAAK,EAAf,EAAmB;AACjB,QACEL,KAAK,KAAKb,KAAK,CAACI,MAAhB,IACA,EAAGc,GAAG,KAAK,GAAR,IAAeH,YAAhB,IAAkCG,GAAG,KAAK,GAAR,IAAe,CAACH,YAApD,CAFF,EAGE;AACAF,MAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAY,MAAAA,QAAQ,GAAGI,GAAX;AACAA,MAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACA;AACD;;AAED,YAAQC,GAAR;AACE,WAAK,GAAL;AACE,YAAIL,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+CD,KAAK,GAAGb,KAAK,CAACG,gBAAd;AAC/C;;AAEF,WAAK,GAAL;AACE,YAAIU,KAAK,KAAKb,KAAK,CAACG,gBAAhB,IAAoCW,QAAQ,IAAI,GAApD,EAAyDD,KAAK,GAAGb,KAAK,CAACC,MAAd;AACzD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4BY,KAAK,GAAGb,KAAK,CAACK,UAAd;AAC5B;;AAEF,WAAK,GAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC;AAC9BQ,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,KAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0B,CAACa,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0B,CAACW,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,IAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0Ba,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACAc,UAAAA,YAAY,GAAG,KAAf;AACD,SAHM,MAGA,IAAIF,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0BW,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACE,MAApB,EAA4BW,KAAK,GAAGb,KAAK,CAACI,MAAd;AAC5B;;AAEF,WAAK,GAAL;AACE,YAAIS,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BmD,UAAAA,cAAc,IAAIzC,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAAG,GAAG,CAA3C,IAAgD,GAAlE;AACAU,UAAAA,eAAe,GAAG,EAAlB;;AACA,iBACG,CAACT,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAP,MAA8B,EAA9B,IAAoCC,GAAG,IAAI,GAA3C,IAAkDA,GAAG,IAAI,GAA1D,IACCA,GAAG,IAAI,GAAP,IAAcA,GAAG,IAAI,GADtB,IAECA,GAAG,IAAI,GAAP,IAAcA,GAAG,IAAI,GAFtB,IAGAA,GAAG,KAAK,GAHR,IAIAA,GAAG,KAAK,GALV,EAME;AACAS,YAAAA,eAAe,IAAIT,GAAnB;AACD;;AACDD,UAAAA,GAAG;;AACH,eAAK,IAAIsC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGF,SAApB,EAA+BE,EAAC,EAAhC,EAAoC;AAClC,gBAAM3B,GAAG,GAAGJ,aAAa,CAAC+B,EAAD,CAAb,CAAiB5B,eAAjB,CAAZ;;AACA,gBAAIC,GAAG,KAAKC,SAAZ,EAAuB;AACrBH,cAAAA,MAAM,CAAC6B,EAAD,CAAN,CAAUnC,IAAV,CAAeQ,GAAf;AACD,aAFD,MAEO;AACLF,cAAAA,MAAM,CAAC6B,EAAD,CAAN,CAAUnC,IAAV,CAAe,IAAf;AACD;AACF;;AACDJ,UAAAA,qBAAqB,GAAGC,GAAxB;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACM,QAApB,EAA8B;AAC5BO,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFD,MAEO,IAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AACjCY,UAAAA,KAAK,GAAGb,KAAK,CAACM,QAAd;AACD;;AAlFL;;AAoFAQ,IAAAA,QAAQ,GAAGI,GAAX;AAEAA,IAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACD;;AACD,MAAID,qBAAqB,KAAK,CAA9B,EAAiC;AAC/BoC,IAAAA,cAAc,GAAGzC,GAAjB;AACD,GAFD,MAEO;AACLyC,IAAAA,cAAc,IAAIzC,GAAG,CAACU,SAAJ,CAAcL,qBAAd,CAAlB;AACD;;AAED,SAAO;AAAEL,IAAAA,GAAG,EAAEyC,cAAP;AAAuB1B,IAAAA,MAAM,EAAEA;AAA/B,GAAP;AACD,CAzHD;AA2HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAlB,MAAM,CAACC,OAAP,CAAe+C,kCAAf,GAAoD,UAAS7C,GAAT,EAAca,aAAd,EAA6B;AAC/E,MAAIW,iBAAiB,GAAG,IAAxB;AACA,MAAIC,sBAAsB,GAAG,IAA7B;AACA,MAAIxB,QAAQ,GAAG,EAAf;AACA,MAAIc,MAAM,GAAG,IAAI4B,KAAJ,CAAU9B,aAAa,CAACsB,MAAxB,CAAb;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,MAAM,CAACoB,MAA3B,EAAmCS,CAAC,EAApC;AAAwC7B,IAAAA,MAAM,CAAC6B,CAAD,CAAN,GAAY,EAAZ;AAAxC;;AACA,MAAIzC,QAAQ,GAAG,IAAf;AAEA,MAAIE,qBAAqB,GAAG,CAA5B;AAEA,MAAIqB,aAAa,GAAG,IAApB;AACA,MAAIC,aAAa,GAAG,IAApB;AACA,MAAIC,aAAa,GAAG,IAApB;AAEA,MAAIxB,YAAY,GAAG,KAAnB;AAEA,MAAIyB,eAAe,GAAG,CAAtB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIjB,eAAJ;AACA,MAAId,KAAK,GAAGb,KAAK,CAACC,MAAlB;AAEA,MAAIgB,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAV;;AACA,SAAOC,GAAG,KAAK,EAAf,EAAmB;AACjB,QACEL,KAAK,KAAKb,KAAK,CAACI,MAAhB,IACA,EAAGc,GAAG,KAAK,GAAR,IAAeH,YAAhB,IAAkCG,GAAG,KAAK,GAAR,IAAe,CAACH,YAApD,CAFF,EAGE;AACAF,MAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAgB,MAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACA;AACD;;AAED,YAAQC,GAAR;AACE,WAAK,GAAL;AACE,YAAIL,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACG,gBAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIU,KAAK,KAAKb,KAAK,CAACG,gBAAhB,IAAoCW,QAAQ,IAAI,GAApD,EAAyD;AACvDD,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0Ba,QAAQ,IAAI,GAA1C,EAA+C;AAC7CD,UAAAA,KAAK,GAAGb,KAAK,CAACK,UAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIQ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC;AAC9BQ,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,KAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0B,CAACa,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0B,CAACW,YAA/B,EAA6C;AAClDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1B0C,UAAAA,SAAS,GAAG,IAAZ;AACAP,UAAAA,sBAAsB,GAAG,KAAzB;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIvB,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BY,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACAa,UAAAA,YAAY,GAAG,IAAf;AACD,SAHD,MAGO,IAAIF,KAAK,KAAKb,KAAK,CAACE,MAAhB,IAA0Ba,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFM,MAEA,IAAIY,KAAK,KAAKb,KAAK,CAACI,MAAhB,IAA0BW,YAA9B,EAA4C;AACjDF,UAAAA,KAAK,GAAGb,KAAK,CAACE,MAAd;AACD;;AACD;;AAEF,WAAK,IAAL;AACE,YAAIW,KAAK,KAAKb,KAAK,CAACE,MAApB,EAA4B;AAC1BW,UAAAA,KAAK,GAAGb,KAAK,CAACI,MAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIS,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1B,cAAI4C,IAAI,GAAGlC,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAAG,GAAG,CAA3C,CAAX;AACAU,UAAAA,eAAe,GAAG,EAAlB;;AACA,iBACG,CAACT,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAP,MAA8B,EAA9B,IAAoCC,GAAG,IAAI,GAA3C,IAAkDA,GAAG,IAAI,GAA1D,IACCA,GAAG,IAAI,GAAP,IAAcA,GAAG,IAAI,GADtB,IAECA,GAAG,IAAI,GAAP,IAAcA,GAAG,IAAI,GAFtB,IAGAA,GAAG,KAAK,GAHR,IAIAA,GAAG,KAAK,GALV,EAME;AACAS,YAAAA,eAAe,IAAIT,GAAnB;AACD;;AACDD,UAAAA,GAAG;AACH2B,UAAAA,QAAQ,GAAG,IAAX;AACApB,UAAAA,aAAa,CAACiC,OAAd,CAAsB,UAACC,GAAD,EAAMzC,GAAN,EAAc;AAClC,gBAAIyC,GAAG,CAAC/B,eAAD,CAAH,KAAyBE,SAA7B,EAAwC;AACtCH,cAAAA,MAAM,CAACT,GAAD,CAAN,CAAYG,IAAZ,CAAiBsC,GAAG,CAAC/B,eAAD,CAApB;AACD,aAFD,MAEO;AACLD,cAAAA,MAAM,CAACT,GAAD,CAAN,CAAYG,IAAZ,CAAiB,IAAjB;AACD;AACF,WAND;AAQAJ,UAAAA,qBAAqB,GAAGC,GAAxB;;AAEA,cAAIoB,aAAa,KAAK,IAAtB,EAA4B;AAC1BA,YAAAA,aAAa,GAAGQ,IAAhB;AACAP,YAAAA,aAAa,GAAG,EAAhB;AACD,WAHD,MAGO,IAAIA,aAAa,KAAK,IAAtB,EAA4B;AACjCA,YAAAA,aAAa,GAAGO,IAAhB;AACD,WAFM,MAEA;AACL,gBAAIN,aAAJ,EAAmB;AACjB;AACAJ,cAAAA,iBAAiB,GAAG,KAApB;AACAvB,cAAAA,QAAQ,CAACQ,IAAT,CAAcmB,aAAa,GAAGM,IAA9B;AACAN,cAAAA,aAAa,GAAG,IAAhB;AACD,aALD,MAKO3B,QAAQ,CAACQ,IAAT,CAAcyB,IAAd;AACR;AACF;;AACD;;AAEF,WAAK,GAAL;AACE,YAAIhC,KAAK,KAAKb,KAAK,CAACM,QAApB,EAA8B;AAC5BO,UAAAA,KAAK,GAAGb,KAAK,CAACC,MAAd;AACD,SAFD,MAEO,IAAIY,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AACjCY,UAAAA,KAAK,GAAGb,KAAK,CAACM,QAAd;AACD;;AACD;;AAEF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YACEO,KAAK,KAAKb,KAAK,CAACC,MAAhB,IACAsC,aAAa,KAAK,IADlB,IAEA5B,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,CAFnB,KAGCN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAHhD,MAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAJxD,MAKCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxD,MAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAPxD,CADF,EASE;AACA;AACA,cACEA,GAAG,GAAG,CAAN,IACAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,IAAsB,GADtB,IAEA,YAAY8B,OAAZ,CAAoBpC,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,CAApB,MAA6C,CAAC,CAHhD,EAIE;AACA;AACD;;AACD,cAAIN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,IAAsB,GAAtB,IAA6B,YAAY8B,OAAZ,CAAoBpC,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,CAApB,MAA6C,CAAC,CAA/E,EAAkF;AAChF;AACD,WAXD,CAaA;;;AACAkB,UAAAA,iBAAiB,GAAG,KAApB;AACD;;AACD;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YACEtB,KAAK,KAAKb,KAAK,CAACC,MAAhB,IACA,CAACoC,aADD,KAECvB,QAAQ,IAAI,GAAZ,IAAmBA,QAAQ,IAAI,GAFhC,KAGAH,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,CAHnB,KAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAJhD,MAKCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxD,MAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAPxD,MAQCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GARxD,MASCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,KAAuB,GATvD,CADF,EAWE;AACAA,UAAAA,GAAG,IAAI,CAAP;AACAoB,UAAAA,aAAa,GAAG1B,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAhB;AACAD,UAAAA,qBAAqB,GAAGC,GAAxB;AACD;;AACD;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,YACEJ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IACAU,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,EADnB,KAECN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAFhD,MAGCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAHxD,MAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAJxD,KAKAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxB,KAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAPxD,MAQCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GARxD,MASCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GATxD,MAUCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAVxD,MAWCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAXxD,KAYAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAZzB,KAaCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAAzB,IAAgCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAb1D,MAcCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAAzB,IAAgCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAd1D,KAeAN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,EAAjB,MAAyB,GAhB3B,EAiBE;AACAkB,UAAAA,iBAAiB,GAAG,KAApB;AACAlB,UAAAA,GAAG,IAAI,EAAP;AACD;;AACD;;AACF,WAAK,GAAL;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BuC,UAAAA,eAAe;AAChB;;AACD;;AACF,WAAK,GAAL;AACE,YAAI3B,KAAK,KAAKb,KAAK,CAACC,MAApB,EAA4B;AAC1BuC,UAAAA,eAAe;;AACf,cAAIA,eAAe,KAAK,CAApB,IAAyBF,aAAa,KAAK,IAA3C,IAAmDC,aAAa,KAAK,IAAzE,EAA+E;AAC7EA,YAAAA,aAAa,GAAG5B,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAhB;AACAD,YAAAA,qBAAqB,GAAGC,GAAxB;AACD;AACF;;AACD;;AACF;AACE,YAAIJ,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0BwC,WAA1B,IAAyCvB,GAAG,GAAG,GAAnD,EAAwD;AACtD,cACE,CAACA,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,GAAxB,KACAP,GAAG,CAACmC,MAAJ,GAAa7B,GAAG,GAAG,CADnB,KAECN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAApB,IAA2BN,GAAG,CAACQ,MAAJ,CAAWF,GAAX,MAAoB,GAFhD,MAGCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAHxD,MAICN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAJxD,MAKCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GALxD,MAMCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GANxD,MAOCN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwB,GAAxB,IAA+BN,GAAG,CAACQ,MAAJ,CAAWF,GAAG,GAAG,CAAjB,KAAuB,GAPvD,CADF,EASE;AACAyB,YAAAA,QAAQ,GAAG,IAAX;AACD;;AACDD,UAAAA,WAAW,GAAG,KAAd;AACD,SAfH,CAgBE;;;AACA,YAAI5B,KAAK,KAAKb,KAAK,CAACC,MAAhB,IAA0B0C,SAA1B,IAAuCzB,GAAG,IAAI,GAAlD,EAAuD;AACrDiB,UAAAA,iBAAiB,GAAG,KAApB;AACAC,UAAAA,sBAAsB,GAAG,IAAzB;AACD;;AACD;AA3NJ;;AA8NAtB,IAAAA,QAAQ,GAAGI,GAAX;AACAA,IAAAA,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWF,GAAG,EAAd,CAAN;AACD;;AAED,MAAIJ,KAAK,KAAKb,KAAK,CAACK,UAApB,EAAgC+B,sBAAsB,GAAG,KAAzB;;AAEhC,MAAI,CAACQ,QAAL,EAAe;AACb;AACA,QAAIP,aAAa,KAAK,IAAtB,EAA4B;AAC1BzB,MAAAA,QAAQ,CAACoC,OAAT,CAAiB,EAAjB;AACApC,MAAAA,QAAQ,CAACoC,OAAT,CAAiBrC,GAAjB;AACD,KAHD,MAGO;AACLC,MAAAA,QAAQ,CAACoC,OAAT,CAAiBrC,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAjB;AACAL,MAAAA,QAAQ,CAACoC,OAAT,CAAiBX,aAAjB;AACD;;AACDrB,IAAAA,qBAAqB,GAAGC,GAAxB;AACD,GAVD,MAUO;AACLL,IAAAA,QAAQ,CAACoC,OAAT,CAAiBV,aAAa,KAAK,IAAlB,GAAyBA,aAAzB,GAAyC,EAA1D;AACA1B,IAAAA,QAAQ,CAACoC,OAAT,CAAiBX,aAAa,KAAK,IAAlB,GAAyBA,aAAzB,GAAyC,EAA1D;AACD;;AAED,MAAI,CAACK,QAAL,EAAe;AACbP,IAAAA,iBAAiB,GAAG,KAApB;AACD,GAzR8E,CA2R/E;AACA;;;AACA,MAAIS,QAAJ,EAAc;AACZhC,IAAAA,QAAQ,CAACQ,IAAT,CAAcmB,aAAa,KAAK,IAAlB,GAAyBA,aAAzB,GAAyC,EAAvD;AACD;;AACD3B,EAAAA,QAAQ,CAACQ,IAAT,CAAcT,GAAG,CAACU,SAAJ,CAAcL,qBAAd,EAAqCC,GAArC,CAAd;AAEA,SAAO;AACLL,IAAAA,QAAQ,EAAEA,QADL;AAELqC,IAAAA,UAAU,EAAEd,iBAFP;AAGLe,IAAAA,eAAe,EAAEd,sBAHZ;AAILV,IAAAA,MAAM,EAAEA;AAJH,GAAP;AAMD,CAxSD;AA0SA;;;;;;;;;;;AASAlB,MAAM,CAACC,OAAP,CAAekD,gBAAf,GAAkC,UAAShD,GAAT,EAAciD,UAAd,EAA0BC,QAA1B,EAAoC;AACpE,MAAIC,cAAc,GAAG,IAAIC,MAAJ,CACnB,oHACEF,QADF,GAEE,GAHiB,EAInB,GAJmB,CAArB;AAMA,MAAIC,cAAc,CAACE,IAAf,CAAoBrD,GAApB,CAAJ,EAA8B,OAAO,IAAP;;AAE9B,MAAIiD,UAAU,IAAI,IAAlB,EAAwB;AACtBE,IAAAA,cAAc,GAAG,IAAIC,MAAJ,CACf,mHADe,EAEf,GAFe,CAAjB;;AAIA,QAAID,cAAc,CAACE,IAAf,CAAoBrD,GAApB,KAA4BiD,UAAU,CAACd,MAAX,GAAoB,CAApD,EAAuD;AACrD,aAAOc,UAAU,CAAC,CAAD,CAAV,CAAcK,WAAd,OAAgCJ,QAAQ,CAACI,WAAT,EAAvC;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAnBD","sourcesContent":["const Errors = require('../misc/errors');\n\nconst State = {\n  Normal: 1 /* inside  query */,\n  String: 2 /* inside string */,\n  SlashStarComment: 3 /* inside slash-star comment */,\n  Escape: 4 /* found backslash */,\n  EOLComment: 5 /* # comment, or // comment, or -- comment */,\n  Backtick: 6 /* found backtick */,\n  Placeholder: 7 /* found placeholder */\n};\n\n/**\n * Split query according to parameters (question mark).\n * Question mark in comment are not taken in account\n *\n * @returns {Array} query separated by parameters\n */\nmodule.exports.splitQuery = function(sql) {\n  let partList = [];\n  let state = State.Normal;\n  let lastChar = '\\0';\n  let singleQuotes = false;\n  let lastParameterPosition = 0;\n  let idx = 0;\n  let car = sql.charAt(idx++);\n\n  while (car !== '') {\n    if (\n      state === State.Escape &&\n      !((car === \"'\" && singleQuotes) || (car === '\"' && !singleQuotes))\n    ) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') state = State.SlashStarComment;\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') state = State.Normal;\n        break;\n\n      case '#':\n        if (state === State.Normal) state = State.EOLComment;\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case '\\\\':\n        if (state === State.String) state = State.Escape;\n        break;\n\n      case '?':\n        if (state === State.Normal) {\n          partList.push(sql.substring(lastParameterPosition, idx - 1));\n          lastParameterPosition = idx;\n        }\n        break;\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n        break;\n    }\n    lastChar = car;\n\n    car = sql.charAt(idx++);\n  }\n  if (lastParameterPosition === 0) {\n    partList.push(sql);\n  } else {\n    partList.push(sql.substring(lastParameterPosition));\n  }\n\n  return partList;\n};\n\n/**\n * Split query according to parameters using placeholder.\n *\n * @param sql             sql with placeholders\n * @param info            connection information\n * @param initialValues   placeholder object\n * @param displaySql      display sql function\n * @returns {{parts: Array, values: Array}}\n */\nmodule.exports.splitQueryPlaceholder = function(sql, info, initialValues, displaySql) {\n  let partList = [];\n  let values = [];\n  let state = State.Normal;\n  let lastChar = '\\0';\n\n  let singleQuotes = false;\n  let lastParameterPosition = 0;\n\n  let idx = 0;\n  let car = sql.charAt(idx++);\n  let placeholderName;\n\n  while (car !== '') {\n    if (\n      state === State.Escape &&\n      !((car === \"'\" && singleQuotes) || (car === '\"' && !singleQuotes))\n    ) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') state = State.SlashStarComment;\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') state = State.Normal;\n        break;\n\n      case '#':\n        if (state === State.Normal) state = State.EOLComment;\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n          singleQuotes = false;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case '\\\\':\n        if (state === State.String) state = State.Escape;\n        break;\n\n      case ':':\n        if (state === State.Normal) {\n          partList.push(sql.substring(lastParameterPosition, idx - 1));\n          placeholderName = '';\n          while (\n            ((car = sql.charAt(idx++)) !== '' && car >= '0' && car <= '9') ||\n            (car >= 'A' && car <= 'Z') ||\n            (car >= 'a' && car <= 'z') ||\n            car === '-' ||\n            car === '_'\n          ) {\n            placeholderName += car;\n          }\n          idx--;\n          const val = initialValues[placeholderName];\n          if (val === undefined) {\n            throw Errors.createError(\n              \"Placeholder '\" + placeholderName + \"' is not defined\\n\" + displaySql.call(),\n              false,\n              info,\n              'HY000',\n              Errors.ER_PLACEHOLDER_UNDEFINED\n            );\n          }\n          values.push(val);\n          lastParameterPosition = idx;\n        }\n        break;\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n    }\n    lastChar = car;\n\n    car = sql.charAt(idx++);\n  }\n  if (lastParameterPosition === 0) {\n    partList.push(sql);\n  } else {\n    partList.push(sql.substring(lastParameterPosition));\n  }\n\n  return { parts: partList, values: values };\n};\n\n/**\n * Split query according to parameters (question mark).\n *\n * The only rewritten queries follow these notation: INSERT [LOW_PRIORITY | DELAYED |\n * HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_list)] [(col,...)] {VALUES |\n * VALUE} (...) [ ON DUPLICATE KEY UPDATE col=expr [, col=expr] ... ] With expr without\n * parameter.\n *\n * Query with INSERT ... SELECT / containing LAST_INSERT_ID() will not be rewritten\n *\n * query parts will be split this way :\n * - pre-value part\n * - after value part\n * [- after parameter part] (after each parameter)\n * - ending part\n *\n * example : INSERT INTO MyTABLE VALUES (9, ?, 5, ?, 8) ON DUPLICATE KEY UPDATE col2=col2+10\n * will result in :\n * - pre-value       : \"INSERT INTO MyTABLE VALUES\"\n * - after value     : \" (9, \"\n * - after parameter : \", 5, \"\n * - after parameter : \", 8)\"\n * - ending          : \" ON DUPLICATE KEY UPDATE col2=col2+10\"\n *\n *\n * @returns {JSON} query separated by parameters\n */\nmodule.exports.splitRewritableQuery = function(sql) {\n  let reWritablePrepare = true;\n  let multipleQueriesPrepare = true;\n  let partList = [];\n  let lastChar = '\\0';\n\n  let lastParameterPosition = 0;\n\n  let preValuePart1 = null;\n  let preValuePart2 = null;\n  let postValuePart = null;\n\n  let singleQuotes = false;\n\n  let isInParenthesis = 0;\n  let isFirstChar = true;\n  let isInsert = false;\n  let semicolon = false;\n  let hasParam = false;\n  let state = State.Normal;\n\n  let idx = 0;\n  let car = sql.charAt(idx++);\n  while (car !== '') {\n    if (\n      state === State.Escape &&\n      !((car === \"'\" && singleQuotes) || (car === '\"' && !singleQuotes))\n    ) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') {\n          state = State.SlashStarComment;\n        }\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') {\n          state = State.Normal;\n        }\n        break;\n\n      case '#':\n        if (state === State.Normal) {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n        break;\n      case ';':\n        if (state === State.Normal) {\n          semicolon = true;\n          multipleQueriesPrepare = false;\n        }\n        break;\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case '\\\\':\n        if (state === State.String) {\n          state = State.Escape;\n        }\n        break;\n\n      case '?':\n        if (state === State.Normal) {\n          hasParam = true;\n          let part = sql.substring(lastParameterPosition, idx - 1);\n          lastParameterPosition = idx;\n\n          if (preValuePart1 === null) {\n            preValuePart1 = part;\n            preValuePart2 = '';\n          } else if (preValuePart2 === null) {\n            preValuePart2 = part;\n          } else {\n            if (postValuePart) {\n              //having parameters after the last \")\" of value is not rewritable\n              reWritablePrepare = false;\n              partList.push(postValuePart + part);\n              postValuePart = null;\n            } else partList.push(part);\n          }\n        }\n        break;\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n        break;\n\n      case 's':\n      case 'S':\n        if (\n          state === State.Normal &&\n          postValuePart === null &&\n          sql.length > idx + 5 &&\n          (sql.charAt(idx) === 'e' || sql.charAt(idx) === 'E') &&\n          (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') &&\n          (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') &&\n          (sql.charAt(idx + 3) === 'c' || sql.charAt(idx + 3) === 'C') &&\n          (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T')\n        ) {\n          //field/table name might contain 'select'\n          if (\n            idx > 1 &&\n            sql.charAt(idx - 2) > ' ' &&\n            '();><=-+,'.indexOf(sql.charAt(idx - 2)) === -1\n          ) {\n            break;\n          }\n          if (sql.charAt(idx + 5) > ' ' && '();><=-+,'.indexOf(sql.charAt(idx + 5)) === -1) {\n            break;\n          }\n\n          //SELECT queries, INSERT FROM SELECT not rewritable\n          reWritablePrepare = false;\n        }\n        break;\n      case 'v':\n      case 'V':\n        if (\n          state === State.Normal &&\n          !preValuePart1 &&\n          (lastChar == ')' || lastChar <= ' ') &&\n          sql.length > idx + 6 &&\n          (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') &&\n          (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') &&\n          (sql.charAt(idx + 2) === 'u' || sql.charAt(idx + 2) === 'U') &&\n          (sql.charAt(idx + 3) === 'e' || sql.charAt(idx + 3) === 'E') &&\n          (sql.charAt(idx + 4) === 's' || sql.charAt(idx + 4) === 'S') &&\n          (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')\n        ) {\n          idx += 5;\n          preValuePart1 = sql.substring(lastParameterPosition, idx);\n          lastParameterPosition = idx;\n        }\n        break;\n      case 'l':\n      case 'L':\n        if (\n          state === State.Normal &&\n          sql.length > idx + 13 &&\n          (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') &&\n          (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') &&\n          (sql.charAt(idx + 2) === 't' || sql.charAt(idx + 2) === 'T') &&\n          sql.charAt(idx + 3) === '_' &&\n          (sql.charAt(idx + 4) === 'i' || sql.charAt(idx + 4) === 'I') &&\n          (sql.charAt(idx + 5) === 'n' || sql.charAt(idx + 5) === 'N') &&\n          (sql.charAt(idx + 6) === 's' || sql.charAt(idx + 6) === 'S') &&\n          (sql.charAt(idx + 7) === 'e' || sql.charAt(idx + 7) === 'E') &&\n          (sql.charAt(idx + 8) === 'r' || sql.charAt(idx + 8) === 'R') &&\n          (sql.charAt(idx + 9) === 't' || sql.charAt(idx + 9) === 'T') &&\n          sql.charAt(idx + 10) === '_' &&\n          (sql.charAt(idx + 11) === 'i' || sql.charAt(idx + 11) === 'I') &&\n          (sql.charAt(idx + 12) === 'd' || sql.charAt(idx + 12) === 'D') &&\n          sql.charAt(idx + 13) === '('\n        ) {\n          reWritablePrepare = false;\n          idx += 13;\n        }\n        break;\n      case '(':\n        if (state === State.Normal) {\n          isInParenthesis++;\n        }\n        break;\n      case ')':\n        if (state === State.Normal) {\n          isInParenthesis--;\n          if (isInParenthesis === 0 && preValuePart2 !== null && postValuePart === null) {\n            postValuePart = sql.substring(lastParameterPosition, idx);\n            lastParameterPosition = idx;\n          }\n        }\n        break;\n      default:\n        if (state === State.Normal && isFirstChar && car > ' ') {\n          if (\n            (car === 'I' || car === 'i') &&\n            sql.length > idx + 6 &&\n            (sql.charAt(idx) === 'n' || sql.charAt(idx) === 'N') &&\n            (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') &&\n            (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') &&\n            (sql.charAt(idx + 3) === 'r' || sql.charAt(idx + 3) === 'R') &&\n            (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T') &&\n            (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')\n          ) {\n            isInsert = true;\n          }\n          isFirstChar = false;\n        }\n        //multiple queries\n        if (state === State.Normal && semicolon && car >= ' ') {\n          reWritablePrepare = false;\n          multipleQueriesPrepare = true;\n        }\n        break;\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (state === State.EOLComment) multipleQueriesPrepare = false;\n\n  if (!hasParam) {\n    //permit to have rewrite without parameter\n    if (preValuePart1 === null) {\n      partList.unshift('');\n      partList.unshift(sql);\n    } else {\n      partList.unshift(sql.substring(lastParameterPosition, idx));\n      partList.unshift(preValuePart1);\n    }\n    lastParameterPosition = idx;\n  } else {\n    partList.unshift(preValuePart2 !== null ? preValuePart2 : '');\n    partList.unshift(preValuePart1 !== null ? preValuePart1 : '');\n  }\n\n  if (!isInsert) {\n    reWritablePrepare = false;\n  }\n\n  //postValuePart is the value after the last parameter and parenthesis\n  //if no param, don't add to the list.\n  if (hasParam) {\n    partList.push(postValuePart !== null ? postValuePart : '');\n  }\n  partList.push(sql.substring(lastParameterPosition, idx));\n\n  return {\n    partList: partList,\n    reWritable: reWritablePrepare,\n    multipleQueries: multipleQueriesPrepare\n  };\n};\n\nmodule.exports.searchPlaceholder = function(sql, info, initialValues, displaySql) {\n  let sqlPlaceHolder = '';\n  const rowNumber = initialValues.length;\n  let values = new Array(rowNumber);\n  for (let i = 0; i < rowNumber; i++) values[i] = [];\n  let state = State.Normal;\n  let lastChar = '\\0';\n\n  let singleQuotes = false;\n  let lastParameterPosition = 0;\n\n  let idx = 0;\n  let car = sql.charAt(idx++);\n  let placeholderName;\n\n  while (car !== '') {\n    if (\n      state === State.Escape &&\n      !((car === \"'\" && singleQuotes) || (car === '\"' && !singleQuotes))\n    ) {\n      state = State.String;\n      lastChar = car;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') state = State.SlashStarComment;\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') state = State.Normal;\n        break;\n\n      case '#':\n        if (state === State.Normal) state = State.EOLComment;\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n          singleQuotes = false;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case '\\\\':\n        if (state === State.String) state = State.Escape;\n        break;\n\n      case ':':\n        if (state === State.Normal) {\n          sqlPlaceHolder += sql.substring(lastParameterPosition, idx - 1) + '?';\n          placeholderName = '';\n          while (\n            ((car = sql.charAt(idx++)) !== '' && car >= '0' && car <= '9') ||\n            (car >= 'A' && car <= 'Z') ||\n            (car >= 'a' && car <= 'z') ||\n            car === '-' ||\n            car === '_'\n          ) {\n            placeholderName += car;\n          }\n          idx--;\n          for (let i = 0; i < rowNumber; i++) {\n            const val = initialValues[i][placeholderName];\n            if (val !== undefined) {\n              values[i].push(val);\n            } else {\n              values[i].push(null);\n            }\n          }\n          lastParameterPosition = idx;\n        }\n        break;\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n    }\n    lastChar = car;\n\n    car = sql.charAt(idx++);\n  }\n  if (lastParameterPosition === 0) {\n    sqlPlaceHolder = sql;\n  } else {\n    sqlPlaceHolder += sql.substring(lastParameterPosition);\n  }\n\n  return { sql: sqlPlaceHolder, values: values };\n};\n\n/**\n * Split query according to named parameters.\n *\n * The only rewritten queries follow these notation: INSERT [LOW_PRIORITY | DELAYED |\n * HIGH_PRIORITY] [IGNORE] [INTO] tbl_name [PARTITION (partition_list)] [(col,...)] {VALUES |\n * VALUE} (...) [ ON DUPLICATE KEY UPDATE col=expr [, col=expr] ... ] With expr without\n * parameter.\n *\n * Query with INSERT ... SELECT / containing LAST_INSERT_ID() will not be rewritten\n *\n * query parts will be split this way :\n * - pre-value part\n * - after value part\n * [- after parameter part] (after each parameter)\n * - ending part\n *\n * example : INSERT INTO MyTABLE VALUES (9, :param1, 5, :param2, 8) ON DUPLICATE KEY UPDATE col2=col2+10\n * will result in :\n * - pre-value       : \"INSERT INTO MyTABLE VALUES\"\n * - after value     : \" (9, \"\n * - after parameter : \", 5, \"\n * - after parameter : \", 8)\"\n * - ending          : \" ON DUPLICATE KEY UPDATE col2=col2+10\"\n *\n *\n * @returns {JSON} query separated by parameters\n */\nmodule.exports.splitRewritableNamedParameterQuery = function(sql, initialValues) {\n  let reWritablePrepare = true;\n  let multipleQueriesPrepare = true;\n  let partList = [];\n  let values = new Array(initialValues.length);\n  for (let i = 0; i < values.length; i++) values[i] = [];\n  let lastChar = '\\0';\n\n  let lastParameterPosition = 0;\n\n  let preValuePart1 = null;\n  let preValuePart2 = null;\n  let postValuePart = null;\n\n  let singleQuotes = false;\n\n  let isInParenthesis = 0;\n  let isFirstChar = true;\n  let isInsert = false;\n  let semicolon = false;\n  let hasParam = false;\n  let placeholderName;\n  let state = State.Normal;\n\n  let idx = 0;\n  let car = sql.charAt(idx++);\n  while (car !== '') {\n    if (\n      state === State.Escape &&\n      !((car === \"'\" && singleQuotes) || (car === '\"' && !singleQuotes))\n    ) {\n      state = State.String;\n      car = sql.charAt(idx++);\n      continue;\n    }\n\n    switch (car) {\n      case '*':\n        if (state === State.Normal && lastChar == '/') {\n          state = State.SlashStarComment;\n        }\n        break;\n\n      case '/':\n        if (state === State.SlashStarComment && lastChar == '*') {\n          state = State.Normal;\n        }\n        break;\n\n      case '#':\n        if (state === State.Normal) {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '-':\n        if (state === State.Normal && lastChar == '-') {\n          state = State.EOLComment;\n        }\n        break;\n\n      case '\\n':\n        if (state === State.EOLComment) {\n          state = State.Normal;\n        }\n        break;\n\n      case '\"':\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = false;\n        } else if (state === State.String && !singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && !singleQuotes) {\n          state = State.String;\n        }\n        break;\n      case ';':\n        if (state === State.Normal) {\n          semicolon = true;\n          multipleQueriesPrepare = false;\n        }\n        break;\n      case \"'\":\n        if (state === State.Normal) {\n          state = State.String;\n          singleQuotes = true;\n        } else if (state === State.String && singleQuotes) {\n          state = State.Normal;\n        } else if (state === State.Escape && singleQuotes) {\n          state = State.String;\n        }\n        break;\n\n      case '\\\\':\n        if (state === State.String) {\n          state = State.Escape;\n        }\n        break;\n\n      case ':':\n        if (state === State.Normal) {\n          let part = sql.substring(lastParameterPosition, idx - 1);\n          placeholderName = '';\n          while (\n            ((car = sql.charAt(idx++)) !== '' && car >= '0' && car <= '9') ||\n            (car >= 'A' && car <= 'Z') ||\n            (car >= 'a' && car <= 'z') ||\n            car === '-' ||\n            car === '_'\n          ) {\n            placeholderName += car;\n          }\n          idx--;\n          hasParam = true;\n          initialValues.forEach((row, idx) => {\n            if (row[placeholderName] !== undefined) {\n              values[idx].push(row[placeholderName]);\n            } else {\n              values[idx].push(null);\n            }\n          });\n\n          lastParameterPosition = idx;\n\n          if (preValuePart1 === null) {\n            preValuePart1 = part;\n            preValuePart2 = '';\n          } else if (preValuePart2 === null) {\n            preValuePart2 = part;\n          } else {\n            if (postValuePart) {\n              //having parameters after the last \")\" of value is not rewritable\n              reWritablePrepare = false;\n              partList.push(postValuePart + part);\n              postValuePart = null;\n            } else partList.push(part);\n          }\n        }\n        break;\n\n      case '`':\n        if (state === State.Backtick) {\n          state = State.Normal;\n        } else if (state === State.Normal) {\n          state = State.Backtick;\n        }\n        break;\n\n      case 's':\n      case 'S':\n        if (\n          state === State.Normal &&\n          postValuePart === null &&\n          sql.length > idx + 5 &&\n          (sql.charAt(idx) === 'e' || sql.charAt(idx) === 'E') &&\n          (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') &&\n          (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') &&\n          (sql.charAt(idx + 3) === 'c' || sql.charAt(idx + 3) === 'C') &&\n          (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T')\n        ) {\n          //field/table name might contain 'select'\n          if (\n            idx > 1 &&\n            sql.charAt(idx - 2) > ' ' &&\n            '();><=-+,'.indexOf(sql.charAt(idx - 2)) === -1\n          ) {\n            break;\n          }\n          if (sql.charAt(idx + 5) > ' ' && '();><=-+,'.indexOf(sql.charAt(idx + 5)) === -1) {\n            break;\n          }\n\n          //SELECT queries, INSERT FROM SELECT not rewritable\n          reWritablePrepare = false;\n        }\n        break;\n      case 'v':\n      case 'V':\n        if (\n          state === State.Normal &&\n          !preValuePart1 &&\n          (lastChar == ')' || lastChar <= ' ') &&\n          sql.length > idx + 6 &&\n          (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') &&\n          (sql.charAt(idx + 1) === 'l' || sql.charAt(idx + 1) === 'L') &&\n          (sql.charAt(idx + 2) === 'u' || sql.charAt(idx + 2) === 'U') &&\n          (sql.charAt(idx + 3) === 'e' || sql.charAt(idx + 3) === 'E') &&\n          (sql.charAt(idx + 4) === 's' || sql.charAt(idx + 4) === 'S') &&\n          (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')\n        ) {\n          idx += 5;\n          preValuePart1 = sql.substring(lastParameterPosition, idx);\n          lastParameterPosition = idx;\n        }\n        break;\n      case 'l':\n      case 'L':\n        if (\n          state === State.Normal &&\n          sql.length > idx + 13 &&\n          (sql.charAt(idx) === 'a' || sql.charAt(idx) === 'A') &&\n          (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') &&\n          (sql.charAt(idx + 2) === 't' || sql.charAt(idx + 2) === 'T') &&\n          sql.charAt(idx + 3) === '_' &&\n          (sql.charAt(idx + 4) === 'i' || sql.charAt(idx + 4) === 'I') &&\n          (sql.charAt(idx + 5) === 'n' || sql.charAt(idx + 5) === 'N') &&\n          (sql.charAt(idx + 6) === 's' || sql.charAt(idx + 6) === 'S') &&\n          (sql.charAt(idx + 7) === 'e' || sql.charAt(idx + 7) === 'E') &&\n          (sql.charAt(idx + 8) === 'r' || sql.charAt(idx + 8) === 'R') &&\n          (sql.charAt(idx + 9) === 't' || sql.charAt(idx + 9) === 'T') &&\n          sql.charAt(idx + 10) === '_' &&\n          (sql.charAt(idx + 11) === 'i' || sql.charAt(idx + 11) === 'I') &&\n          (sql.charAt(idx + 12) === 'd' || sql.charAt(idx + 12) === 'D') &&\n          sql.charAt(idx + 13) === '('\n        ) {\n          reWritablePrepare = false;\n          idx += 13;\n        }\n        break;\n      case '(':\n        if (state === State.Normal) {\n          isInParenthesis++;\n        }\n        break;\n      case ')':\n        if (state === State.Normal) {\n          isInParenthesis--;\n          if (isInParenthesis === 0 && preValuePart2 !== null && postValuePart === null) {\n            postValuePart = sql.substring(lastParameterPosition, idx);\n            lastParameterPosition = idx;\n          }\n        }\n        break;\n      default:\n        if (state === State.Normal && isFirstChar && car > ' ') {\n          if (\n            (car === 'I' || car === 'i') &&\n            sql.length > idx + 6 &&\n            (sql.charAt(idx) === 'n' || sql.charAt(idx) === 'N') &&\n            (sql.charAt(idx + 1) === 's' || sql.charAt(idx + 1) === 'S') &&\n            (sql.charAt(idx + 2) === 'e' || sql.charAt(idx + 2) === 'E') &&\n            (sql.charAt(idx + 3) === 'r' || sql.charAt(idx + 3) === 'R') &&\n            (sql.charAt(idx + 4) === 't' || sql.charAt(idx + 4) === 'T') &&\n            (sql.charAt(idx + 5) === '(' || sql.charAt(idx + 5) <= ' ')\n          ) {\n            isInsert = true;\n          }\n          isFirstChar = false;\n        }\n        //multiple queries\n        if (state === State.Normal && semicolon && car >= ' ') {\n          reWritablePrepare = false;\n          multipleQueriesPrepare = true;\n        }\n        break;\n    }\n\n    lastChar = car;\n    car = sql.charAt(idx++);\n  }\n\n  if (state === State.EOLComment) multipleQueriesPrepare = false;\n\n  if (!hasParam) {\n    //permit to have rewrite without parameter\n    if (preValuePart1 === null) {\n      partList.unshift('');\n      partList.unshift(sql);\n    } else {\n      partList.unshift(sql.substring(lastParameterPosition, idx));\n      partList.unshift(preValuePart1);\n    }\n    lastParameterPosition = idx;\n  } else {\n    partList.unshift(preValuePart2 !== null ? preValuePart2 : '');\n    partList.unshift(preValuePart1 !== null ? preValuePart1 : '');\n  }\n\n  if (!isInsert) {\n    reWritablePrepare = false;\n  }\n\n  //postValuePart is the value after the last parameter and parenthesis\n  //if no param, don't add to the list.\n  if (hasParam) {\n    partList.push(postValuePart !== null ? postValuePart : '');\n  }\n  partList.push(sql.substring(lastParameterPosition, idx));\n\n  return {\n    partList: partList,\n    reWritable: reWritablePrepare,\n    multipleQueries: multipleQueriesPrepare,\n    values: values\n  };\n};\n\n/**\n * Ensure that filename requested by server corresponds to query\n * protocol : https://mariadb.com/kb/en/library/local_infile-packet/\n *\n * @param sql         query\n * @param parameters  parameters if any\n * @param fileName    server requested file\n * @returns {boolean} is filename corresponding to query\n */\nmodule.exports.validateFileName = function(sql, parameters, fileName) {\n  let queryValidator = new RegExp(\n    \"^(\\\\s*\\\\/\\\\*([^\\\\*]|\\\\*[^\\\\/])*\\\\*\\\\/)*\\\\s*LOAD\\\\s+DATA\\\\s+((LOW_PRIORITY|CONCURRENT)\\\\s+)?LOCAL\\\\s+INFILE\\\\s+'\" +\n      fileName +\n      \"'\",\n    'i'\n  );\n  if (queryValidator.test(sql)) return true;\n\n  if (parameters != null) {\n    queryValidator = new RegExp(\n      '^(\\\\s*\\\\/\\\\*([^\\\\*]|\\\\*[^\\\\/])*\\\\*\\\\/)*\\\\s*LOAD\\\\s+DATA\\\\s+((LOW_PRIORITY|CONCURRENT)\\\\s+)?LOCAL\\\\s+INFILE\\\\s+\\\\?',\n      'i'\n    );\n    if (queryValidator.test(sql) && parameters.length > 0) {\n      return parameters[0].toLowerCase() === fileName.toLowerCase();\n    }\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"script"}