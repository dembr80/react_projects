{"ast":null,"code":"'use strict';\n\nvar PoolBase = require('./pool-base');\n\nvar ConnectionCallback = require('./connection-callback');\n\nvar Errors = require('./misc/errors');\n\nvar util = require('util');\n\nfunction PoolCallback(options) {\n  var processTaskCallback = function processTaskCallback(conn, sql, values, isBatch) {\n    if (sql) {\n      return new Promise(function (resolve, reject) {\n        var fct = isBatch ? conn.batch : conn.query;\n        fct(sql, values, function (err, rows, fields) {\n          conn.releaseWithoutError();\n\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          return resolve(rows);\n        });\n      });\n    } else {\n      return Promise.resolve(conn);\n    }\n  };\n\n  var pingPromise = function pingPromise(conn) {\n    return new Promise(function (resolve, reject) {\n      conn.ping(function (err) {\n        if (err) {\n          reject(err);\n        } else resolve();\n      });\n    });\n  };\n\n  var createConnectionPoolCallback = function createConnectionPoolCallback(pool) {\n    var conn = new ConnectionCallback(options.connOptions);\n    return new Promise(function (resolve, reject) {\n      conn.connect(function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          if (pool.closed) {\n            //discard connection\n            conn.end(function (err) {});\n            reject(Errors.createError('Cannot create new connection to pool, pool closed', true, null, '08S01', Errors.ER_ADD_CONNECTION_CLOSED_POOL, null));\n          } else {\n            var initialEnd = conn.end;\n\n            conn.forceEnd = function () {\n              return new Promise(function (res, rej) {\n                initialEnd(function (err) {\n                  if (err) {\n                    rej(err);\n                  } else {\n                    res();\n                  }\n                });\n              });\n            };\n\n            conn.release = function (cb) {\n              if (pool.closed) {\n                pool._discardConnection(conn);\n\n                if (cb) cb();\n                return;\n              }\n\n              if (options.noControlAfterUse) {\n                pool._releaseConnection(conn);\n\n                if (cb) cb();\n                return;\n              } //if server permit it, reset the connection, or rollback only if not\n              // COM_RESET_CONNECTION exist since mysql 5.7.3 and mariadb 10.2.4\n              // but not possible to use it with mysql waiting for https://bugs.mysql.com/bug.php?id=97633 correction.\n              // and mariadb only since https://jira.mariadb.org/browse/MDEV-18281\n\n\n              var revertFunction = conn.rollback;\n\n              if (options.resetAfterUse && conn.info.isMariaDB() && (conn.info.serverVersion.minor === 2 && conn.info.hasMinVersion(10, 2, 22) || conn.info.hasMinVersion(10, 3, 13))) {\n                revertFunction = conn.reset;\n              }\n\n              revertFunction(function (errCall) {\n                if (errCall) {\n                  //uncertain connection state.\n                  pool._discardConnection(conn);\n\n                  if (cb) cb();\n                  return;\n                } else {\n                  pool._releaseConnection(conn);\n                }\n\n                if (cb) cb();\n              });\n            };\n\n            conn.end = conn.release;\n\n            conn.releaseWithoutError = function () {\n              conn.end(function (err) {});\n            };\n\n            resolve(conn);\n          }\n        }\n      });\n    });\n  };\n\n  PoolBase.call(this, options, processTaskCallback, createConnectionPoolCallback, pingPromise);\n  var getConnectionPromise = this.getConnection.bind(this);\n  var endPromise = this.end.bind(this);\n  var queryPromise = this.query.bind(this);\n  var batchPromise = this.batch.bind(this);\n\n  var emptyError = function emptyError(err) {}; //*****************************************************************\n  // internal equivalent with callback of promised functions\n  //*****************************************************************\n\n\n  var _getConnectionCallback = function _getConnectionCallback(callback) {\n    getConnectionPromise().then(function (conn) {\n      if (callback) callback(null, conn);\n    }).catch(callback || emptyError);\n  };\n\n  var _endCallback = function _endCallback(callback) {\n    endPromise().then(function () {\n      if (callback) callback(null);\n    }).catch(callback || emptyError);\n  };\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   * @returns {Query} query\n   */\n\n\n  var _queryCallback = function _queryCallback(sql, values, cb) {\n    var _cb = cb,\n        _values = values;\n\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n\n    queryPromise(sql, _values).then(function (rows) {\n      if (_cb) _cb(null, rows, rows.meta);\n    }).catch(_cb || emptyError);\n  };\n\n  var _batchCallback = function _batchCallback(sql, values, cb) {\n    var _values = values,\n        _cb = cb;\n\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n\n    batchPromise(sql, _values).then(function (rows) {\n      if (_cb) _cb(null, rows, rows.meta);\n    }).catch(_cb || emptyError);\n  }; //*****************************************************************\n  // replacing public promise function with callback equivalent\n  //*****************************************************************\n\n\n  this.end = _endCallback;\n  this.query = _queryCallback;\n  this.batch = _batchCallback;\n  this.getConnection = _getConnectionCallback;\n}\n\nutil.inherits(PoolCallback, PoolBase);\nmodule.exports = PoolCallback;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/pool-callback.js"],"names":["PoolBase","require","ConnectionCallback","Errors","util","PoolCallback","options","processTaskCallback","conn","sql","values","isBatch","Promise","resolve","reject","fct","batch","query","err","rows","fields","releaseWithoutError","pingPromise","ping","createConnectionPoolCallback","pool","connOptions","connect","closed","end","createError","ER_ADD_CONNECTION_CLOSED_POOL","initialEnd","forceEnd","res","rej","release","cb","_discardConnection","noControlAfterUse","_releaseConnection","revertFunction","rollback","resetAfterUse","info","isMariaDB","serverVersion","minor","hasMinVersion","reset","errCall","call","getConnectionPromise","getConnection","bind","endPromise","queryPromise","batchPromise","emptyError","_getConnectionCallback","callback","then","catch","_endCallback","_queryCallback","_cb","_values","undefined","meta","_batchCallback","inherits","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst PoolBase = require('./pool-base');\nconst ConnectionCallback = require('./connection-callback');\nconst Errors = require('./misc/errors');\nconst util = require('util');\n\nfunction PoolCallback(options) {\n  const processTaskCallback = function(conn, sql, values, isBatch) {\n    if (sql) {\n      return new Promise((resolve, reject) => {\n        const fct = isBatch ? conn.batch : conn.query;\n        fct(sql, values, (err, rows, fields) => {\n          conn.releaseWithoutError();\n          if (err) {\n            reject(err);\n            return;\n          }\n          return resolve(rows);\n        });\n      });\n    } else {\n      return Promise.resolve(conn);\n    }\n  };\n\n  const pingPromise = function(conn) {\n    return new Promise((resolve, reject) => {\n      conn.ping(err => {\n        if (err) {\n          reject(err);\n        } else resolve();\n      });\n    });\n  };\n\n  const createConnectionPoolCallback = function(pool) {\n    const conn = new ConnectionCallback(options.connOptions);\n    return new Promise(function(resolve, reject) {\n      conn.connect(err => {\n        if (err) {\n          reject(err);\n        } else {\n          if (pool.closed) {\n            //discard connection\n            conn.end(err => {});\n            reject(\n              Errors.createError(\n                'Cannot create new connection to pool, pool closed',\n                true,\n                null,\n                '08S01',\n                Errors.ER_ADD_CONNECTION_CLOSED_POOL,\n                null\n              )\n            );\n          } else {\n            const initialEnd = conn.end;\n            conn.forceEnd = () => {\n              return new Promise(function(res, rej) {\n                initialEnd(err => {\n                  if (err) {\n                    rej(err);\n                  } else {\n                    res();\n                  }\n                });\n              });\n            };\n\n            conn.release = function(cb) {\n              if (pool.closed) {\n                pool._discardConnection(conn);\n                if (cb) cb();\n                return;\n              }\n              if (options.noControlAfterUse) {\n                pool._releaseConnection(conn);\n                if (cb) cb();\n                return;\n              }\n\n              //if server permit it, reset the connection, or rollback only if not\n              // COM_RESET_CONNECTION exist since mysql 5.7.3 and mariadb 10.2.4\n              // but not possible to use it with mysql waiting for https://bugs.mysql.com/bug.php?id=97633 correction.\n              // and mariadb only since https://jira.mariadb.org/browse/MDEV-18281\n              let revertFunction = conn.rollback;\n              if (\n                options.resetAfterUse &&\n                conn.info.isMariaDB() &&\n                ((conn.info.serverVersion.minor === 2 && conn.info.hasMinVersion(10, 2, 22)) ||\n                  conn.info.hasMinVersion(10, 3, 13))\n              ) {\n                revertFunction = conn.reset;\n              }\n              revertFunction(errCall => {\n                if (errCall) {\n                  //uncertain connection state.\n                  pool._discardConnection(conn);\n                  if (cb) cb();\n                  return;\n                } else {\n                  pool._releaseConnection(conn);\n                }\n                if (cb) cb();\n              });\n            };\n            conn.end = conn.release;\n            conn.releaseWithoutError = () => {\n              conn.end(err => {});\n            };\n            resolve(conn);\n          }\n        }\n      });\n    });\n  };\n\n  PoolBase.call(this, options, processTaskCallback, createConnectionPoolCallback, pingPromise);\n\n  const getConnectionPromise = this.getConnection.bind(this);\n  const endPromise = this.end.bind(this);\n  const queryPromise = this.query.bind(this);\n  const batchPromise = this.batch.bind(this);\n  const emptyError = err => {};\n\n  //*****************************************************************\n  // internal equivalent with callback of promised functions\n  //*****************************************************************\n\n  const _getConnectionCallback = callback => {\n    getConnectionPromise()\n      .then(conn => {\n        if (callback) callback(null, conn);\n      })\n      .catch(callback || emptyError);\n  };\n\n  const _endCallback = callback => {\n    endPromise()\n      .then(() => {\n        if (callback) callback(null);\n      })\n      .catch(callback || emptyError);\n  };\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   * @returns {Query} query\n   */\n  const _queryCallback = function(sql, values, cb) {\n    let _cb = cb,\n      _values = values;\n\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n\n    queryPromise(sql, _values)\n      .then(rows => {\n        if (_cb) _cb(null, rows, rows.meta);\n      })\n      .catch(_cb || emptyError);\n  };\n\n  const _batchCallback = function(sql, values, cb) {\n    let _values = values,\n      _cb = cb;\n\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n\n    batchPromise(sql, _values)\n      .then(rows => {\n        if (_cb) _cb(null, rows, rows.meta);\n      })\n      .catch(_cb || emptyError);\n  };\n\n  //*****************************************************************\n  // replacing public promise function with callback equivalent\n  //*****************************************************************\n\n  this.end = _endCallback;\n  this.query = _queryCallback;\n  this.batch = _batchCallback;\n  this.getConnection = _getConnectionCallback;\n}\n\nutil.inherits(PoolCallback, PoolBase);\n\nmodule.exports = PoolCallback;\n"]},"metadata":{},"sourceType":"script"}