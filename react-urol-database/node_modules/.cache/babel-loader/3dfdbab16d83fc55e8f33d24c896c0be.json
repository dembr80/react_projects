{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Iconv = require('iconv-lite');\n\nvar Capabilities = require('../const/capabilities');\n\nvar Ed25519PasswordAuth = require('./handshake/auth/ed25519-password-auth');\n\nvar NativePasswordAuth = require('./handshake/auth/native-password-auth');\n\nvar Collations = require('../const/collations');\n\nvar Handshake = require('./handshake/handshake');\n/**\n * send a COM_CHANGE_USER: resets the connection and re-authenticates with the given credentials\n * see https://mariadb.com/kb/en/library/com_change_user/\n */\n\n\nvar ChangeUser =\n/*#__PURE__*/\nfunction (_Handshake) {\n  _inherits(ChangeUser, _Handshake);\n\n  function ChangeUser(options, resolve, reject, addCommand) {\n    var _this;\n\n    _classCallCheck(this, ChangeUser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeUser).call(this, resolve, reject, function () {}, addCommand));\n    _this.opts = options;\n    return _this;\n  }\n\n  _createClass(ChangeUser, [{\n    key: \"start\",\n    value: function start(out, opts, info) {\n      this.configAssign(opts, this.opts);\n      var authToken;\n      var pwd = Array.isArray(this.opts.password) ? this.opts.password[0] : this.opts.password;\n\n      switch (info.defaultPluginName) {\n        case 'mysql_native_password':\n        case '':\n          authToken = NativePasswordAuth.encryptPassword(pwd, info.seed);\n          break;\n\n        case 'client_ed25519':\n          authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n          break;\n\n        default:\n          authToken = Buffer.alloc(0);\n          break;\n      }\n\n      out.startPacket(this);\n      out.writeInt8(0x11);\n      out.writeString(this.opts.user || '');\n      out.writeInt8(0);\n\n      if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n        out.writeInt8(authToken.length);\n        out.writeBuffer(authToken, 0, authToken.length);\n      } else {\n        out.writeBuffer(authToken, 0, authToken.length);\n        out.writeInt8(0);\n      }\n\n      if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n        out.writeString(this.opts.database);\n        out.writeInt8(0);\n        info.database = this.opts.database;\n      }\n\n      out.writeInt16(this.opts.collation.index);\n\n      if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n        out.writeString(info.defaultPluginName);\n        out.writeInt8(0);\n      }\n\n      if (this.opts.connectAttributes && info.serverCapabilities & Capabilities.CONNECT_ATTRS) {\n        out.writeInt8(0xfc);\n        var initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n\n        out.writeInt16(0);\n        var encoding = this.opts.collation.charset;\n        writeParam(out, '_client_name', encoding);\n        writeParam(out, 'MariaDB connector/Node', encoding);\n\n        var packageJson = require('../../package.json');\n\n        writeParam(out, '_client_version', encoding);\n        writeParam(out, packageJson.version, encoding);\n        writeParam(out, '_node_version', encoding);\n        writeParam(out, process.versions.node, encoding);\n\n        if (opts.connectAttributes !== true) {\n          var attrNames = Object.keys(this.opts.connectAttributes);\n\n          for (var k = 0; k < attrNames.length; ++k) {\n            writeParam(out, attrNames[k], encoding);\n            writeParam(out, this.opts.connectAttributes[attrNames[k]], encoding);\n          }\n        } //write end size\n\n\n        out.writeInt16AtPos(initPos);\n      }\n\n      out.flushBuffer(true);\n      this.onPacketReceive = this.handshakeResult;\n    }\n    /**\n     * Assign global configuration option used by result-set to current query option.\n     * a little faster than Object.assign() since doest copy all information\n     *\n     * @param connOpts  connection global configuration\n     * @param opt       current options\n     */\n\n  }, {\n    key: \"configAssign\",\n    value: function configAssign(connOpts, opt) {\n      if (!opt) {\n        this.opts = connOpts;\n        return;\n      }\n\n      this.opts.database = opt.database ? opt.database : connOpts.database;\n      this.opts.connectAttributes = opt.connectAttributes ? opt.connectAttributes : connOpts.connectAttributes;\n\n      if (opt.charset && typeof opt.charset === 'string') {\n        this.opts.collation = Collations.fromCharset(opt.charset.toLowerCase());\n\n        if (this.opts.collation === undefined) {\n          this.opts.collation = Collations.fromName(opt.charset.toUpperCase());\n\n          if (this.opts.collation !== undefined) {\n            console.log(\"warning: please use option 'collation' \" + \"in replacement of 'charset' when using a collation name ('\" + opt.charset + \"')\\n\" + \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\");\n          }\n        }\n\n        if (this.opts.collation === undefined) throw new RangeError(\"Unknown charset '\" + opt.charset + \"'\");\n      } else if (opt.collation && typeof opt.collation === 'string') {\n        var initial = opt.collation;\n        this.opts.collation = Collations.fromName(initial.toUpperCase());\n        if (this.opts.collation === undefined) throw new RangeError(\"Unknown collation '\" + initial + \"'\");\n      } else {\n        this.opts.collation = Collations.fromIndex(opt.charsetNumber) || connOpts.collation;\n      }\n\n      connOpts.password = opt.password;\n    }\n  }]);\n\n  return ChangeUser;\n}(Handshake);\n\nfunction writeParam(out, val, encoding) {\n  var param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n  out.writeLengthCoded(param.length);\n  out.writeBuffer(param, 0, param.length);\n}\n\nmodule.exports = ChangeUser;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/change-user.js"],"names":["Iconv","require","Capabilities","Ed25519PasswordAuth","NativePasswordAuth","Collations","Handshake","ChangeUser","options","resolve","reject","addCommand","opts","out","info","configAssign","authToken","pwd","Array","isArray","password","defaultPluginName","encryptPassword","seed","Buffer","alloc","startPacket","writeInt8","writeString","user","serverCapabilities","SECURE_CONNECTION","length","writeBuffer","clientCapabilities","CONNECT_WITH_DB","database","writeInt16","collation","index","PLUGIN_AUTH","connectAttributes","CONNECT_ATTRS","initPos","pos","encoding","charset","writeParam","packageJson","version","process","versions","node","attrNames","Object","keys","k","writeInt16AtPos","flushBuffer","onPacketReceive","handshakeResult","connOpts","opt","fromCharset","toLowerCase","undefined","fromName","toUpperCase","console","log","RangeError","initial","fromIndex","charsetNumber","val","param","isEncoding","from","encode","writeLengthCoded","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Iconv = require('iconv-lite');\nconst Capabilities = require('../const/capabilities');\nconst Ed25519PasswordAuth = require('./handshake/auth/ed25519-password-auth');\nconst NativePasswordAuth = require('./handshake/auth/native-password-auth');\nconst Collations = require('../const/collations');\nconst Handshake = require('./handshake/handshake');\n\n/**\n * send a COM_CHANGE_USER: resets the connection and re-authenticates with the given credentials\n * see https://mariadb.com/kb/en/library/com_change_user/\n */\nclass ChangeUser extends Handshake {\n  constructor(options, resolve, reject, addCommand) {\n    super(resolve, reject, () => {}, addCommand);\n    this.opts = options;\n  }\n\n  start(out, opts, info) {\n    this.configAssign(opts, this.opts);\n    let authToken;\n    const pwd = Array.isArray(this.opts.password) ? this.opts.password[0] : this.opts.password;\n    switch (info.defaultPluginName) {\n      case 'mysql_native_password':\n      case '':\n        authToken = NativePasswordAuth.encryptPassword(pwd, info.seed);\n        break;\n      case 'client_ed25519':\n        authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n        break;\n      default:\n        authToken = Buffer.alloc(0);\n        break;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x11);\n    out.writeString(this.opts.user || '');\n    out.writeInt8(0);\n\n    if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n      out.writeInt8(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.writeInt8(0);\n    }\n\n    if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n      out.writeString(this.opts.database);\n      out.writeInt8(0);\n      info.database = this.opts.database;\n    }\n\n    out.writeInt16(this.opts.collation.index);\n\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      out.writeString(info.defaultPluginName);\n      out.writeInt8(0);\n    }\n\n    if (this.opts.connectAttributes && info.serverCapabilities & Capabilities.CONNECT_ATTRS) {\n      out.writeInt8(0xfc);\n      let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n      out.writeInt16(0);\n\n      const encoding = this.opts.collation.charset;\n\n      writeParam(out, '_client_name', encoding);\n      writeParam(out, 'MariaDB connector/Node', encoding);\n\n      let packageJson = require('../../package.json');\n      writeParam(out, '_client_version', encoding);\n      writeParam(out, packageJson.version, encoding);\n\n      writeParam(out, '_node_version', encoding);\n      writeParam(out, process.versions.node, encoding);\n\n      if (opts.connectAttributes !== true) {\n        let attrNames = Object.keys(this.opts.connectAttributes);\n        for (let k = 0; k < attrNames.length; ++k) {\n          writeParam(out, attrNames[k], encoding);\n          writeParam(out, this.opts.connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      //write end size\n      out.writeInt16AtPos(initPos);\n    }\n\n    out.flushBuffer(true);\n    this.onPacketReceive = this.handshakeResult;\n  }\n\n  /**\n   * Assign global configuration option used by result-set to current query option.\n   * a little faster than Object.assign() since doest copy all information\n   *\n   * @param connOpts  connection global configuration\n   * @param opt       current options\n   */\n  configAssign(connOpts, opt) {\n    if (!opt) {\n      this.opts = connOpts;\n      return;\n    }\n    this.opts.database = opt.database ? opt.database : connOpts.database;\n    this.opts.connectAttributes = opt.connectAttributes\n      ? opt.connectAttributes\n      : connOpts.connectAttributes;\n\n    if (opt.charset && typeof opt.charset === 'string') {\n      this.opts.collation = Collations.fromCharset(opt.charset.toLowerCase());\n      if (this.opts.collation === undefined) {\n        this.opts.collation = Collations.fromName(opt.charset.toUpperCase());\n        if (this.opts.collation !== undefined) {\n          console.log(\n            \"warning: please use option 'collation' \" +\n              \"in replacement of 'charset' when using a collation name ('\" +\n              opt.charset +\n              \"')\\n\" +\n              \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\"\n          );\n        }\n      }\n      if (this.opts.collation === undefined)\n        throw new RangeError(\"Unknown charset '\" + opt.charset + \"'\");\n    } else if (opt.collation && typeof opt.collation === 'string') {\n      const initial = opt.collation;\n      this.opts.collation = Collations.fromName(initial.toUpperCase());\n      if (this.opts.collation === undefined)\n        throw new RangeError(\"Unknown collation '\" + initial + \"'\");\n    } else {\n      this.opts.collation = Collations.fromIndex(opt.charsetNumber) || connOpts.collation;\n    }\n    connOpts.password = opt.password;\n  }\n}\n\nfunction writeParam(out, val, encoding) {\n  let param = Buffer.isEncoding(encoding)\n    ? Buffer.from(val, encoding)\n    : Iconv.encode(val, encoding);\n  out.writeLengthCoded(param.length);\n  out.writeBuffer(param, 0, param.length);\n}\n\nmodule.exports = ChangeUser;\n"]},"metadata":{},"sourceType":"script"}