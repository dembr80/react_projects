{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Command = require('./command');\n\nvar ServerStatus = require('../const/server-status');\n\nvar ColumnDefinition = require('./column-definition');\n\nvar Errors = require('../misc/errors');\n\nvar fs = require('fs');\n\nvar Parse = require('../misc/parse');\n/**\r\n * handle COM_QUERY / COM_STMT_EXECUTE results\r\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\r\n */\n\n\nvar ResultSet =\n/*#__PURE__*/\nfunction (_Command) {\n  _inherits(ResultSet, _Command);\n\n  function ResultSet(resolve, reject) {\n    var _this;\n\n    _classCallCheck(this, ResultSet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultSet).call(this, resolve, reject));\n    _this._responseIndex = 0;\n    _this._rows = [];\n    return _this;\n  }\n  /**\r\n   * Read Query response packet.\r\n   * packet can be :\r\n   * - a result-set\r\n   * - an ERR_Packet\r\n   * - a OK_Packet\r\n   * - LOCAL_INFILE Packet\r\n   *\r\n   * @param packet  query response\r\n   * @param out     output writer\r\n   * @param opts    connection options\r\n   * @param info    connection info\r\n   */\n\n\n  _createClass(ResultSet, [{\n    key: \"readResponsePacket\",\n    value: function readResponsePacket(packet, out, opts, info) {\n      switch (packet.peek()) {\n        //*********************************************************************************************************\n        //* OK response\n        //*********************************************************************************************************\n        case 0x00:\n          return this.readOKPacket(packet, out, opts, info);\n        //*********************************************************************************************************\n        //* ERROR response\n        //*********************************************************************************************************\n\n        case 0xff:\n          var err = packet.readError(info, this.displaySql(), this.stack); //force in transaction status, since query will have created a transaction if autocommit is off\n          //goal is to avoid unnecessary COMMIT/ROLLBACK.\n\n          info.status |= ServerStatus.STATUS_IN_TRANS;\n          return this.throwError(err, info);\n        //*********************************************************************************************************\n        //* LOCAL INFILE response\n        //*********************************************************************************************************\n\n        case 0xfb:\n          return this.readLocalInfile(packet, out, opts, info);\n        //*********************************************************************************************************\n        //* ResultSet\n        //*********************************************************************************************************\n\n        default:\n          return this.readResultSet(packet);\n      }\n    }\n    /**\r\n     * Read result-set packets :\r\n     * see https://mariadb.com/kb/en/library/resultset/\r\n     *\r\n     * @param packet    Column count packet\r\n     * @returns {ResultSet.readColumn} next packet handler\r\n     */\n\n  }, {\n    key: \"readResultSet\",\n    value: function readResultSet(packet) {\n      this._columnCount = packet.readUnsignedLength();\n      this._getValue = this.opts.typeCast ? this.readCastValue : this.readRowData;\n\n      this._rows.push([]);\n\n      this._columns = [];\n      this.onPacketReceive = this.readColumn;\n    }\n    /**\r\n     * Assign global configuration option used by result-set to current query option.\r\n     * a little faster than Object.assign() since doest copy all information\r\n     *\r\n     * @param connOpts  connection global configuration\r\n     * @param cmdOpts   specific command options\r\n     */\n\n  }, {\n    key: \"configAssign\",\n    value: function configAssign(connOpts, cmdOpts) {\n      if (!cmdOpts) {\n        this.opts = connOpts;\n        return;\n      }\n\n      this.opts = {\n        timeout: cmdOpts.timeout,\n        checkDuplicate: cmdOpts.checkDuplicate != undefined ? cmdOpts.checkDuplicate : connOpts.checkDuplicate,\n        typeCast: cmdOpts.typeCast != undefined ? cmdOpts.typeCast : connOpts.typeCast,\n        rowsAsArray: cmdOpts.rowsAsArray != undefined ? cmdOpts.rowsAsArray : connOpts.rowsAsArray,\n        nestTables: cmdOpts.nestTables != undefined ? cmdOpts.nestTables : connOpts.nestTables,\n        dateStrings: cmdOpts.dateStrings != undefined ? cmdOpts.dateStrings : connOpts.dateStrings,\n        tz: cmdOpts.tz != undefined ? cmdOpts.tz : connOpts.tz,\n        localTz: cmdOpts.localTz != undefined ? cmdOpts.localTz : connOpts.localTz,\n        namedPlaceholders: cmdOpts.namedPlaceholders != undefined ? cmdOpts.namedPlaceholders : connOpts.namedPlaceholders,\n        maxAllowedPacket: cmdOpts.maxAllowedPacket != undefined ? cmdOpts.maxAllowedPacket : connOpts.maxAllowedPacket,\n        supportBigNumbers: cmdOpts.supportBigNumbers != undefined ? cmdOpts.supportBigNumbers : connOpts.supportBigNumbers,\n        permitSetMultiParamEntries: cmdOpts.permitSetMultiParamEntries != undefined ? cmdOpts.permitSetMultiParamEntries : connOpts.permitSetMultiParamEntries,\n        bigNumberStrings: cmdOpts.bigNumberStrings != undefined ? cmdOpts.bigNumberStrings : connOpts.bigNumberStrings\n      };\n    }\n    /**\r\n     * Read OK_Packet.\r\n     * see https://mariadb.com/kb/en/library/ok_packet/\r\n     *\r\n     * @param packet    OK_Packet\r\n     * @param opts      connection options\r\n     * @param info      connection information\r\n     * @param out       output writer\r\n     * @returns {*}     null or {Resultset.readResponsePacket} in case of multi-result-set\r\n     */\n\n  }, {\n    key: \"readOKPacket\",\n    value: function readOKPacket(packet, out, opts, info) {\n      var rs = Command.parseOkPacket(packet, out, opts, info);\n\n      this._rows.push(rs);\n\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n        this._responseIndex++;\n        return this.onPacketReceive = this.readResponsePacket;\n      }\n\n      this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n    }\n    /**\r\n     * Read COM_STMT_PREPARE response Packet.\r\n     * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\r\n     *\r\n     * @param packet    COM_STMT_PREPARE_OK packet\r\n     * @param opts      connection options\r\n     * @param info      connection information\r\n     * @param out       output writer\r\n     * @returns {*}     null or {Resultset.readResponsePacket} in case of multi-result-set\r\n     */\n\n  }, {\n    key: \"readPrepareResultPacket\",\n    value: function readPrepareResultPacket(packet, out, opts, info) {\n      switch (packet.peek()) {\n        //*********************************************************************************************************\n        //* OK response\n        //*********************************************************************************************************\n        case 0x00:\n          packet.skip(1); //skip header\n\n          this.statementId = packet.readInt32();\n          this.columnNo = packet.readUInt16();\n          this.parameterNo = packet.readUInt16();\n          if (this.columnNo > 0) return this.onPacketReceive = this.skipColumnsPacket;\n          if (this.parameterNo > 0) return this.onPacketReceive = this.skipParameterPacket;\n          return this.success();\n        //*********************************************************************************************************\n        //* ERROR response\n        //*********************************************************************************************************\n\n        case 0xff:\n          var err = packet.readError(info, this.displaySql(), this.stack); //force in transaction status, since query will have created a transaction if autocommit is off\n          //goal is to avoid unnecessary COMMIT/ROLLBACK.\n\n          info.status |= ServerStatus.STATUS_IN_TRANS;\n          this.onPacketReceive = this.readResponsePacket;\n          return this.throwError(err, info);\n        //*********************************************************************************************************\n        //* Unexpected response\n        //*********************************************************************************************************\n\n        default:\n          info.status |= ServerStatus.STATUS_IN_TRANS;\n          this.onPacketReceive = this.readResponsePacket;\n          return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\n      }\n    }\n  }, {\n    key: \"skipColumnsPacket\",\n    value: function skipColumnsPacket(packet, out, opts, info) {\n      this.columnNo--;\n\n      if (this.columnNo === 0) {\n        if (info.eofDeprecated) {\n          if (this.parameterNo > 0) return this.onPacketReceive = this.skipParameterPacket;\n          this.success();\n        }\n\n        return this.onPacketReceive = this.skipEofPacket;\n      }\n    }\n  }, {\n    key: \"skipEofPacket\",\n    value: function skipEofPacket(packet, out, opts, info) {\n      if (this.parameterNo > 0) return this.onPacketReceive = this.skipParameterPacket;\n      this.success();\n    }\n  }, {\n    key: \"skipParameterPacket\",\n    value: function skipParameterPacket(packet, out, opts, info) {\n      this.parameterNo--;\n\n      if (this.parameterNo === 0) {\n        if (info.eofDeprecated) return this.success();\n        return this.onPacketReceive = this.skipEofPacket;\n      }\n    }\n  }, {\n    key: \"success\",\n    value: function success(val) {\n      this.successEnd(val);\n      this._columns = null;\n      this._rows = null;\n    }\n    /**\r\n     * Read column information metadata\r\n     * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\r\n     *\r\n     * @param packet    column definition packet\r\n     * @param out       output writer\r\n     * @param opts      connection options\r\n     * @param info      connection information\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"readColumn\",\n    value: function readColumn(packet, out, opts, info) {\n      if (this._columns.length !== this._columnCount) {\n        var column = ColumnDefinition.parseColumn(packet);\n\n        this._columns.push(column);\n      } // last column\n\n\n      if (this._columns.length === this._columnCount) {\n        if (this.opts.rowsAsArray) {\n          this.parseRow = this.parseRowAsArray;\n        } else {\n          this.tableHeader = new Array(this._columnCount);\n\n          if (this.opts.nestTables) {\n            this.parseRow = this.parseRowStd;\n\n            if (typeof this.opts.nestTables === 'string') {\n              for (var i = 0; i < this._columnCount; i++) {\n                this.tableHeader[i] = this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\n              }\n\n              this.checkDuplicates();\n            } else if (this.opts.nestTables === true) {\n              this.parseRow = this.parseRowNested;\n\n              for (var _i = 0; _i < this._columnCount; _i++) {\n                this.tableHeader[_i] = [this._columns[_i].table(), this._columns[_i].name()];\n              }\n\n              this.checkNestTablesDuplicates();\n            }\n          } else {\n            this.parseRow = this.parseRowStd;\n\n            for (var _i2 = 0; _i2 < this._columnCount; _i2++) {\n              this.tableHeader[_i2] = this._columns[_i2].name();\n            }\n\n            this.checkDuplicates();\n          }\n        }\n\n        this.emit('fields', this._columns);\n        return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n      }\n    }\n  }, {\n    key: \"checkDuplicates\",\n    value: function checkDuplicates() {\n      if (this.opts.checkDuplicate) {\n        for (var i = 0; i < this._columnCount; i++) {\n          if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\n            var dupes = this.tableHeader.reduce(function (acc, v, i, arr) {\n              return arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc;\n            }, []);\n            this.throwUnexpectedError('Error in results, duplicate field name `' + dupes[0] + '`', false, null, '42000', Errors.ER_DUPLICATE_FIELD);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkNestTablesDuplicates\",\n    value: function checkNestTablesDuplicates() {\n      if (this.opts.checkDuplicate) {\n        for (var i = 0; i < this._columnCount; i++) {\n          for (var j = 0; j < i; j++) {\n            if (this.tableHeader[j][0] === this.tableHeader[i][0] && this.tableHeader[j][1] === this.tableHeader[i][1]) {\n              this.throwUnexpectedError('Error in results, duplicate field name `' + this.tableHeader[i][0] + '`.`' + this.tableHeader[i][1] + '`', false, null, '42000', Errors.ER_DUPLICATE_FIELD);\n            }\n          }\n        }\n      }\n    }\n    /**\r\n     * Read intermediate EOF.\r\n     * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\r\n     * see https://mariadb.com/kb/en/library/eof_packet/\r\n     *\r\n     * @param packet    EOF Packet\r\n     * @param out       output writer\r\n     * @param opts      connection options\r\n     * @param info      connection information\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"readIntermediateEOF\",\n    value: function readIntermediateEOF(packet, out, opts, info) {\n      if (packet.peek() !== 0xfe) {\n        return this.throwNewError('Error in protocol, expected EOF packet', true, info, '42000', Errors.ER_EOF_EXPECTED);\n      } //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\n      //for OUT parameters. It must be checked here\n      //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\n\n\n      packet.skip(3);\n      info.status = packet.readUInt16();\n      this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\n      this.onPacketReceive = this.readResultSetRow;\n    }\n  }, {\n    key: \"handleNewRows\",\n    value: function handleNewRows(row) {\n      this._rows[this._responseIndex].push(row);\n    }\n    /**\r\n     * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\r\n     * or a result-set row\r\n     *\r\n     * @param packet    current packet\r\n     * @param out       output writer\r\n     * @param opts      connection options\r\n     * @param info      connection information\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"readResultSetRow\",\n    value: function readResultSetRow(packet, out, opts, info) {\n      if (packet.peek() >= 0xfe) {\n        if (packet.peek() === 0xff) {\n          var err = packet.readError(info, this.displaySql(), this.stack); //force in transaction status, since query will have created a transaction if autocommit is off\n          //goal is to avoid unnecessary COMMIT/ROLLBACK.\n\n          info.status |= ServerStatus.STATUS_IN_TRANS;\n          return this.throwError(err, info);\n        }\n\n        if (!info.eofDeprecated && packet.length() < 13 || info.eofDeprecated && packet.length() < 0xffffff) {\n          if (!info.eofDeprecated) {\n            packet.skip(3);\n            info.status = packet.readUInt16();\n          } else {\n            packet.skip(1); //skip header\n\n            packet.skipLengthCodedNumber(); //skip update count\n\n            packet.skipLengthCodedNumber(); //skip insert id\n\n            info.status = packet.readUInt16();\n          }\n\n          if (opts.metaAsArray) {\n            //return promise object as array :\n            // example for SELECT 1 =>\n            // [\n            //   [ {\"1\": 1} ],      //rows\n            //   [ColumnDefinition] //meta\n            // ]\n            if (this._responseIndex === 0) this._meta = [];\n            this._meta[this._responseIndex] = this._columns;\n\n            if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n              this._responseIndex++;\n              return this.onPacketReceive = this.readResponsePacket;\n            }\n\n            this.success(this._responseIndex === 0 ? [this._rows[0], this._meta[0]] : [this._rows, this._meta]);\n          } else {\n            //return promise object as rows that have meta property :\n            // example for SELECT 1 =>\n            // [\n            //   {\"1\": 1},\n            //   meta: [ColumnDefinition]\n            // ]\n            this._rows[this._responseIndex].meta = this._columns;\n\n            if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n              this._responseIndex++;\n              return this.onPacketReceive = this.readResponsePacket;\n            }\n\n            this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n          }\n\n          return;\n        }\n      }\n\n      var row = this.parseRow(this._columns, packet, opts);\n      this.handleNewRows(row);\n    }\n    /**\r\n     * Display current SQL with parameters (truncated if too big)\r\n     *\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"displaySql\",\n    value: function displaySql() {\n      if (this.opts && this.initialValues) {\n        if (this.sql.length > this.opts.debugLen) {\n          return 'sql: ' + this.sql.substring(0, this.opts.debugLen) + '...';\n        }\n\n        var sqlMsg = 'sql: ' + this.sql + ' - parameters:';\n        return this.logParameters(sqlMsg, this.initialValues);\n      }\n\n      return 'sql: ' + this.sql + ' - parameters:[]';\n    }\n  }, {\n    key: \"logParameters\",\n    value: function logParameters(sqlMsg, values) {\n      if (this.opts.namedPlaceholders) {\n        sqlMsg += '{';\n        var first = true;\n\n        for (var key in values) {\n          if (first) {\n            first = false;\n          } else {\n            sqlMsg += ',';\n          }\n\n          sqlMsg += \"'\" + key + \"':\";\n          var param = values[key];\n          sqlMsg = ResultSet.logParam(sqlMsg, param);\n\n          if (sqlMsg.length > this.opts.debugLen) {\n            sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\n            break;\n          }\n        }\n\n        sqlMsg += '}';\n      } else {\n        sqlMsg += '[';\n\n        for (var i = 0; i < values.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          var _param = values[i];\n          sqlMsg = ResultSet.logParam(sqlMsg, _param);\n\n          if (sqlMsg.length > this.opts.debugLen) {\n            sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\n            break;\n          }\n        }\n\n        sqlMsg += ']';\n      }\n\n      return sqlMsg;\n    }\n  }, {\n    key: \"readLocalInfile\",\n    value: function readLocalInfile(packet, out, opts, info) {\n      var _this2 = this;\n\n      packet.skip(1); //skip header\n\n      out.startPacket(this);\n      var fileName = packet.readStringRemaining();\n\n      if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\n        out.writeEmptyPacket();\n        var error = Errors.createError(\"LOCAL INFILE wrong filename. '\" + fileName + \"' doesn't correspond to query \" + this.sql + '. Query cancelled. Check for malicious server / proxy', false, info, '45034', Errors.ER_LOCAL_INFILE_WRONG_FILENAME);\n        process.nextTick(this.reject, error);\n        this.reject = null;\n        this.resolve = null;\n        return this.onPacketReceive = this.readResponsePacket;\n      } // this.sequenceNo = 2;\n      // this.compressSequenceNo = 2;\n\n\n      var stream = fs.createReadStream(fileName);\n      stream.on('error', function (err) {\n        out.writeEmptyPacket();\n        var error = Errors.createError('LOCAL INFILE command failed: ' + err.message, false, info, '22000', Errors.ER_LOCAL_INFILE_NOT_READABLE);\n        process.nextTick(_this2.reject, error);\n        _this2.reject = null;\n        _this2.resolve = null;\n      });\n      stream.on('data', function (chunk) {\n        out.writeBuffer(chunk, 0, chunk.length);\n      });\n      stream.on('end', function () {\n        if (!out.isEmpty()) {\n          out.flushBuffer(false);\n        }\n\n        out.writeEmptyPacket();\n      });\n      this.onPacketReceive = this.readResponsePacket;\n    }\n  }], [{\n    key: \"logParam\",\n    value: function logParam(sqlMsg, param) {\n      if (param === undefined || param === null) {\n        sqlMsg += param === undefined ? 'undefined' : 'null';\n      } else {\n        switch (param.constructor.name) {\n          case 'Buffer':\n            sqlMsg += '0x' + param.toString('hex', 0, Math.min(1024, param.length)) + '';\n            break;\n\n          case 'String':\n            sqlMsg += \"'\" + param + \"'\";\n            break;\n\n          case 'Date':\n            sqlMsg += getStringDate(param);\n            break;\n\n          case 'Object':\n            sqlMsg += JSON.stringify(param);\n            break;\n\n          default:\n            sqlMsg += param.toString();\n        }\n      }\n\n      return sqlMsg;\n    }\n  }]);\n\n  return ResultSet;\n}(Command);\n\nfunction getStringDate(param) {\n  return \"'\" + ('00' + (param.getMonth() + 1)).slice(-2) + '/' + ('00' + param.getDate()).slice(-2) + '/' + param.getFullYear() + ' ' + ('00' + param.getHours()).slice(-2) + ':' + ('00' + param.getMinutes()).slice(-2) + ':' + ('00' + param.getSeconds()).slice(-2) + '.' + ('000' + param.getMilliseconds()).slice(-3) + \"'\";\n}\n\nmodule.exports = ResultSet;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/resultset.js"],"names":["Command","require","ServerStatus","ColumnDefinition","Errors","fs","Parse","ResultSet","resolve","reject","_responseIndex","_rows","packet","out","opts","info","peek","readOKPacket","err","readError","displaySql","stack","status","STATUS_IN_TRANS","throwError","readLocalInfile","readResultSet","_columnCount","readUnsignedLength","_getValue","typeCast","readCastValue","readRowData","push","_columns","onPacketReceive","readColumn","connOpts","cmdOpts","timeout","checkDuplicate","undefined","rowsAsArray","nestTables","dateStrings","tz","localTz","namedPlaceholders","maxAllowedPacket","supportBigNumbers","permitSetMultiParamEntries","bigNumberStrings","rs","parseOkPacket","MORE_RESULTS_EXISTS","readResponsePacket","success","skip","statementId","readInt32","columnNo","readUInt16","parameterNo","skipColumnsPacket","skipParameterPacket","ER_UNEXPECTED_PACKET","eofDeprecated","skipEofPacket","val","successEnd","length","column","parseColumn","parseRow","parseRowAsArray","tableHeader","Array","parseRowStd","i","table","name","checkDuplicates","parseRowNested","checkNestTablesDuplicates","emit","readResultSetRow","readIntermediateEOF","indexOf","dupes","reduce","acc","v","arr","concat","throwUnexpectedError","ER_DUPLICATE_FIELD","j","throwNewError","ER_EOF_EXPECTED","isOutParameter","PS_OUT_PARAMS","row","skipLengthCodedNumber","metaAsArray","_meta","meta","handleNewRows","initialValues","sql","debugLen","substring","sqlMsg","logParameters","values","first","key","param","logParam","substr","startPacket","fileName","readStringRemaining","validateFileName","writeEmptyPacket","error","createError","ER_LOCAL_INFILE_WRONG_FILENAME","process","nextTick","stream","createReadStream","on","message","ER_LOCAL_INFILE_NOT_READABLE","chunk","writeBuffer","isEmpty","flushBuffer","constructor","toString","Math","min","getStringDate","JSON","stringify","getMonth","slice","getDate","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst Command = require('./command');\r\nconst ServerStatus = require('../const/server-status');\r\nconst ColumnDefinition = require('./column-definition');\r\nconst Errors = require('../misc/errors');\r\nconst fs = require('fs');\r\nconst Parse = require('../misc/parse');\r\n\r\n/**\r\n * handle COM_QUERY / COM_STMT_EXECUTE results\r\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\r\n */\r\nclass ResultSet extends Command {\r\n  constructor(resolve, reject) {\r\n    super(resolve, reject);\r\n    this._responseIndex = 0;\r\n    this._rows = [];\r\n  }\r\n\r\n  /**\r\n   * Read Query response packet.\r\n   * packet can be :\r\n   * - a result-set\r\n   * - an ERR_Packet\r\n   * - a OK_Packet\r\n   * - LOCAL_INFILE Packet\r\n   *\r\n   * @param packet  query response\r\n   * @param out     output writer\r\n   * @param opts    connection options\r\n   * @param info    connection info\r\n   */\r\n  readResponsePacket(packet, out, opts, info) {\r\n    switch (packet.peek()) {\r\n      //*********************************************************************************************************\r\n      //* OK response\r\n      //*********************************************************************************************************\r\n      case 0x00:\r\n        return this.readOKPacket(packet, out, opts, info);\r\n\r\n      //*********************************************************************************************************\r\n      //* ERROR response\r\n      //*********************************************************************************************************\r\n      case 0xff:\r\n        const err = packet.readError(info, this.displaySql(), this.stack);\r\n        //force in transaction status, since query will have created a transaction if autocommit is off\r\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\r\n        info.status |= ServerStatus.STATUS_IN_TRANS;\r\n        return this.throwError(err, info);\r\n\r\n      //*********************************************************************************************************\r\n      //* LOCAL INFILE response\r\n      //*********************************************************************************************************\r\n      case 0xfb:\r\n        return this.readLocalInfile(packet, out, opts, info);\r\n\r\n      //*********************************************************************************************************\r\n      //* ResultSet\r\n      //*********************************************************************************************************\r\n      default:\r\n        return this.readResultSet(packet);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read result-set packets :\r\n   * see https://mariadb.com/kb/en/library/resultset/\r\n   *\r\n   * @param packet    Column count packet\r\n   * @returns {ResultSet.readColumn} next packet handler\r\n   */\r\n  readResultSet(packet) {\r\n    this._columnCount = packet.readUnsignedLength();\r\n    this._getValue = this.opts.typeCast ? this.readCastValue : this.readRowData;\r\n    this._rows.push([]);\r\n    this._columns = [];\r\n\r\n    this.onPacketReceive = this.readColumn;\r\n  }\r\n\r\n  /**\r\n   * Assign global configuration option used by result-set to current query option.\r\n   * a little faster than Object.assign() since doest copy all information\r\n   *\r\n   * @param connOpts  connection global configuration\r\n   * @param cmdOpts   specific command options\r\n   */\r\n  configAssign(connOpts, cmdOpts) {\r\n    if (!cmdOpts) {\r\n      this.opts = connOpts;\r\n      return;\r\n    }\r\n    this.opts = {\r\n      timeout: cmdOpts.timeout,\r\n      checkDuplicate:\r\n        cmdOpts.checkDuplicate != undefined ? cmdOpts.checkDuplicate : connOpts.checkDuplicate,\r\n      typeCast: cmdOpts.typeCast != undefined ? cmdOpts.typeCast : connOpts.typeCast,\r\n      rowsAsArray: cmdOpts.rowsAsArray != undefined ? cmdOpts.rowsAsArray : connOpts.rowsAsArray,\r\n      nestTables: cmdOpts.nestTables != undefined ? cmdOpts.nestTables : connOpts.nestTables,\r\n      dateStrings: cmdOpts.dateStrings != undefined ? cmdOpts.dateStrings : connOpts.dateStrings,\r\n      tz: cmdOpts.tz != undefined ? cmdOpts.tz : connOpts.tz,\r\n      localTz: cmdOpts.localTz != undefined ? cmdOpts.localTz : connOpts.localTz,\r\n      namedPlaceholders:\r\n        cmdOpts.namedPlaceholders != undefined\r\n          ? cmdOpts.namedPlaceholders\r\n          : connOpts.namedPlaceholders,\r\n      maxAllowedPacket:\r\n        cmdOpts.maxAllowedPacket != undefined\r\n          ? cmdOpts.maxAllowedPacket\r\n          : connOpts.maxAllowedPacket,\r\n      supportBigNumbers:\r\n        cmdOpts.supportBigNumbers != undefined\r\n          ? cmdOpts.supportBigNumbers\r\n          : connOpts.supportBigNumbers,\r\n      permitSetMultiParamEntries:\r\n        cmdOpts.permitSetMultiParamEntries != undefined\r\n          ? cmdOpts.permitSetMultiParamEntries\r\n          : connOpts.permitSetMultiParamEntries,\r\n      bigNumberStrings:\r\n        cmdOpts.bigNumberStrings != undefined ? cmdOpts.bigNumberStrings : connOpts.bigNumberStrings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Read OK_Packet.\r\n   * see https://mariadb.com/kb/en/library/ok_packet/\r\n   *\r\n   * @param packet    OK_Packet\r\n   * @param opts      connection options\r\n   * @param info      connection information\r\n   * @param out       output writer\r\n   * @returns {*}     null or {Resultset.readResponsePacket} in case of multi-result-set\r\n   */\r\n  readOKPacket(packet, out, opts, info) {\r\n    const rs = Command.parseOkPacket(packet, out, opts, info);\r\n    this._rows.push(rs);\r\n\r\n    if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\r\n      this._responseIndex++;\r\n      return (this.onPacketReceive = this.readResponsePacket);\r\n    }\r\n    this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\r\n  }\r\n\r\n  /**\r\n   * Read COM_STMT_PREPARE response Packet.\r\n   * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\r\n   *\r\n   * @param packet    COM_STMT_PREPARE_OK packet\r\n   * @param opts      connection options\r\n   * @param info      connection information\r\n   * @param out       output writer\r\n   * @returns {*}     null or {Resultset.readResponsePacket} in case of multi-result-set\r\n   */\r\n  readPrepareResultPacket(packet, out, opts, info) {\r\n    switch (packet.peek()) {\r\n      //*********************************************************************************************************\r\n      //* OK response\r\n      //*********************************************************************************************************\r\n      case 0x00:\r\n        packet.skip(1); //skip header\r\n        this.statementId = packet.readInt32();\r\n        this.columnNo = packet.readUInt16();\r\n        this.parameterNo = packet.readUInt16();\r\n\r\n        if (this.columnNo > 0) return (this.onPacketReceive = this.skipColumnsPacket);\r\n        if (this.parameterNo > 0) return (this.onPacketReceive = this.skipParameterPacket);\r\n        return this.success();\r\n\r\n      //*********************************************************************************************************\r\n      //* ERROR response\r\n      //*********************************************************************************************************\r\n      case 0xff:\r\n        const err = packet.readError(info, this.displaySql(), this.stack);\r\n        //force in transaction status, since query will have created a transaction if autocommit is off\r\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\r\n        info.status |= ServerStatus.STATUS_IN_TRANS;\r\n        this.onPacketReceive = this.readResponsePacket;\r\n        return this.throwError(err, info);\r\n\r\n      //*********************************************************************************************************\r\n      //* Unexpected response\r\n      //*********************************************************************************************************\r\n      default:\r\n        info.status |= ServerStatus.STATUS_IN_TRANS;\r\n        this.onPacketReceive = this.readResponsePacket;\r\n        return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\r\n    }\r\n  }\r\n\r\n  skipColumnsPacket(packet, out, opts, info) {\r\n    this.columnNo--;\r\n    if (this.columnNo === 0) {\r\n      if (info.eofDeprecated) {\r\n        if (this.parameterNo > 0) return (this.onPacketReceive = this.skipParameterPacket);\r\n        this.success();\r\n      }\r\n      return (this.onPacketReceive = this.skipEofPacket);\r\n    }\r\n  }\r\n\r\n  skipEofPacket(packet, out, opts, info) {\r\n    if (this.parameterNo > 0) return (this.onPacketReceive = this.skipParameterPacket);\r\n    this.success();\r\n  }\r\n\r\n  skipParameterPacket(packet, out, opts, info) {\r\n    this.parameterNo--;\r\n    if (this.parameterNo === 0) {\r\n      if (info.eofDeprecated) return this.success();\r\n      return (this.onPacketReceive = this.skipEofPacket);\r\n    }\r\n  }\r\n\r\n  success(val) {\r\n    this.successEnd(val);\r\n    this._columns = null;\r\n    this._rows = null;\r\n  }\r\n\r\n  /**\r\n   * Read column information metadata\r\n   * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\r\n   *\r\n   * @param packet    column definition packet\r\n   * @param out       output writer\r\n   * @param opts      connection options\r\n   * @param info      connection information\r\n   * @returns {*}\r\n   */\r\n  readColumn(packet, out, opts, info) {\r\n    if (this._columns.length !== this._columnCount) {\r\n      const column = ColumnDefinition.parseColumn(packet);\r\n      this._columns.push(column);\r\n    }\r\n\r\n    // last column\r\n    if (this._columns.length === this._columnCount) {\r\n      if (this.opts.rowsAsArray) {\r\n        this.parseRow = this.parseRowAsArray;\r\n      } else {\r\n        this.tableHeader = new Array(this._columnCount);\r\n        if (this.opts.nestTables) {\r\n          this.parseRow = this.parseRowStd;\r\n          if (typeof this.opts.nestTables === 'string') {\r\n            for (let i = 0; i < this._columnCount; i++) {\r\n              this.tableHeader[i] =\r\n                this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\r\n            }\r\n            this.checkDuplicates();\r\n          } else if (this.opts.nestTables === true) {\r\n            this.parseRow = this.parseRowNested;\r\n            for (let i = 0; i < this._columnCount; i++) {\r\n              this.tableHeader[i] = [this._columns[i].table(), this._columns[i].name()];\r\n            }\r\n            this.checkNestTablesDuplicates();\r\n          }\r\n        } else {\r\n          this.parseRow = this.parseRowStd;\r\n          for (let i = 0; i < this._columnCount; i++) {\r\n            this.tableHeader[i] = this._columns[i].name();\r\n          }\r\n          this.checkDuplicates();\r\n        }\r\n      }\r\n\r\n      this.emit('fields', this._columns);\r\n\r\n      return (this.onPacketReceive = info.eofDeprecated\r\n        ? this.readResultSetRow\r\n        : this.readIntermediateEOF);\r\n    }\r\n  }\r\n\r\n  checkDuplicates() {\r\n    if (this.opts.checkDuplicate) {\r\n      for (let i = 0; i < this._columnCount; i++) {\r\n        if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\r\n          const dupes = this.tableHeader.reduce(\r\n            (acc, v, i, arr) =>\r\n              arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc,\r\n            []\r\n          );\r\n          this.throwUnexpectedError(\r\n            'Error in results, duplicate field name `' + dupes[0] + '`',\r\n            false,\r\n            null,\r\n            '42000',\r\n            Errors.ER_DUPLICATE_FIELD\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkNestTablesDuplicates() {\r\n    if (this.opts.checkDuplicate) {\r\n      for (let i = 0; i < this._columnCount; i++) {\r\n        for (let j = 0; j < i; j++) {\r\n          if (\r\n            this.tableHeader[j][0] === this.tableHeader[i][0] &&\r\n            this.tableHeader[j][1] === this.tableHeader[i][1]\r\n          ) {\r\n            this.throwUnexpectedError(\r\n              'Error in results, duplicate field name `' +\r\n                this.tableHeader[i][0] +\r\n                '`.`' +\r\n                this.tableHeader[i][1] +\r\n                '`',\r\n              false,\r\n              null,\r\n              '42000',\r\n              Errors.ER_DUPLICATE_FIELD\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read intermediate EOF.\r\n   * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\r\n   * see https://mariadb.com/kb/en/library/eof_packet/\r\n   *\r\n   * @param packet    EOF Packet\r\n   * @param out       output writer\r\n   * @param opts      connection options\r\n   * @param info      connection information\r\n   * @returns {*}\r\n   */\r\n  readIntermediateEOF(packet, out, opts, info) {\r\n    if (packet.peek() !== 0xfe) {\r\n      return this.throwNewError(\r\n        'Error in protocol, expected EOF packet',\r\n        true,\r\n        info,\r\n        '42000',\r\n        Errors.ER_EOF_EXPECTED\r\n      );\r\n    }\r\n\r\n    //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\r\n    //for OUT parameters. It must be checked here\r\n    //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\r\n    packet.skip(3);\r\n    info.status = packet.readUInt16();\r\n    this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\r\n\r\n    this.onPacketReceive = this.readResultSetRow;\r\n  }\r\n\r\n  handleNewRows(row) {\r\n    this._rows[this._responseIndex].push(row);\r\n  }\r\n\r\n  /**\r\n   * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\r\n   * or a result-set row\r\n   *\r\n   * @param packet    current packet\r\n   * @param out       output writer\r\n   * @param opts      connection options\r\n   * @param info      connection information\r\n   * @returns {*}\r\n   */\r\n  readResultSetRow(packet, out, opts, info) {\r\n    if (packet.peek() >= 0xfe) {\r\n      if (packet.peek() === 0xff) {\r\n        const err = packet.readError(info, this.displaySql(), this.stack);\r\n        //force in transaction status, since query will have created a transaction if autocommit is off\r\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\r\n        info.status |= ServerStatus.STATUS_IN_TRANS;\r\n        return this.throwError(err, info);\r\n      }\r\n\r\n      if (\r\n        (!info.eofDeprecated && packet.length() < 13) ||\r\n        (info.eofDeprecated && packet.length() < 0xffffff)\r\n      ) {\r\n        if (!info.eofDeprecated) {\r\n          packet.skip(3);\r\n          info.status = packet.readUInt16();\r\n        } else {\r\n          packet.skip(1); //skip header\r\n          packet.skipLengthCodedNumber(); //skip update count\r\n          packet.skipLengthCodedNumber(); //skip insert id\r\n          info.status = packet.readUInt16();\r\n        }\r\n\r\n        if (opts.metaAsArray) {\r\n          //return promise object as array :\r\n          // example for SELECT 1 =>\r\n          // [\r\n          //   [ {\"1\": 1} ],      //rows\r\n          //   [ColumnDefinition] //meta\r\n          // ]\r\n          if (this._responseIndex === 0) this._meta = [];\r\n          this._meta[this._responseIndex] = this._columns;\r\n\r\n          if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\r\n            this._responseIndex++;\r\n            return (this.onPacketReceive = this.readResponsePacket);\r\n          }\r\n          this.success(\r\n            this._responseIndex === 0 ? [this._rows[0], this._meta[0]] : [this._rows, this._meta]\r\n          );\r\n        } else {\r\n          //return promise object as rows that have meta property :\r\n          // example for SELECT 1 =>\r\n          // [\r\n          //   {\"1\": 1},\r\n          //   meta: [ColumnDefinition]\r\n          // ]\r\n          this._rows[this._responseIndex].meta = this._columns;\r\n          if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\r\n            this._responseIndex++;\r\n            return (this.onPacketReceive = this.readResponsePacket);\r\n          }\r\n          this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\r\n        }\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    const row = this.parseRow(this._columns, packet, opts);\r\n    this.handleNewRows(row);\r\n  }\r\n\r\n  /**\r\n   * Display current SQL with parameters (truncated if too big)\r\n   *\r\n   * @returns {string}\r\n   */\r\n  displaySql() {\r\n    if (this.opts && this.initialValues) {\r\n      if (this.sql.length > this.opts.debugLen) {\r\n        return 'sql: ' + this.sql.substring(0, this.opts.debugLen) + '...';\r\n      }\r\n\r\n      let sqlMsg = 'sql: ' + this.sql + ' - parameters:';\r\n      return this.logParameters(sqlMsg, this.initialValues);\r\n    }\r\n    return 'sql: ' + this.sql + ' - parameters:[]';\r\n  }\r\n\r\n  logParameters(sqlMsg, values) {\r\n    if (this.opts.namedPlaceholders) {\r\n      sqlMsg += '{';\r\n      let first = true;\r\n      for (let key in values) {\r\n        if (first) {\r\n          first = false;\r\n        } else {\r\n          sqlMsg += ',';\r\n        }\r\n        sqlMsg += \"'\" + key + \"':\";\r\n        let param = values[key];\r\n        sqlMsg = ResultSet.logParam(sqlMsg, param);\r\n        if (sqlMsg.length > this.opts.debugLen) {\r\n          sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\r\n          break;\r\n        }\r\n      }\r\n      sqlMsg += '}';\r\n    } else {\r\n      sqlMsg += '[';\r\n      for (let i = 0; i < values.length; i++) {\r\n        if (i !== 0) sqlMsg += ',';\r\n        let param = values[i];\r\n        sqlMsg = ResultSet.logParam(sqlMsg, param);\r\n        if (sqlMsg.length > this.opts.debugLen) {\r\n          sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\r\n          break;\r\n        }\r\n      }\r\n      sqlMsg += ']';\r\n    }\r\n    return sqlMsg;\r\n  }\r\n\r\n  readLocalInfile(packet, out, opts, info) {\r\n    packet.skip(1); //skip header\r\n    out.startPacket(this);\r\n\r\n    const fileName = packet.readStringRemaining();\r\n\r\n    if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\r\n      out.writeEmptyPacket();\r\n      const error = Errors.createError(\r\n        \"LOCAL INFILE wrong filename. '\" +\r\n          fileName +\r\n          \"' doesn't correspond to query \" +\r\n          this.sql +\r\n          '. Query cancelled. Check for malicious server / proxy',\r\n        false,\r\n        info,\r\n        '45034',\r\n        Errors.ER_LOCAL_INFILE_WRONG_FILENAME\r\n      );\r\n\r\n      process.nextTick(this.reject, error);\r\n      this.reject = null;\r\n      this.resolve = null;\r\n      return (this.onPacketReceive = this.readResponsePacket);\r\n    }\r\n\r\n    // this.sequenceNo = 2;\r\n    // this.compressSequenceNo = 2;\r\n    const stream = fs.createReadStream(fileName);\r\n    stream.on('error', err => {\r\n      out.writeEmptyPacket();\r\n      const error = Errors.createError(\r\n        'LOCAL INFILE command failed: ' + err.message,\r\n        false,\r\n        info,\r\n        '22000',\r\n        Errors.ER_LOCAL_INFILE_NOT_READABLE\r\n      );\r\n      process.nextTick(this.reject, error);\r\n      this.reject = null;\r\n      this.resolve = null;\r\n    });\r\n    stream.on('data', chunk => {\r\n      out.writeBuffer(chunk, 0, chunk.length);\r\n    });\r\n    stream.on('end', () => {\r\n      if (!out.isEmpty()) {\r\n        out.flushBuffer(false);\r\n      }\r\n      out.writeEmptyPacket();\r\n    });\r\n    this.onPacketReceive = this.readResponsePacket;\r\n  }\r\n\r\n  static logParam(sqlMsg, param) {\r\n    if (param === undefined || param === null) {\r\n      sqlMsg += param === undefined ? 'undefined' : 'null';\r\n    } else {\r\n      switch (param.constructor.name) {\r\n        case 'Buffer':\r\n          sqlMsg += '0x' + param.toString('hex', 0, Math.min(1024, param.length)) + '';\r\n          break;\r\n\r\n        case 'String':\r\n          sqlMsg += \"'\" + param + \"'\";\r\n          break;\r\n\r\n        case 'Date':\r\n          sqlMsg += getStringDate(param);\r\n          break;\r\n\r\n        case 'Object':\r\n          sqlMsg += JSON.stringify(param);\r\n          break;\r\n\r\n        default:\r\n          sqlMsg += param.toString();\r\n      }\r\n    }\r\n    return sqlMsg;\r\n  }\r\n}\r\n\r\nfunction getStringDate(param) {\r\n  return (\r\n    \"'\" +\r\n    ('00' + (param.getMonth() + 1)).slice(-2) +\r\n    '/' +\r\n    ('00' + param.getDate()).slice(-2) +\r\n    '/' +\r\n    param.getFullYear() +\r\n    ' ' +\r\n    ('00' + param.getHours()).slice(-2) +\r\n    ':' +\r\n    ('00' + param.getMinutes()).slice(-2) +\r\n    ':' +\r\n    ('00' + param.getSeconds()).slice(-2) +\r\n    '.' +\r\n    ('000' + param.getMilliseconds()).slice(-3) +\r\n    \"'\"\r\n  );\r\n}\r\n\r\nmodule.exports = ResultSet;\r\n"]},"metadata":{},"sourceType":"script"}