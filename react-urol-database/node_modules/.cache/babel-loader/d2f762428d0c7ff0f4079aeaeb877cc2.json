{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Queue = require('denque');\n\nvar _addPacket = function _addPacket(msg) {\n  this.lastPackets.push(msg);\n\n  while (this.lastPackets.size() > 32) {\n    this.lastPackets.shift();\n  }\n};\n\nvar _getLastPackets = function _getLastPackets() {\n  var output = '';\n  var packet;\n\n  while (packet = this.lastPackets.shift()) {\n    output += '\\n' + packet;\n  }\n\n  return output;\n};\n\nvar ConnectionInformation =\n/*#__PURE__*/\nfunction () {\n  function ConnectionInformation() {\n    _classCallCheck(this, ConnectionInformation);\n\n    this.threadId = -1;\n    this.status = null;\n    this.serverVersion = null;\n    this.serverCapabilities = -1;\n  }\n\n  _createClass(ConnectionInformation, [{\n    key: \"addPacket\",\n    value: function addPacket(msg) {}\n  }, {\n    key: \"getLastPackets\",\n    value: function getLastPackets() {\n      return '';\n    }\n  }, {\n    key: \"enableLogPacket\",\n    value: function enableLogPacket() {\n      this.lastPackets = new Queue();\n      this.addPacket = _addPacket.bind(this);\n      this.getLastPackets = _getLastPackets.bind(this);\n    }\n  }, {\n    key: \"hasMinVersion\",\n    value: function hasMinVersion(major, minor, patch) {\n      if (!this.serverVersion) throw new Error('cannot know if server version until connection is established');\n      if (!major) throw new Error('a major version must be set');\n      if (!minor) minor = 0;\n      if (!patch) patch = 0;\n      var ver = this.serverVersion;\n      return ver.major > major || ver.major === major && ver.minor > minor || ver.major === major && ver.minor === minor && ver.patch >= patch;\n    }\n  }, {\n    key: \"isMariaDB\",\n    value: function isMariaDB() {\n      if (!this.serverVersion) throw new Error('cannot know if server is MariaDB until connection is established');\n      return this.serverVersion.mariaDb;\n    }\n    /**\n     * Parse raw info to set server major/minor/patch values\n     * @param info\n     */\n\n  }], [{\n    key: \"parseVersionString\",\n    value: function parseVersionString(info) {\n      var car;\n      var offset = 0;\n      var type = 0;\n      var val = 0;\n\n      for (; offset < info.serverVersion.raw.length; offset++) {\n        car = info.serverVersion.raw.charCodeAt(offset);\n\n        if (car < 48 || car > 57) {\n          switch (type) {\n            case 0:\n              info.serverVersion.major = val;\n              break;\n\n            case 1:\n              info.serverVersion.minor = val;\n              break;\n\n            case 2:\n              info.serverVersion.patch = val;\n              return;\n          }\n\n          type++;\n          val = 0;\n        } else {\n          val = val * 10 + car - 48;\n        }\n      } //serverVersion finished by number like \"5.5.57\", assign patchVersion\n\n\n      if (type === 2) info.serverVersion.patch = val;\n    }\n  }]);\n\n  return ConnectionInformation;\n}();\n\nmodule.exports = ConnectionInformation;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/misc/connection-information.js"],"names":["Queue","require","_addPacket","msg","lastPackets","push","size","shift","_getLastPackets","output","packet","ConnectionInformation","threadId","status","serverVersion","serverCapabilities","addPacket","bind","getLastPackets","major","minor","patch","Error","ver","mariaDb","info","car","offset","type","val","raw","length","charCodeAt","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Queue = require('denque');\n\nconst _addPacket = function(msg) {\n  this.lastPackets.push(msg);\n  while (this.lastPackets.size() > 32) this.lastPackets.shift();\n};\n\nconst _getLastPackets = function() {\n  let output = '';\n  let packet;\n  while ((packet = this.lastPackets.shift())) {\n    output += '\\n' + packet;\n  }\n  return output;\n};\n\nclass ConnectionInformation {\n  constructor() {\n    this.threadId = -1;\n    this.status = null;\n    this.serverVersion = null;\n    this.serverCapabilities = -1;\n  }\n\n  addPacket(msg) {}\n\n  getLastPackets() {\n    return '';\n  }\n\n  enableLogPacket() {\n    this.lastPackets = new Queue();\n    this.addPacket = _addPacket.bind(this);\n    this.getLastPackets = _getLastPackets.bind(this);\n  }\n\n  hasMinVersion(major, minor, patch) {\n    if (!this.serverVersion)\n      throw new Error('cannot know if server version until connection is established');\n\n    if (!major) throw new Error('a major version must be set');\n\n    if (!minor) minor = 0;\n    if (!patch) patch = 0;\n\n    let ver = this.serverVersion;\n    return (\n      ver.major > major ||\n      (ver.major === major && ver.minor > minor) ||\n      (ver.major === major && ver.minor === minor && ver.patch >= patch)\n    );\n  }\n\n  isMariaDB() {\n    if (!this.serverVersion)\n      throw new Error('cannot know if server is MariaDB until connection is established');\n    return this.serverVersion.mariaDb;\n  }\n\n  /**\n   * Parse raw info to set server major/minor/patch values\n   * @param info\n   */\n  static parseVersionString(info) {\n    let car;\n    let offset = 0;\n    let type = 0;\n    let val = 0;\n\n    for (; offset < info.serverVersion.raw.length; offset++) {\n      car = info.serverVersion.raw.charCodeAt(offset);\n      if (car < 48 || car > 57) {\n        switch (type) {\n          case 0:\n            info.serverVersion.major = val;\n            break;\n          case 1:\n            info.serverVersion.minor = val;\n            break;\n          case 2:\n            info.serverVersion.patch = val;\n            return;\n        }\n        type++;\n        val = 0;\n      } else {\n        val = val * 10 + car - 48;\n      }\n    }\n    //serverVersion finished by number like \"5.5.57\", assign patchVersion\n    if (type === 2) info.serverVersion.patch = val;\n  }\n}\n\nmodule.exports = ConnectionInformation;\n"]},"metadata":{},"sourceType":"script"}