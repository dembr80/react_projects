{"ast":null,"code":"'use strict';\n\nvar _this = this;\n\nvar Long = require('long');\n\nvar hexArray = '0123456789ABCDEF'.split('');\n\nvar Errors = require('../misc/errors');\n\nvar CommonText = require('../cmd/common-text-cmd');\n\nvar Iconv = require('iconv-lite');\n/**\n * Write bytes/hexadecimal value of a byte array to a string.\n * String output example :\n * 38 00 00 00 03 63 72 65  61 74 65 20 74 61 62 6C     8....create tabl\n * 65 20 42 6C 6F 62 54 65  73 74 63 6C 6F 62 74 65     e BlobTestclobte\n * 73 74 32 20 28 73 74 72  6D 20 74 65 78 74 29 20     st2 (strm text)\n * 43 48 41 52 53 45 54 20  75 74 66 38                 CHARSET utf8\n */\n\n\nmodule.exports.log = function (opts, buf, off, end, header) {\n  var out = [];\n  if (!buf) return '';\n  if (off === undefined || off === null) off = 0;\n  if (end === undefined || end === null) end = buf.length;\n  var asciiValue = new Array(16);\n  asciiValue[8] = ' ';\n  var useHeader = header !== undefined;\n  var offset = off || 0;\n  var maxLgh = Math.min(useHeader ? opts.debugLen - header.length : opts.debugLen, end - offset);\n  var isLimited = end - offset > maxLgh;\n  var byteValue;\n  var posHexa = 0;\n  var pos = 0;\n  out.push('+--------------------------------------------------+\\n' + '|  0  1  2  3  4  5  6  7   8  9  a  b  c  d  e  f |\\n' + '+--------------------------------------------------+------------------+\\n');\n\n  if (useHeader) {\n    while (pos < header.length) {\n      if (posHexa === 0) out.push('| ');\n      byteValue = header[pos++] & 0xff;\n      out.push(hexArray[byteValue >>> 4], hexArray[byteValue & 0x0f], ' ');\n      asciiValue[posHexa++] = byteValue > 31 && byteValue < 127 ? String.fromCharCode(byteValue) : '.';\n      if (posHexa === 8) out.push(' ');\n    }\n  }\n\n  pos = offset;\n\n  while (pos < maxLgh + offset) {\n    if (posHexa === 0) out.push('| ');\n    byteValue = buf[pos] & 0xff;\n    out.push(hexArray[byteValue >>> 4], hexArray[byteValue & 0x0f], ' ');\n    asciiValue[posHexa++] = byteValue > 31 && byteValue < 127 ? String.fromCharCode(byteValue) : '.';\n    if (posHexa === 8) out.push(' ');\n\n    if (posHexa === 16) {\n      out.push('| ', asciiValue.join(''), ' |\\n');\n      posHexa = 0;\n    }\n\n    pos++;\n  }\n\n  var remaining = posHexa;\n\n  if (remaining > 0) {\n    if (remaining < 8) {\n      for (; remaining < 8; remaining++) {\n        out.push('   ');\n        asciiValue[posHexa++] = ' ';\n      }\n\n      out.push(' ');\n    }\n\n    for (; remaining < 16; remaining++) {\n      out.push('   ');\n      asciiValue[posHexa++] = ' ';\n    }\n\n    out.push('| ', asciiValue.join(''), isLimited ? ' |...\\n' : ' |\\n');\n  } else if (isLimited) {\n    out[out.length - 1] = ' |...\\n';\n  }\n\n  out.push('+--------------------------------------------------+------------------+\\n');\n  return out.join('');\n};\n\nmodule.exports.escapeId = function (opts, info, value) {\n  if (!value || value === '') {\n    throw Errors.createError('Cannot escape empty ID value', false, info, '0A000', Errors.ER_NULL_ESCAPEID);\n  }\n\n  if (value.includes(\"\\0\")) {\n    throw Errors.createError('Cannot escape ID with null character (u0000)', false, info, '0A000', Errors.ER_NULL_CHAR_ESCAPEID);\n  } // always return escaped value, event when there is no special characters\n  // to permit working with reserved words\n\n\n  if (value.match(/^`.+`$/g)) {\n    // already escaped\n    return value;\n  }\n\n  return '`' + value.replace(/`/g, '``') + '`';\n};\n\nmodule.exports.escape = function (opts, info, value) {\n  if (value === undefined || value === null) return 'NULL';\n\n  switch (typeof value) {\n    case 'boolean':\n      return value ? 'true' : 'false';\n\n    case 'number':\n      return '' + value;\n\n    case 'object':\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return opts.tz ? CommonText.getTimezoneDate(value, opts) : CommonText.getLocalDate(value, opts);\n      } else if (Buffer.isBuffer(value)) {\n        var stValue;\n\n        if (Buffer.isEncoding(opts.collation.charset)) {\n          stValue = value.toString(opts.collation.charset, 0, value.length);\n        } else {\n          stValue = Iconv.decode(value, opts.collation.charset);\n        }\n\n        return \"_binary'\" + escapeString(stValue) + \"'\";\n      } else if (typeof value.toSqlString === 'function') {\n        return \"'\" + escapeString(String(value.toSqlString())) + \"'\";\n      } else if (Long.isLong(value)) {\n        return value.toString();\n      } else if (Array.isArray(value)) {\n        var out = '(';\n\n        for (var i = 0; i < value.length; i++) {\n          if (i !== 0) out += ',';\n          out += _this.escape(opts, info, value[i]);\n        }\n\n        out += ')';\n        return out;\n      } else {\n        if (value.type != null && ['Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon', 'GeometryCollection'].includes(value.type)) {\n          //GeoJSON format.\n          var prefix = info && (info.isMariaDB() && info.hasMinVersion(10, 1, 4) || !info.isMariaDB() && info.hasMinVersion(5, 7, 6)) ? 'ST_' : '';\n\n          switch (value.type) {\n            case 'Point':\n              return prefix + \"PointFromText('POINT(\" + CommonText.geoPointToString(value.coordinates) + \")')\";\n\n            case 'LineString':\n              return prefix + \"LineFromText('LINESTRING(\" + CommonText.geoArrayPointToString(value.coordinates) + \")')\";\n\n            case 'Polygon':\n              return prefix + \"PolygonFromText('POLYGON(\" + CommonText.geoMultiArrayPointToString(value.coordinates) + \")')\";\n\n            case 'MultiPoint':\n              return prefix + \"MULTIPOINTFROMTEXT('MULTIPOINT(\" + CommonText.geoArrayPointToString(value.coordinates) + \")')\";\n\n            case 'MultiLineString':\n              return prefix + \"MLineFromText('MULTILINESTRING(\" + CommonText.geoMultiArrayPointToString(value.coordinates) + \")')\";\n\n            case 'MultiPolygon':\n              return prefix + \"MPolyFromText('MULTIPOLYGON(\" + CommonText.geoMultiPolygonToString(value.coordinates) + \")')\";\n\n            case 'GeometryCollection':\n              return prefix + \"GeomCollFromText('GEOMETRYCOLLECTION(\" + CommonText.geometricCollectionToString(value.geometries) + \")')\";\n          }\n        } else {\n          if (opts.permitSetMultiParamEntries) {\n            var _out = '';\n            var first = true;\n\n            for (var key in value) {\n              var val = value[key];\n              if (typeof val === 'function') continue;\n\n              if (first) {\n                first = false;\n              } else {\n                _out += ',';\n              }\n\n              _out += '`' + key + '`=';\n              _out += _this.escape(opts, info, val);\n            }\n\n            if (_out === '') return \"'\" + escapeString(JSON.stringify(value)) + \"'\";\n            return _out;\n          } else {\n            return \"'\" + escapeString(JSON.stringify(value)) + \"'\";\n          }\n        }\n      }\n\n    default:\n      return \"'\" + escapeString(value) + \"'\";\n  }\n}; // see https://mariadb.com/kb/en/library/string-literals/\n\n\nvar LITTERAL_ESCAPE = {\n  \"\\0\": '\\\\0',\n  \"'\": \"\\\\'\",\n  '\"': '\\\\\"',\n  '\\b': '\\\\b',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"\\x1A\": '\\\\Z',\n  '\\\\': '\\\\\\\\'\n};\n\nvar escapeString = function escapeString(val) {\n  var pattern = /[\\u0000'\"\\b\\n\\r\\t\\u001A\\\\]/g;\n  var offset = 0;\n  var escaped = '';\n  var match;\n\n  while (match = pattern.exec(val)) {\n    escaped += val.substring(offset, match.index);\n    escaped += LITTERAL_ESCAPE[match[0]];\n    offset = pattern.lastIndex;\n  }\n\n  if (offset === 0) {\n    return val;\n  }\n\n  if (offset < val.length) {\n    escaped += val.substring(offset);\n  }\n\n  return escaped;\n};","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/misc/utils.js"],"names":["Long","require","hexArray","split","Errors","CommonText","Iconv","module","exports","log","opts","buf","off","end","header","out","undefined","length","asciiValue","Array","useHeader","offset","maxLgh","Math","min","debugLen","isLimited","byteValue","posHexa","pos","push","String","fromCharCode","join","remaining","escapeId","info","value","createError","ER_NULL_ESCAPEID","includes","ER_NULL_CHAR_ESCAPEID","match","replace","escape","Object","prototype","toString","call","tz","getTimezoneDate","getLocalDate","Buffer","isBuffer","stValue","isEncoding","collation","charset","decode","escapeString","toSqlString","isLong","isArray","i","type","prefix","isMariaDB","hasMinVersion","geoPointToString","coordinates","geoArrayPointToString","geoMultiArrayPointToString","geoMultiPolygonToString","geometricCollectionToString","geometries","permitSetMultiParamEntries","first","key","val","JSON","stringify","LITTERAL_ESCAPE","pattern","escaped","exec","substring","index","lastIndex"],"mappings":"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","sourcesContent":["'use strict';\nconst Long = require('long');\nconst hexArray = '0123456789ABCDEF'.split('');\nconst Errors = require('../misc/errors');\nconst CommonText = require('../cmd/common-text-cmd');\nconst Iconv = require('iconv-lite');\n\n/**\n * Write bytes/hexadecimal value of a byte array to a string.\n * String output example :\n * 38 00 00 00 03 63 72 65  61 74 65 20 74 61 62 6C     8....create tabl\n * 65 20 42 6C 6F 62 54 65  73 74 63 6C 6F 62 74 65     e BlobTestclobte\n * 73 74 32 20 28 73 74 72  6D 20 74 65 78 74 29 20     st2 (strm text)\n * 43 48 41 52 53 45 54 20  75 74 66 38                 CHARSET utf8\n */\nmodule.exports.log = function(opts, buf, off, end, header) {\n  let out = [];\n  if (!buf) return '';\n  if (off === undefined || off === null) off = 0;\n  if (end === undefined || end === null) end = buf.length;\n  let asciiValue = new Array(16);\n  asciiValue[8] = ' ';\n\n  let useHeader = header !== undefined;\n  let offset = off || 0;\n  const maxLgh = Math.min(useHeader ? opts.debugLen - header.length : opts.debugLen, end - offset);\n  const isLimited = end - offset > maxLgh;\n  let byteValue;\n  let posHexa = 0;\n  let pos = 0;\n\n  out.push(\n    '+--------------------------------------------------+\\n' +\n      '|  0  1  2  3  4  5  6  7   8  9  a  b  c  d  e  f |\\n' +\n      '+--------------------------------------------------+------------------+\\n'\n  );\n\n  if (useHeader) {\n    while (pos < header.length) {\n      if (posHexa === 0) out.push('| ');\n      byteValue = header[pos++] & 0xff;\n      out.push(hexArray[byteValue >>> 4], hexArray[byteValue & 0x0f], ' ');\n      asciiValue[posHexa++] =\n        byteValue > 31 && byteValue < 127 ? String.fromCharCode(byteValue) : '.';\n      if (posHexa === 8) out.push(' ');\n    }\n  }\n\n  pos = offset;\n  while (pos < maxLgh + offset) {\n    if (posHexa === 0) out.push('| ');\n    byteValue = buf[pos] & 0xff;\n\n    out.push(hexArray[byteValue >>> 4], hexArray[byteValue & 0x0f], ' ');\n\n    asciiValue[posHexa++] =\n      byteValue > 31 && byteValue < 127 ? String.fromCharCode(byteValue) : '.';\n\n    if (posHexa === 8) out.push(' ');\n    if (posHexa === 16) {\n      out.push('| ', asciiValue.join(''), ' |\\n');\n      posHexa = 0;\n    }\n    pos++;\n  }\n\n  let remaining = posHexa;\n  if (remaining > 0) {\n    if (remaining < 8) {\n      for (; remaining < 8; remaining++) {\n        out.push('   ');\n        asciiValue[posHexa++] = ' ';\n      }\n      out.push(' ');\n    }\n\n    for (; remaining < 16; remaining++) {\n      out.push('   ');\n      asciiValue[posHexa++] = ' ';\n    }\n\n    out.push('| ', asciiValue.join(''), isLimited ? ' |...\\n' : ' |\\n');\n  } else if (isLimited) {\n    out[out.length - 1] = ' |...\\n';\n  }\n  out.push('+--------------------------------------------------+------------------+\\n');\n  return out.join('');\n};\n\nmodule.exports.escapeId = (opts, info, value) => {\n  if (!value || value === '') {\n    throw Errors.createError(\n      'Cannot escape empty ID value',\n      false,\n      info,\n      '0A000',\n      Errors.ER_NULL_ESCAPEID\n    );\n  }\n  if (value.includes('\\u0000')) {\n    throw Errors.createError(\n      'Cannot escape ID with null character (u0000)',\n      false,\n      info,\n      '0A000',\n      Errors.ER_NULL_CHAR_ESCAPEID\n    );\n  }\n\n  // always return escaped value, event when there is no special characters\n  // to permit working with reserved words\n  if (value.match(/^`.+`$/g)) {\n    // already escaped\n    return value;\n  }\n  return '`' + value.replace(/`/g, '``') + '`';\n};\n\nmodule.exports.escape = (opts, info, value) => {\n  if (value === undefined || value === null) return 'NULL';\n\n  switch (typeof value) {\n    case 'boolean':\n      return value ? 'true' : 'false';\n    case 'number':\n      return '' + value;\n    case 'object':\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return opts.tz\n          ? CommonText.getTimezoneDate(value, opts)\n          : CommonText.getLocalDate(value, opts);\n      } else if (Buffer.isBuffer(value)) {\n        let stValue;\n        if (Buffer.isEncoding(opts.collation.charset)) {\n          stValue = value.toString(opts.collation.charset, 0, value.length);\n        } else {\n          stValue = Iconv.decode(value, opts.collation.charset);\n        }\n        return \"_binary'\" + escapeString(stValue) + \"'\";\n      } else if (typeof value.toSqlString === 'function') {\n        return \"'\" + escapeString(String(value.toSqlString())) + \"'\";\n      } else if (Long.isLong(value)) {\n        return value.toString();\n      } else if (Array.isArray(value)) {\n        let out = '(';\n        for (let i = 0; i < value.length; i++) {\n          if (i !== 0) out += ',';\n          out += this.escape(opts, info, value[i]);\n        }\n        out += ')';\n        return out;\n      } else {\n        if (\n          value.type != null &&\n          [\n            'Point',\n            'LineString',\n            'Polygon',\n            'MultiPoint',\n            'MultiLineString',\n            'MultiPolygon',\n            'GeometryCollection'\n          ].includes(value.type)\n        ) {\n          //GeoJSON format.\n          let prefix =\n            info &&\n            ((info.isMariaDB() && info.hasMinVersion(10, 1, 4)) ||\n              (!info.isMariaDB() && info.hasMinVersion(5, 7, 6)))\n              ? 'ST_'\n              : '';\n          switch (value.type) {\n            case 'Point':\n              return (\n                prefix +\n                \"PointFromText('POINT(\" +\n                CommonText.geoPointToString(value.coordinates) +\n                \")')\"\n              );\n\n            case 'LineString':\n              return (\n                prefix +\n                \"LineFromText('LINESTRING(\" +\n                CommonText.geoArrayPointToString(value.coordinates) +\n                \")')\"\n              );\n\n            case 'Polygon':\n              return (\n                prefix +\n                \"PolygonFromText('POLYGON(\" +\n                CommonText.geoMultiArrayPointToString(value.coordinates) +\n                \")')\"\n              );\n\n            case 'MultiPoint':\n              return (\n                prefix +\n                \"MULTIPOINTFROMTEXT('MULTIPOINT(\" +\n                CommonText.geoArrayPointToString(value.coordinates) +\n                \")')\"\n              );\n\n            case 'MultiLineString':\n              return (\n                prefix +\n                \"MLineFromText('MULTILINESTRING(\" +\n                CommonText.geoMultiArrayPointToString(value.coordinates) +\n                \")')\"\n              );\n\n            case 'MultiPolygon':\n              return (\n                prefix +\n                \"MPolyFromText('MULTIPOLYGON(\" +\n                CommonText.geoMultiPolygonToString(value.coordinates) +\n                \")')\"\n              );\n\n            case 'GeometryCollection':\n              return (\n                prefix +\n                \"GeomCollFromText('GEOMETRYCOLLECTION(\" +\n                CommonText.geometricCollectionToString(value.geometries) +\n                \")')\"\n              );\n          }\n        } else {\n          if (opts.permitSetMultiParamEntries) {\n            let out = '';\n            let first = true;\n            for (let key in value) {\n              const val = value[key];\n              if (typeof val === 'function') continue;\n              if (first) {\n                first = false;\n              } else {\n                out += ',';\n              }\n              out += '`' + key + '`=';\n              out += this.escape(opts, info, val);\n            }\n            if (out === '') return \"'\" + escapeString(JSON.stringify(value)) + \"'\";\n            return out;\n          } else {\n            return \"'\" + escapeString(JSON.stringify(value)) + \"'\";\n          }\n        }\n      }\n    default:\n      return \"'\" + escapeString(value) + \"'\";\n  }\n};\n\n// see https://mariadb.com/kb/en/library/string-literals/\nconst LITTERAL_ESCAPE = {\n  '\\u0000': '\\\\0',\n  \"'\": \"\\\\'\",\n  '\"': '\\\\\"',\n  '\\b': '\\\\b',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\u001A': '\\\\Z',\n  '\\\\': '\\\\\\\\'\n};\n\nconst escapeString = val => {\n  const pattern = /[\\u0000'\"\\b\\n\\r\\t\\u001A\\\\]/g;\n\n  let offset = 0;\n  let escaped = '';\n  let match;\n\n  while ((match = pattern.exec(val))) {\n    escaped += val.substring(offset, match.index);\n    escaped += LITTERAL_ESCAPE[match[0]];\n    offset = pattern.lastIndex;\n  }\n\n  if (offset === 0) {\n    return val;\n  }\n\n  if (offset < val.length) {\n    escaped += val.substring(offset);\n  }\n\n  return escaped;\n};\n"]},"metadata":{},"sourceType":"script"}