{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar PluginAuth = require('./plugin-auth');\n/**\n * Use PAM authentication\n */\n\n\nvar PamPasswordAuth =\n/*#__PURE__*/\nfunction (_PluginAuth) {\n  \"use strict\";\n\n  _inherits(PamPasswordAuth, _PluginAuth);\n\n  function PamPasswordAuth(packSeq, compressPackSeq, pluginData, resolve, reject, multiAuthResolver) {\n    var _this;\n\n    _classCallCheck(this, PamPasswordAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PamPasswordAuth).call(this, resolve, reject, multiAuthResolver));\n    _this.pluginData = pluginData;\n    _this.sequenceNo = packSeq;\n    _this.counter = 0;\n    return _this;\n  }\n\n  _createClass(PamPasswordAuth, [{\n    key: \"start\",\n    value: function start(out, opts, info) {\n      this.exchange(this.pluginData, out, opts, info);\n      this.onPacketReceive = this.response;\n    }\n  }, {\n    key: \"exchange\",\n    value: function exchange(buffer, out, opts, info) {\n      //conversation is :\n      // - first byte is information tell if question is a password (4) or clear text (2).\n      // - other bytes are the question to user\n      out.startPacket(this);\n      var pwd;\n\n      if (Array.isArray(opts.password)) {\n        pwd = opts.password[this.counter];\n        this.counter++;\n      } else {\n        pwd = opts.password;\n      }\n\n      if (pwd) out.writeString(pwd);\n      out.writeInt8(0);\n      out.flushBuffer(true);\n    }\n  }, {\n    key: \"response\",\n    value: function response(packet, out, opts, info) {\n      var marker = packet.peek();\n\n      switch (marker) {\n        //*********************************************************************************************************\n        //* OK_Packet and Err_Packet ending packet\n        //*********************************************************************************************************\n        case 0x00:\n        case 0xff:\n          this.emit('send_end');\n          return this.successSend(packet, out, opts, info);\n\n        default:\n          var promptData = packet.readBuffer();\n          this.exchange(promptData, out, opts, info);\n          this.onPacketReceive = this.response;\n      }\n    }\n  }]);\n\n  return PamPasswordAuth;\n}(PluginAuth);\n\nmodule.exports = PamPasswordAuth;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/handshake/auth/pam-password-auth.js"],"names":["PluginAuth","require","PamPasswordAuth","packSeq","compressPackSeq","pluginData","resolve","reject","multiAuthResolver","sequenceNo","counter","out","opts","info","exchange","onPacketReceive","response","buffer","startPacket","pwd","Array","isArray","password","writeString","writeInt8","flushBuffer","packet","marker","peek","emit","successSend","promptData","readBuffer","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;AAEA;;;;;IAGMC,e;;;;;;;AACJ,2BAAYC,OAAZ,EAAqBC,eAArB,EAAsCC,UAAtC,EAAkDC,OAAlD,EAA2DC,MAA3D,EAAmEC,iBAAnE,EAAsF;AAAA;;AAAA;;AACpF,yFAAMF,OAAN,EAAeC,MAAf,EAAuBC,iBAAvB;AACA,UAAKH,UAAL,GAAkBA,UAAlB;AACA,UAAKI,UAAL,GAAkBN,OAAlB;AACA,UAAKO,OAAL,GAAe,CAAf;AAJoF;AAKrF;;;;0BAEKC,G,EAAKC,I,EAAMC,I,EAAM;AACrB,WAAKC,QAAL,CAAc,KAAKT,UAAnB,EAA+BM,GAA/B,EAAoCC,IAApC,EAA0CC,IAA1C;AACA,WAAKE,eAAL,GAAuB,KAAKC,QAA5B;AACD;;;6BAEQC,M,EAAQN,G,EAAKC,I,EAAMC,I,EAAM;AAChC;AACA;AACA;AAEAF,MAAAA,GAAG,CAACO,WAAJ,CAAgB,IAAhB;AAEA,UAAIC,GAAJ;;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACU,QAAnB,CAAJ,EAAkC;AAChCH,QAAAA,GAAG,GAAGP,IAAI,CAACU,QAAL,CAAc,KAAKZ,OAAnB,CAAN;AACA,aAAKA,OAAL;AACD,OAHD,MAGO;AACLS,QAAAA,GAAG,GAAGP,IAAI,CAACU,QAAX;AACD;;AAED,UAAIH,GAAJ,EAASR,GAAG,CAACY,WAAJ,CAAgBJ,GAAhB;AACTR,MAAAA,GAAG,CAACa,SAAJ,CAAc,CAAd;AACAb,MAAAA,GAAG,CAACc,WAAJ,CAAgB,IAAhB;AACD;;;6BAEQC,M,EAAQf,G,EAAKC,I,EAAMC,I,EAAM;AAChC,UAAMc,MAAM,GAAGD,MAAM,CAACE,IAAP,EAAf;;AACA,cAAQD,MAAR;AACE;AACA;AACA;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACE,eAAKE,IAAL,CAAU,UAAV;AACA,iBAAO,KAAKC,WAAL,CAAiBJ,MAAjB,EAAyBf,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,CAAP;;AAEF;AACE,cAAIkB,UAAU,GAAGL,MAAM,CAACM,UAAP,EAAjB;AACA,eAAKlB,QAAL,CAAciB,UAAd,EAA0BpB,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC;AACA,eAAKE,eAAL,GAAuB,KAAKC,QAA5B;AAZJ;AAcD;;;;EAjD2BhB,U;;AAoD9BiC,MAAM,CAACC,OAAP,GAAiBhC,eAAjB","sourcesContent":["const PluginAuth = require('./plugin-auth');\n\n/**\n * Use PAM authentication\n */\nclass PamPasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, resolve, reject, multiAuthResolver) {\n    super(resolve, reject, multiAuthResolver);\n    this.pluginData = pluginData;\n    this.sequenceNo = packSeq;\n    this.counter = 0;\n  }\n\n  start(out, opts, info) {\n    this.exchange(this.pluginData, out, opts, info);\n    this.onPacketReceive = this.response;\n  }\n\n  exchange(buffer, out, opts, info) {\n    //conversation is :\n    // - first byte is information tell if question is a password (4) or clear text (2).\n    // - other bytes are the question to user\n\n    out.startPacket(this);\n\n    let pwd;\n    if (Array.isArray(opts.password)) {\n      pwd = opts.password[this.counter];\n      this.counter++;\n    } else {\n      pwd = opts.password;\n    }\n\n    if (pwd) out.writeString(pwd);\n    out.writeInt8(0);\n    out.flushBuffer(true);\n  }\n\n  response(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* OK_Packet and Err_Packet ending packet\n      //*********************************************************************************************************\n      case 0x00:\n      case 0xff:\n        this.emit('send_end');\n        return this.successSend(packet, out, opts, info);\n\n      default:\n        let promptData = packet.readBuffer();\n        this.exchange(promptData, out, opts, info);\n        this.onPacketReceive = this.response;\n    }\n  }\n}\n\nmodule.exports = PamPasswordAuth;\n"]},"metadata":{},"sourceType":"script"}