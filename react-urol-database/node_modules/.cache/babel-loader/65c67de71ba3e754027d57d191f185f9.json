{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar CommonText = require('./common-text-cmd');\n\nvar Errors = require('../misc/errors');\n\nvar Parse = require('../misc/parse');\n\nvar QUOTE = 0x27;\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\n\nvar Query =\n/*#__PURE__*/\nfunction (_CommonText) {\n  _inherits(Query, _CommonText);\n\n  function Query(resolve, reject, options, connOpts, sql, values) {\n    _classCallCheck(this, Query);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Query).call(this, resolve, reject, options, connOpts, sql, values));\n  }\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n\n\n  _createClass(Query, [{\n    key: \"start\",\n    value: function start(out, opts, info) {\n      if (!this.initialValues) {\n        //shortcut if no parameters\n        out.startPacket(this);\n        out.writeInt8(0x03);\n        if (!this.handleTimeout(out, info)) return;\n        out.writeString(this.sql);\n        out.flushBuffer(true);\n        this.emit('send_end');\n        return this.onPacketReceive = this.readResponsePacket;\n      }\n\n      if (this.opts.namedPlaceholders) {\n        try {\n          var parsed = Parse.splitQueryPlaceholder(this.sql, info, this.initialValues, this.displaySql.bind(this));\n          this.queryParts = parsed.parts;\n          this.values = parsed.values;\n        } catch (err) {\n          this.emit('send_end');\n          return this.throwError(err, info);\n        }\n      } else {\n        this.queryParts = Parse.splitQuery(this.sql);\n        this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n        if (!this.validateParameters(info)) return;\n      }\n\n      out.startPacket(this);\n      out.writeInt8(0x03);\n      if (!this.handleTimeout(out, info)) return;\n      out.writeString(this.queryParts[0]);\n      this.onPacketReceive = this.readResponsePacket; //********************************************\n      // send params\n      //********************************************\n\n      var len = this.queryParts.length;\n\n      for (var i = 1; i < len; i++) {\n        var value = this.values[i - 1];\n\n        if (value === null) {\n          out.writeStringAscii('NULL');\n          out.writeString(this.queryParts[i]);\n          continue;\n        }\n\n        if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n          this.sending = true; //********************************************\n          // param is stream,\n          // now all params will be written by event\n          //********************************************\n\n          this.registerStreamSendEvent(out, info);\n          this.currentParam = i;\n          out.writeInt8(QUOTE); //'\n\n          value.on('data', function (chunk) {\n            out.writeBufferEscape(chunk);\n          });\n          value.on('end', function () {\n            out.writeInt8(QUOTE); //'\n\n            out.writeString(this.queryParts[this.currentParam++]);\n            this.paramWritten();\n          }.bind(this));\n          return;\n        } else {\n          //********************************************\n          // param isn't stream. directly write in buffer\n          //********************************************\n          this.writeParam(out, value, this.opts, info);\n          out.writeString(this.queryParts[i]);\n        }\n      }\n\n      out.flushBuffer(true);\n      this.emit('send_end');\n    }\n    /**\n     * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n     * @param out buffer\n     * @param info server information\n     * @returns {boolean} false if an error has been thrown\n     */\n\n  }, {\n    key: \"handleTimeout\",\n    value: function handleTimeout(out, info) {\n      if (this.opts.timeout) {\n        if (info.isMariaDB()) {\n          if (info.hasMinVersion(10, 1, 2)) {\n            out.writeString('SET STATEMENT max_statement_time=' + this.opts.timeout / 1000 + ' FOR ');\n            return true;\n          } else {\n            var err = Errors.createError('Cannot use timeout for MariaDB server before 10.1.2. timeout value: ' + this.opts.timeout, false, info, 'HY000', Errors.ER_TIMEOUT_NOT_SUPPORTED);\n            this.emit('send_end');\n            this.throwError(err, info);\n            return false;\n          }\n        } else {\n          //not available for MySQL\n          // max_execution time exist, but only for select, and as hint\n          var _err = Errors.createError('Cannot use timeout for MySQL server. timeout value: ' + this.opts.timeout, false, info, 'HY000', Errors.ER_TIMEOUT_NOT_SUPPORTED);\n\n          this.emit('send_end');\n          this.throwError(_err, info);\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Validate that parameters exists and are defined.\n     *\n     * @param info        connection info\n     * @returns {boolean} return false if any error occur.\n     */\n\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters(info) {\n      //validate parameter size.\n      if (this.queryParts.length - 1 > this.values.length) {\n        this.emit('send_end');\n        this.throwNewError('Parameter at position ' + (this.values.length + 1) + ' is not set\\n' + this.displaySql(), false, info, 'HY000', Errors.ER_MISSING_PARAMETER);\n        return false;\n      } //validate parameter is defined.\n\n\n      for (var i = 0; i < this.queryParts.length - 1; i++) {\n        if (this.values[i] === undefined) {\n          this.emit('send_end');\n          this.throwNewError('Parameter at position ' + (i + 1) + ' is undefined\\n' + this.displaySql(), false, info, 'HY000', Errors.ER_PARAMETER_UNDEFINED);\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Define params events.\n     * Each parameter indicate that he is written to socket,\n     * emitting event so next stream parameter can be written.\n     */\n\n  }, {\n    key: \"registerStreamSendEvent\",\n    value: function registerStreamSendEvent(out, info) {\n      // note : Implementation use recursive calls, but stack won't never get near v8 max call stack size\n      //since event launched for stream parameter only\n      this.paramWritten = function () {\n        while (true) {\n          if (this.currentParam === this.queryParts.length) {\n            //********************************************\n            // all parameters are written.\n            // flush packet\n            //********************************************\n            out.flushBuffer(true);\n            this.sending = false;\n            this.emit('send_end');\n            return;\n          } else {\n            var value = this.values[this.currentParam - 1];\n\n            if (value === null) {\n              out.writeStringAscii('NULL');\n              out.writeString(this.queryParts[this.currentParam++]);\n              continue;\n            }\n\n            if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n              //********************************************\n              // param is stream,\n              //********************************************\n              out.writeInt8(QUOTE);\n              value.once('end', function () {\n                out.writeInt8(QUOTE);\n                out.writeString(this.queryParts[this.currentParam++]);\n                this.paramWritten();\n              }.bind(this));\n              value.on('data', function (chunk) {\n                out.writeBufferEscape(chunk);\n              });\n              return;\n            } //********************************************\n            // param isn't stream. directly write in buffer\n            //********************************************\n\n\n            this.writeParam(out, value, this.opts, info);\n            out.writeString(this.queryParts[this.currentParam++]);\n          }\n        }\n      }.bind(this);\n    }\n  }]);\n\n  return Query;\n}(CommonText);\n\nmodule.exports = Query;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/query.js"],"names":["CommonText","require","Errors","Parse","QUOTE","Query","resolve","reject","options","connOpts","sql","values","out","opts","info","initialValues","startPacket","writeInt8","handleTimeout","writeString","flushBuffer","emit","onPacketReceive","readResponsePacket","namedPlaceholders","parsed","splitQueryPlaceholder","displaySql","bind","queryParts","parts","err","throwError","splitQuery","Array","isArray","validateParameters","len","length","i","value","writeStringAscii","pipe","read","sending","registerStreamSendEvent","currentParam","on","chunk","writeBufferEscape","paramWritten","writeParam","timeout","isMariaDB","hasMinVersion","createError","ER_TIMEOUT_NOT_SUPPORTED","throwNewError","ER_MISSING_PARAMETER","undefined","ER_PARAMETER_UNDEFINED","once","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommonText = require('./common-text-cmd');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst QUOTE = 0x27;\n\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\nclass Query extends CommonText {\n  constructor(resolve, reject, options, connOpts, sql, values) {\n    super(resolve, reject, options, connOpts, sql, values);\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    if (!this.initialValues) {\n      //shortcut if no parameters\n      out.startPacket(this);\n      out.writeInt8(0x03);\n      if (!this.handleTimeout(out, info)) return;\n      out.writeString(this.sql);\n      out.flushBuffer(true);\n      this.emit('send_end');\n      return (this.onPacketReceive = this.readResponsePacket);\n    }\n\n    if (this.opts.namedPlaceholders) {\n      try {\n        const parsed = Parse.splitQueryPlaceholder(\n          this.sql,\n          info,\n          this.initialValues,\n          this.displaySql.bind(this)\n        );\n        this.queryParts = parsed.parts;\n        this.values = parsed.values;\n      } catch (err) {\n        this.emit('send_end');\n        return this.throwError(err, info);\n      }\n    } else {\n      this.queryParts = Parse.splitQuery(this.sql);\n      this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n      if (!this.validateParameters(info)) return;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x03);\n    if (!this.handleTimeout(out, info)) return;\n    out.writeString(this.queryParts[0]);\n    this.onPacketReceive = this.readResponsePacket;\n\n    //********************************************\n    // send params\n    //********************************************\n    const len = this.queryParts.length;\n    for (let i = 1; i < len; i++) {\n      const value = this.values[i - 1];\n\n      if (value === null) {\n        out.writeStringAscii('NULL');\n        out.writeString(this.queryParts[i]);\n        continue;\n      }\n\n      if (\n        typeof value === 'object' &&\n        typeof value.pipe === 'function' &&\n        typeof value.read === 'function'\n      ) {\n        this.sending = true;\n        //********************************************\n        // param is stream,\n        // now all params will be written by event\n        //********************************************\n        this.registerStreamSendEvent(out, info);\n        this.currentParam = i;\n        out.writeInt8(QUOTE); //'\n\n        value.on('data', function(chunk) {\n          out.writeBufferEscape(chunk);\n        });\n\n        value.on(\n          'end',\n          function() {\n            out.writeInt8(QUOTE); //'\n            out.writeString(this.queryParts[this.currentParam++]);\n            this.paramWritten();\n          }.bind(this)\n        );\n\n        return;\n      } else {\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.writeParam(out, value, this.opts, info);\n        out.writeString(this.queryParts[i]);\n      }\n    }\n    out.flushBuffer(true);\n    this.emit('send_end');\n  }\n\n  /**\n   * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n   * @param out buffer\n   * @param info server information\n   * @returns {boolean} false if an error has been thrown\n   */\n  handleTimeout(out, info) {\n    if (this.opts.timeout) {\n      if (info.isMariaDB()) {\n        if (info.hasMinVersion(10, 1, 2)) {\n          out.writeString('SET STATEMENT max_statement_time=' + this.opts.timeout / 1000 + ' FOR ');\n          return true;\n        } else {\n          const err = Errors.createError(\n            'Cannot use timeout for MariaDB server before 10.1.2. timeout value: ' +\n              this.opts.timeout,\n            false,\n            info,\n            'HY000',\n            Errors.ER_TIMEOUT_NOT_SUPPORTED\n          );\n          this.emit('send_end');\n          this.throwError(err, info);\n          return false;\n        }\n      } else {\n        //not available for MySQL\n        // max_execution time exist, but only for select, and as hint\n        const err = Errors.createError(\n          'Cannot use timeout for MySQL server. timeout value: ' + this.opts.timeout,\n          false,\n          info,\n          'HY000',\n          Errors.ER_TIMEOUT_NOT_SUPPORTED\n        );\n        this.emit('send_end');\n        this.throwError(err, info);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.queryParts.length - 1 > this.values.length) {\n      this.emit('send_end');\n      this.throwNewError(\n        'Parameter at position ' + (this.values.length + 1) + ' is not set\\n' + this.displaySql(),\n        false,\n        info,\n        'HY000',\n        Errors.ER_MISSING_PARAMETER\n      );\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.queryParts.length - 1; i++) {\n      if (this.values[i] === undefined) {\n        this.emit('send_end');\n        this.throwNewError(\n          'Parameter at position ' + (i + 1) + ' is undefined\\n' + this.displaySql(),\n          false,\n          info,\n          'HY000',\n          Errors.ER_PARAMETER_UNDEFINED\n        );\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next stream parameter can be written.\n   */\n  registerStreamSendEvent(out, info) {\n    // note : Implementation use recursive calls, but stack won't never get near v8 max call stack size\n    //since event launched for stream parameter only\n    this.paramWritten = function() {\n      while (true) {\n        if (this.currentParam === this.queryParts.length) {\n          //********************************************\n          // all parameters are written.\n          // flush packet\n          //********************************************\n          out.flushBuffer(true);\n          this.sending = false;\n          this.emit('send_end');\n          return;\n        } else {\n          const value = this.values[this.currentParam - 1];\n\n          if (value === null) {\n            out.writeStringAscii('NULL');\n            out.writeString(this.queryParts[this.currentParam++]);\n            continue;\n          }\n\n          if (\n            typeof value === 'object' &&\n            typeof value.pipe === 'function' &&\n            typeof value.read === 'function'\n          ) {\n            //********************************************\n            // param is stream,\n            //********************************************\n            out.writeInt8(QUOTE);\n            value.once(\n              'end',\n              function() {\n                out.writeInt8(QUOTE);\n                out.writeString(this.queryParts[this.currentParam++]);\n                this.paramWritten();\n              }.bind(this)\n            );\n            value.on('data', function(chunk) {\n              out.writeBufferEscape(chunk);\n            });\n            return;\n          }\n\n          //********************************************\n          // param isn't stream. directly write in buffer\n          //********************************************\n          this.writeParam(out, value, this.opts, info);\n          out.writeString(this.queryParts[this.currentParam++]);\n        }\n      }\n    }.bind(this);\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}