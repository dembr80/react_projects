{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events');\n\nvar util = require('util');\n\nvar Queue = require('denque');\n\nvar Net = require('net');\n\nvar PacketInputStream = require('./io/packet-input-stream');\n\nvar PacketOutputStream = require('./io/packet-output-stream');\n\nvar CompressionInputStream = require('./io/compression-input-stream');\n\nvar CompressionOutputStream = require('./io/compression-output-stream');\n\nvar ServerStatus = require('./const/server-status');\n\nvar ConnectionInformation = require('./misc/connection-information');\n\nvar tls = require('tls');\n\nvar Errors = require('./misc/errors');\n\nvar Utils = require('./misc/utils');\n\nvar Capabilities = require('./const/capabilities');\n\nvar moment = require('moment-timezone');\n/*commands*/\n\n\nvar Handshake = require('./cmd/handshake/handshake');\n\nvar Quit = require('./cmd/quit');\n\nvar Ping = require('./cmd/ping');\n\nvar Reset = require('./cmd/reset');\n\nvar Query = require('./cmd/query');\n\nvar BatchRewrite = require('./cmd/batch-rewrite');\n\nvar BatchBulk = require('./cmd/batch-bulk');\n\nvar Stream = require('./cmd/stream');\n\nvar ChangeUser = require('./cmd/change-user');\n\nvar _require = require('./const/connection_status'),\n    Status = _require.Status;\n/**\r\n * New Connection instance.\r\n *\r\n * @param options    connection options\r\n * @returns Connection instance\r\n * @constructor\r\n * @fires Connection#connect\r\n * @fires Connection#end\r\n * @fires Connection#error\r\n *\r\n */\n\n\nfunction Connection(options) {\n  var _this = this;\n\n  //*****************************************************************\n  // public API functions\n  //*****************************************************************\n\n  /**\r\n   * Connect event\r\n   *\r\n   * @returns {Promise} promise\r\n   */\n  this.connect = function () {\n    switch (_status) {\n      case Status.NOT_CONNECTED:\n        _status = Status.CONNECTING;\n        return new Promise(function (resolve, reject) {\n          _registerHandshakeCmd(resolve, reject);\n        });\n\n      case Status.CLOSING:\n      case Status.CLOSED:\n        return Promise.reject(Errors.createError('Connection closed', true, info, '08S01', Errors.ER_CONNECTION_ALREADY_CLOSED));\n\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n        return Promise.reject(Errors.createError('Connection is already connecting', true, info, '08S01', Errors.ER_ALREADY_CONNECTING));\n    } //status Connected\n\n\n    return Promise.resolve(_this);\n  };\n  /**\r\n   * Permit to change user during connection.\r\n   * All user variables will be reset, Prepare commands will be released.\r\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\r\n   *\r\n   * @param options   connection options\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.changeUser = function (options) {\n    if (!info.isMariaDB()) {\n      return Promise.reject(Errors.createError('method changeUser not available for MySQL server due to Bug #83472', false, info, '0A000', Errors.ER_MYSQL_CHANGE_USER_BUG));\n    }\n\n    return new Promise(function (resolve, reject) {\n      _addCommand(new ChangeUser(options, function (res) {\n        if (options && options.collation) opts.collation = options.collation;\n        resolve(res);\n      }, _authFailHandler.bind(this, reject), _addCommand.bind(this)));\n    });\n  };\n  /**\r\n   * Start transaction\r\n   *\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.beginTransaction = function () {\n    return _this.query('START TRANSACTION');\n  };\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * @returns {Promise} command if commit was needed only\r\n   */\n\n\n  this.commit = function () {\n    return _changeTransaction('COMMIT');\n  };\n  /**\r\n   * Roll back a transaction.\r\n   *\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.rollback = function () {\n    return _changeTransaction('ROLLBACK');\n  };\n  /**\r\n   * Execute query using text protocol.\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.query = function (sql, values) {\n    var _cmdOpt,\n        _sql,\n        _values = values;\n\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    } else {\n      _sql = sql;\n    }\n\n    return new Promise(function (resolve, reject) {\n      var cmd = new Query(resolve, reject, _cmdOpt, opts, _sql, _values);\n      if (opts.trace) Error.captureStackTrace(cmd);\n\n      _addCommand(cmd);\n    });\n  };\n  /**\r\n   * Execute batch using text protocol.\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param initialValues  object / array of placeholder values (not mandatory)\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.batch = function (sql, initialValues) {\n    var _options,\n        _sql,\n        _values = initialValues;\n\n    if (typeof sql === 'object') {\n      _options = sql;\n      _sql = _options.sql;\n      if (_options.values) _values = _options.values;\n    } else {\n      _sql = sql;\n    }\n\n    if (!_values) {\n      return Promise.reject(Errors.createError('Batch must have values set\\nsql: ' + _sql + ' - parameters:[]', false, info, 'HY000', Errors.ER_BATCH_WITH_NO_VALUES));\n    }\n\n    var vals = Array.isArray(_values) ? _values : [_values];\n    return new Promise(function (resolve, reject) {\n      var useBulk = canUseBulk(vals);\n      var cmd = useBulk ? new BatchBulk(resolve, reject, _options, opts, _sql, vals) : new BatchRewrite(resolve, reject, _options, opts, _sql, vals);\n      if (opts.trace) Error.captureStackTrace(cmd);\n\n      _addCommand(cmd);\n    });\n  };\n  /**\r\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\r\n   * to permit streaming big result-set\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @returns {Readable}\r\n   */\n\n\n  this.queryStream = function (sql, values) {\n    var _cmdOpt,\n        _sql,\n        _values = values;\n\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (sql.values) _values = sql.values;\n    } else {\n      _sql = sql;\n    }\n\n    var cmd = new Stream(_cmdOpt, opts, _sql, _values, _socket);\n    if (opts.trace) Error.captureStackTrace(cmd);\n\n    _addCommand(cmd);\n\n    return cmd.inStream;\n  };\n  /**\r\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\r\n   *\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.ping = function () {\n    return new Promise(function (resolve, reject) {\n      return _addCommand(new Ping(resolve, reject));\n    });\n  };\n  /**\r\n   * Send a reset command that will\r\n   * - rollback any open transaction\r\n   * - reset transaction isolation level\r\n   * - reset session variables\r\n   * - delete user variables\r\n   * - remove temporary tables\r\n   * - remove all PREPARE statement\r\n   *\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.reset = function () {\n    if (info.isMariaDB() && info.hasMinVersion(10, 2, 4) || !info.isMariaDB() && info.hasMinVersion(5, 7, 3)) {\n      return new Promise(function (resolve, reject) {\n        return _addCommand(new Reset(resolve, reject));\n      });\n    }\n\n    return Promise.reject(new Error('Reset command not permitted for server ' + _this.info.serverVersion + ' (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)'));\n  };\n  /**\r\n   * Indicates the state of the connection as the driver knows it\r\n   * @returns {boolean}\r\n   */\n\n\n  this.isValid = function () {\n    return _status === Status.CONNECTED;\n  };\n  /**\r\n   * Terminate connection gracefully.\r\n   *\r\n   * @returns {Promise} promise\r\n   */\n\n\n  this.end = function () {\n    _addCommand = _addCommandDisabled;\n    clearTimeout(_timeout);\n\n    if (_status !== Status.CLOSING && _status !== Status.CLOSED && _status !== Status.NOT_CONNECTED) {\n      _status = Status.CLOSING;\n      return new Promise(function (resolve, reject) {\n        var ended = function ended() {\n          _status = Status.CLOSED;\n\n          _socket.destroy();\n\n          _socket.unref();\n\n          _clear();\n\n          _receiveQueue.clear();\n\n          resolve();\n        };\n\n        var quitCmd = new Quit(ended, ended);\n\n        _sendQueue.push(quitCmd);\n\n        _receiveQueue.push(quitCmd);\n\n        if (_sendQueue.length === 1) {\n          process.nextTick(_nextSendCmd.bind(this));\n        }\n      });\n    }\n\n    return Promise.resolve();\n  };\n  /**\r\n   * Alias for destroy.\r\n   */\n\n\n  this.close = function () {\n    this.destroy();\n  };\n  /**\r\n   * Force connection termination by closing the underlying socket and killing server process if any.\r\n   */\n\n\n  this.destroy = function () {\n    _addCommand = _addCommandDisabled;\n    clearTimeout(_timeout);\n\n    if (_status !== Status.CLOSING && _status !== Status.CLOSED) {\n      _status = Status.CLOSING;\n\n      _sendQueue.clear();\n\n      if (_receiveQueue.length > 0) {\n        //socket is closed, but server may still be processing a huge select\n        //only possibility is to kill process by another thread\n        //TODO reuse a pool connection to avoid connection creation\n        var self = _this;\n        var killCon = new Connection(opts);\n        killCon.connect().then(function () {\n          //*************************************************\n          //kill connection\n          //*************************************************\n          var killResHandler = function killResHandler() {\n            var destroyError = Errors.createError('Connection destroyed, command was killed', true, info, '08S01', Errors.ER_CMD_NOT_EXECUTED_DESTROYED);\n            socketErrorDispatchToQueries(destroyError);\n            process.nextTick(function () {\n              if (_socket) _socket.destroy();\n            });\n            _status = Status.CLOSED;\n            killCon.end().catch(function () {});\n          };\n\n          killCon.query('KILL ' + info.threadId).then(killResHandler).catch(killResHandler);\n        }).catch(function (err) {\n          //*************************************************\n          //failing to create a kill connection, end normally\n          //*************************************************\n          var ended = function ended() {\n            var sock = _socket;\n\n            _clear();\n\n            _status = Status.CLOSED;\n            setImmediate(resolve);\n            sock.destroy();\n\n            _receiveQueue.clear();\n          };\n\n          var quitCmd = new Quit(ended, ended);\n\n          _sendQueue.push(quitCmd);\n\n          _receiveQueue.push(quitCmd);\n\n          if (_sendQueue.length === 1) {\n            process.nextTick(_nextSendCmd.bind(self));\n          }\n        });\n      } else {\n        _status = Status.CLOSED;\n\n        _socket.destroy();\n      }\n    }\n\n    _clear();\n  };\n\n  this.pause = function () {\n    _socket.pause();\n  };\n\n  this.resume = function () {\n    _socket.resume();\n  };\n\n  this.format = function (sql, values) {\n    throw Errors.createError('\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster', false, info, '0A000', Errors.ER_NOT_IMPLEMENTED_FORMAT);\n  }; //*****************************************************************\n  // additional public methods\n  //*****************************************************************\n\n  /**\r\n   * return current connected server version information.\r\n   *\r\n   * @returns {*}\r\n   */\n\n\n  this.serverVersion = function () {\n    if (!info.serverVersion) throw new Error('cannot know if server information until connection is established');\n    return info.serverVersion.raw;\n  };\n  /**\r\n   * Change option \"debug\" during connection.\r\n   * @param val   debug value\r\n   */\n\n\n  this.debug = function (val) {\n    opts.debug = val;\n    opts.emit('debug', opts.logPackets, opts.debug);\n  };\n\n  this.debugCompress = function (val) {\n    opts.debugCompress = val;\n  }; //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n\n  function TestMethods() {}\n\n  TestMethods.prototype.getCollation = function () {\n    return opts.collation;\n  };\n\n  TestMethods.prototype.getSocket = function () {\n    return _socket;\n  };\n\n  this.__tests = new TestMethods(); //*****************************************************************\n  // internal methods\n  //*****************************************************************\n\n  this._status = function () {\n    return _status;\n  };\n  /**\r\n   * Execute query using text protocol with callback emit columns/data/end/error\r\n   * events to permit streaming big result-set\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @param cb      callback\r\n   * @returns {Query} query\r\n   */\n\n\n  this._queryCallback = function (sql, values, cb) {\n    var _cmdOpts,\n        _sql,\n        _values = values,\n        _cb = cb;\n\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n\n    if (typeof sql === 'object') {\n      _cmdOpts = sql;\n      _sql = _cmdOpts.sql;\n      if (sql.values) _values = sql.values;\n    } else {\n      _sql = sql;\n    }\n\n    var cmd;\n\n    if (_cb) {\n      var _resolve = function _resolve(rows) {\n        var meta = rows.meta;\n        delete rows.meta;\n\n        _cb(null, rows, meta);\n      };\n\n      cmd = new Query(_resolve, _cb, _cmdOpts, opts, _sql, _values);\n    } else {\n      cmd = new Query(function () {}, function () {}, _cmdOpts, opts, _sql, _values);\n    }\n\n    cmd.handleNewRows = function (row) {\n      cmd._rows[cmd._responseIndex].push(row);\n\n      cmd.emit('data', row);\n    };\n\n    if (opts.trace) Error.captureStackTrace(cmd);\n\n    _addCommand(cmd);\n\n    return cmd;\n  };\n  /**\r\n   * Execute a batch using text protocol with callback emit columns/data/end/error\r\n   * events to permit streaming big result-set\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @param cb      callback\r\n   * @returns {Query} query\r\n   */\n\n\n  this._batchCallback = function (sql, values, cb) {\n    var _cmdOpts,\n        _sql,\n        _values = values,\n        _cb = cb;\n\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n\n    if (typeof sql === 'object') {\n      _cmdOpts = sql;\n      _sql = _cmdOpts.sql;\n      if (sql.values) _values = sql.values;\n    } else {\n      _sql = sql;\n    }\n\n    if (_values !== undefined) {\n      _values = Array.isArray(_values) ? _values : [_values];\n    }\n\n    var cmd;\n\n    if (!_values) {\n      if (_cb) {\n        _cb(Errors.createError('Batch must have values set\\nsql: ' + _sql + ' - parameters:[]', false, info, 'HY000', Errors.ER_BATCH_WITH_NO_VALUES));\n      }\n\n      return null;\n    }\n\n    var useBulk = canUseBulk(_values);\n    var fct = useBulk ? BatchBulk : BatchRewrite;\n\n    if (_cb) {\n      var _resolve2 = function _resolve2(rows) {\n        var meta = rows.meta;\n        delete rows.meta;\n\n        _cb(null, rows, meta);\n      };\n\n      cmd = new fct(_resolve2, _cb, _cmdOpts, opts, _sql, _values);\n    } else {\n      cmd = new fct(function () {}, function () {}, _cmdOpts, opts, _sql, _values);\n    }\n\n    cmd.handleNewRows = function (row) {\n      cmd._rows[cmd._responseIndex].push(row);\n\n      cmd.emit('data', row);\n    };\n\n    if (opts.trace) Error.captureStackTrace(cmd);\n\n    _addCommand(cmd);\n\n    return cmd;\n  };\n  /**\r\n   * Use Batch rewrite or MariaDB bulk protocol.\r\n   *\r\n   * @param values current batch values\r\n   * @return {boolean} indicating if must use rewrite or bulk\r\n   */\n\n\n  var canUseBulk = function canUseBulk(values) {\n    var useBulk = info.isMariaDB() && info.hasMinVersion(10, 2, 7) && opts.bulk;\n\n    if (useBulk) {\n      //ensure that there is no stream object\n      if (values !== undefined) {\n        if (!opts.namedPlaceholders) {\n          //ensure that all parameters have same length\n          //single array is considered as an array of single element.\n          var paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\n          if (paramLen == 0) return false;\n\n          for (var r = 0; r < values.length; r++) {\n            var row = values[r];\n            if (!Array.isArray(row)) row = [row];\n\n            if (paramLen !== row.length) {\n              return false;\n            }\n\n            for (var j = 0; j < paramLen; j++) {\n              var val = row[j];\n\n              if (val !== null && typeof val === 'object' && typeof val.pipe === 'function' && typeof val.read === 'function') {\n                return false;\n              }\n            }\n          }\n        } else {\n          for (var _r = 0; _r < values.length; _r++) {\n            var _row = values[_r];\n            var keys = Object.keys(_row);\n\n            for (var _j = 0; _j < keys.length; _j++) {\n              var _val = _row[keys[_j]];\n\n              if (_val !== null && typeof _val === 'object' && typeof _val.pipe === 'function' && typeof _val.read === 'function') {\n                return false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return useBulk;\n  };\n  /**\r\n   * Add handshake command to queue.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _registerHandshakeCmd = function _registerHandshakeCmd(resolve, rejected) {\n    var _authFail = _authFailHandler.bind(_this, rejected);\n\n    var _authSucceed = _authSucceedHandler.bind(_this, resolve, _authFail);\n\n    var handshake = new Handshake(_authSucceed, _authFail, _createSecureContext.bind(_this, _authFail), _addCommand.bind(_this), _getSocket);\n    Error.captureStackTrace(handshake);\n    handshake.once('end', function () {\n      process.nextTick(_nextSendCmd);\n    });\n\n    _receiveQueue.push(handshake);\n\n    _initSocket(_authFail);\n  };\n\n  var _executeSessionVariableQuery = function _executeSessionVariableQuery() {\n    if (opts.sessionVariables) {\n      var values = [];\n      var sessionQuery = 'set ';\n      var keys = Object.keys(opts.sessionVariables);\n\n      if (keys.length > 0) {\n        return new Promise(function (resolve, reject) {\n          for (var k = 0; k < keys.length; ++k) {\n            sessionQuery += (k !== 0 ? ',' : '') + '@@' + keys[k].replace(/[^a-z0-9_]/gi, '') + '=?';\n            values.push(opts.sessionVariables[keys[k]]);\n          }\n\n          var errorHandling = function errorHandling(initialErr) {\n            reject(Errors.createError('Error setting session variable (value ' + JSON.stringify(opts.sessionVariables) + '). Error: ' + initialErr.message, true, info, '08S01', Errors.ER_SETTING_SESSION_ERROR, null));\n          };\n\n          var cmd = new Query(resolve, errorHandling, null, opts, sessionQuery, values);\n          if (opts.trace) Error.captureStackTrace(cmd);\n\n          _addCommand(cmd);\n        });\n      }\n    }\n\n    return Promise.resolve();\n  };\n  /**\r\n   * Asking server timezone if not set in case of 'auto'\r\n   * @returns {Promise<void>}\r\n   * @private\r\n   */\n\n\n  var _checkServerTimezone = function _checkServerTimezone() {\n    if (opts.timezone !== 'auto') {\n      return Promise.resolve();\n    }\n\n    return _this.query('SELECT @@system_time_zone stz, @@time_zone tz').then(function (res) {\n      var serverTimezone = res[0].tz === 'SYSTEM' ? res[0].stz : res[0].tz;\n      var serverZone = moment.tz.zone(serverTimezone);\n\n      if (serverZone) {\n        if (serverTimezone === moment.tz.guess()) {\n          //db server and client use same timezone, avoid any conversion\n          opts.tz = null;\n        } else {\n          opts.tz = moment.tz.setDefault(serverTimezone);\n        }\n      } else {\n        return Promise.reject(Errors.createError(\"Automatic timezone setting fails. Server timezone '\" + serverTimezone + \"' does't have a corresponding IANA timezone. Option timezone must be set according to server timezone\", true, info, '08S01', Errors.ER_WRONG_AUTO_TIMEZONE));\n      }\n\n      return Promise.resolve();\n    });\n  };\n\n  var _checkServerVersion = function _checkServerVersion() {\n    if (!opts.forceVersionCheck) {\n      return Promise.resolve();\n    }\n\n    return _this.query('SELECT @@VERSION AS v').then(function (res) {\n      info.serverVersion.raw = res[0].v;\n      info.serverVersion.mariaDb = info.serverVersion.raw.includes('MariaDB');\n      ConnectionInformation.parseVersionString(info);\n      return Promise.resolve();\n    });\n  };\n\n  var _executeInitQuery = function _executeInitQuery() {\n    if (opts.initSql) {\n      var initialArr = Array.isArray(opts.initSql) ? opts.initSql : [opts.initSql];\n      var initialPromises = [];\n      initialArr.forEach(function (sql) {\n        initialPromises.push(new Promise(function (resolve, reject) {\n          var errorHandling = function errorHandling(initialErr) {\n            reject(Errors.createError('Error executing initial sql command: ' + initialErr.message, true, info, '08S01', Errors.ER_INITIAL_SQL_ERROR, null));\n          };\n\n          var cmd = new Query(resolve, errorHandling, null, opts, sql, null);\n          if (opts.trace) Error.captureStackTrace(cmd);\n\n          _addCommand(cmd);\n        }));\n      });\n      return Promise.all(initialPromises);\n    }\n\n    return Promise.resolve();\n  };\n\n  var _executeSessionTimeout = function _executeSessionTimeout() {\n    if (opts.queryTimeout) {\n      if (info.isMariaDB() && info.hasMinVersion(10, 1, 2)) {\n        return new Promise(function (resolve, reject) {\n          var errorHandling = function errorHandling(initialErr) {\n            reject(Errors.createError('Error setting session queryTimeout: ' + initialErr.message, true, info, '08S01', Errors.ER_INITIAL_TIMEOUT_ERROR, null));\n          };\n\n          var cmd = new Query(resolve, errorHandling, null, opts, 'SET max_statement_time=' + opts.queryTimeout / 1000, null);\n          if (opts.trace) Error.captureStackTrace(cmd);\n\n          _addCommand(cmd);\n        });\n      } else {\n        return Promise.reject(Errors.createError('Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ' + opts.queryTimeout, false, info, 'HY000', Errors.ER_TIMEOUT_NOT_SUPPORTED));\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  var _getSocket = function _getSocket() {\n    return _socket;\n  };\n  /**\r\n   * Initialize socket and associate events.\r\n   * @private\r\n   */\n\n\n  var _initSocket = function _initSocket(authFailHandler) {\n    if (opts.socketPath) {\n      _socket = Net.connect(opts.socketPath);\n    } else {\n      _socket = Net.connect(opts.port, opts.host);\n    }\n\n    if (opts.connectTimeout) {\n      _timeout = setTimeout(_connectTimeoutReached, opts.connectTimeout, authFailHandler, Date.now());\n    }\n\n    var _socketError = _socketErrorHandler.bind(_this, authFailHandler);\n\n    _socket.on('data', _in.onData.bind(_in));\n\n    _socket.on('error', _socketError);\n\n    _socket.on('end', _socketError);\n\n    _socket.on('connect', function () {\n      clearTimeout(_timeout);\n\n      if (_status === Status.CONNECTING) {\n        _status = Status.AUTHENTICATING;\n        _socketConnected = true;\n\n        _socket.setTimeout(opts.socketTimeout, _socketTimeoutReached.bind(this, authFailHandler));\n\n        _socket.setNoDelay(true);\n      }\n    }.bind(_this));\n\n    _socket.writeBuf = _socket.write;\n\n    _socket.flush = function () {};\n\n    _out.setStream(_socket);\n  };\n  /**\r\n   * Authentication success result handler.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _authSucceedHandler = function _authSucceedHandler(resolve, rejected) {\n    //enable packet compression according to option\n    if (opts.logPackets) info.enableLogPacket();\n\n    if (opts.compress) {\n      if (info.serverCapabilities & Capabilities.COMPRESS) {\n        _out.setStream(new CompressionOutputStream(_socket, opts, info));\n\n        _in = new CompressionInputStream(_in, _receiveQueue, opts, info);\n\n        _socket.removeAllListeners('data');\n\n        _socket.on('data', _in.onData.bind(_in));\n      } else {\n        console.error(\"connection is configured to use packet compression, but the server doesn't have this capability\");\n      }\n    }\n\n    if (opts.pipelining) {\n      _addCommand = _addCommandEnablePipeline;\n\n      var commands = _receiveQueue.toArray();\n\n      commands.forEach(function (cmd) {\n        var listeners = cmd.listeners('end');\n        cmd.removeListener('end', listeners[0]);\n        cmd.once('send_end', function () {\n          setImmediate(_nextSendCmd);\n        });\n      });\n    }\n\n    var errorInitialQueries = function errorInitialQueries(err) {\n      if (!err.fatal) _this.end().catch(function (err) {});\n      process.nextTick(rejected, err);\n    };\n\n    _executeSessionVariableQuery().then(function () {\n      return _checkServerTimezone();\n    }).then(function () {\n      return _checkServerVersion();\n    }).then(function () {\n      return _executeInitQuery();\n    }).then(function () {\n      return _executeSessionTimeout();\n    }).then(function () {\n      _status = Status.CONNECTED;\n      process.nextTick(resolve, _this);\n    }).catch(errorInitialQueries);\n  };\n  /**\r\n   * Authentication failed result handler.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _authFailHandler = function _authFailHandler(reject, err) {\n    process.nextTick(reject, err); //remove handshake command\n\n    _receiveQueue.shift();\n\n    _fatalError(err, true);\n  };\n  /**\r\n   * Create TLS socket and associate events.\r\n   *\r\n   * @param rejected  rejected function when error\r\n   * @param callback  callback function when done\r\n   * @private\r\n   */\n\n\n  var _createSecureContext = function _createSecureContext(rejected, callback) {\n    var _socketError = _socketErrorHandler.bind(_this, rejected);\n\n    var sslOption = Object.assign({}, opts.ssl, {\n      servername: opts.host,\n      socket: _socket\n    });\n\n    try {\n      var secureSocket = tls.connect(sslOption, callback);\n      secureSocket.on('data', _in.onData.bind(_in));\n      secureSocket.on('error', _socketError);\n      secureSocket.on('end', _socketError);\n      secureSocket.writeBuf = secureSocket.write;\n\n      secureSocket.flush = function () {};\n\n      _socket.removeAllListeners('data');\n\n      _socket = secureSocket;\n\n      _out.setStream(secureSocket);\n    } catch (err) {\n      _socketError(err);\n    }\n  };\n  /**\r\n   * Handle packet when no packet is expected.\r\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\r\n   *\r\n   * @param packet  packet\r\n   * @private\r\n   */\n\n\n  var _unexpectedPacket = function _unexpectedPacket(packet) {\n    if (packet && packet.peek() === 0xff) {\n      //can receive unexpected error packet from server/proxy\n      //to inform that connection is closed (usually by timeout)\n      var err = packet.readError(info);\n\n      if (err.fatal && _status !== Status.CLOSING && _status !== Status.CLOSED) {\n        this.emit('error', err);\n        this.end();\n      }\n    } else if (_status !== Status.CLOSING && _status !== Status.CLOSED) {\n      this.emit('error', Errors.createError('receiving packet from server without active commands\\n' + 'conn:' + (info.threadId ? info.threadId : -1) + '(' + packet.pos + ',' + packet.end + ')\\n' + Utils.log(opts, packet.buf, packet.pos, packet.end), true, info, '08S01', Errors.ER_UNEXPECTED_PACKET));\n      this.destroy();\n    }\n  };\n  /**\r\n   * Change transaction state.\r\n   *\r\n   * @param sql sql\r\n   * @returns {Promise} promise\r\n   * @private\r\n   */\n\n\n  var _changeTransaction = function _changeTransaction(sql) {\n    //if command in progress, driver cannot rely on status and must execute query\n    if (_status === Status.CLOSING || _status === Status.CLOSED) {\n      return Promise.reject(Errors.createError('Cannot execute new commands: connection closed\\nsql: ' + sql, true, info, '08S01', Errors.ER_CMD_CONNECTION_CLOSED));\n    } //Command in progress => must execute query\n    //or if no command in progress, can rely on status to know if query is needed\n\n\n    if (_receiveQueue.peekFront() || info.status & ServerStatus.STATUS_IN_TRANS) {\n      return new Promise(function (resolve, reject) {\n        var cmd = new Query(resolve, reject, null, opts, sql, null);\n        if (opts.trace) Error.captureStackTrace(cmd);\n\n        _addCommand(cmd);\n      });\n    }\n\n    return Promise.resolve();\n  };\n  /**\r\n   * Handle connection timeout.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _connectTimeoutReached = function _connectTimeoutReached(authFailHandler, initialConnectionTime) {\n    _timeout = null;\n\n    var handshake = _receiveQueue.peekFront();\n\n    authFailHandler(Errors.createError('Connection timeout: failed to create socket after ' + (Date.now() - initialConnectionTime) + 'ms', true, info, '08S01', Errors.ER_CONNECTION_TIMEOUT, handshake ? handshake.stack : null));\n  };\n  /**\r\n   * Handle socket timeout.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _socketTimeoutReached = function _socketTimeoutReached() {\n    var err = Errors.createError('socket timeout', true, info, '08S01', Errors.ER_SOCKET_TIMEOUT);\n    var packetMsgs = info.getLastPackets();\n\n    if (packetMsgs !== '') {\n      err.message = err.message + '\\nlast received packets:\\n' + packetMsgs;\n    }\n\n    _fatalError(err, true);\n  };\n  /**\r\n   * Add command to command sending and receiving queue.\r\n   *\r\n   * @param cmd         command\r\n   * @returns {*}       current command\r\n   * @private\r\n   */\n\n\n  var _addCommandEnable = function _addCommandEnable(cmd) {\n    cmd.once('end', function () {\n      setImmediate(_nextSendCmd);\n    }); //send immediately only if no current active receiver\n\n    if (_sendQueue.isEmpty() && _status === Status.CONNECTED) {\n      if (_receiveQueue.peekFront()) {\n        _receiveQueue.push(cmd);\n\n        _sendQueue.push(cmd);\n\n        return cmd;\n      }\n\n      _receiveQueue.push(cmd);\n\n      cmd.start(_out, opts, info);\n    } else {\n      _receiveQueue.push(cmd);\n\n      _sendQueue.push(cmd);\n    }\n\n    return cmd;\n  };\n  /**\r\n   * Add command to command sending and receiving queue using pipelining\r\n   *\r\n   * @param cmd         command\r\n   * @returns {*}       current command\r\n   * @private\r\n   */\n\n\n  var _addCommandEnablePipeline = function _addCommandEnablePipeline(cmd) {\n    cmd.once('send_end', function () {\n      setImmediate(_nextSendCmd);\n    });\n\n    _receiveQueue.push(cmd);\n\n    if (_sendQueue.isEmpty()) {\n      cmd.start(_out, opts, info);\n\n      if (cmd.sending) {\n        _sendQueue.push(cmd);\n\n        cmd.prependOnceListener('send_end', function () {\n          _sendQueue.shift();\n        });\n      }\n    } else {\n      _sendQueue.push(cmd);\n    }\n\n    return cmd;\n  };\n  /**\r\n   * Replacing command when connection is closing or closed to send a proper error message.\r\n   *\r\n   * @param cmd         command\r\n   * @private\r\n   */\n\n\n  var _addCommandDisabled = function _addCommandDisabled(cmd) {\n    cmd.throwNewError('Cannot execute new commands: connection closed\\n' + cmd.displaySql(), true, info, '08S01', Errors.ER_CMD_CONNECTION_CLOSED);\n  };\n  /**\r\n   * Handle socket error.\r\n   *\r\n   * @param authFailHandler   authentication handler\r\n   * @param err               socket error\r\n   * @private\r\n   */\n\n\n  var _socketErrorHandler = function _socketErrorHandler(authFailHandler, err) {\n    if (_status === Status.CLOSING || _status === Status.CLOSED) return;\n\n    _socket.writeBuf = function () {};\n\n    _socket.flush = function () {}; //socket has been ended without error\n\n\n    if (!err) {\n      err = Errors.createError('socket has unexpectedly been closed', true, info, '08S01', Errors.ER_SOCKET_UNEXPECTED_CLOSE);\n    } else {\n      err.fatal = true;\n      this.sqlState = 'HY000';\n    }\n\n    var packetMsgs = info.getLastPackets();\n\n    if (packetMsgs !== '') {\n      err.message += '\\nlast received packets:\\n' + packetMsgs;\n    }\n\n    switch (_status) {\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n        var currentCmd = _receiveQueue.peekFront();\n\n        if (currentCmd && currentCmd.stack && err) {\n          err.stack += '\\n From event:\\n' + currentCmd.stack.substring(currentCmd.stack.indexOf('\\n') + 1);\n        }\n\n        authFailHandler(err);\n        break;\n\n      default:\n        _fatalError(err, false);\n\n    }\n  };\n  /**\r\n   * Fatal unexpected error : closing connection, and throw exception.\r\n   *\r\n   * @param self    current connection\r\n   * @private\r\n   */\n\n\n  var _fatalErrorHandler = function _fatalErrorHandler(self) {\n    return function (err, avoidThrowError) {\n      if (_status === Status.CLOSING || _status === Status.CLOSED) {\n        socketErrorDispatchToQueries(err);\n        return;\n      }\n\n      var mustThrowError = _status !== Status.CONNECTING;\n      _status = Status.CLOSING; //prevent executing new commands\n\n      _addCommand = _addCommandDisabled;\n\n      if (_socket) {\n        _socket.removeAllListeners('error');\n\n        _socket.removeAllListeners('timeout');\n\n        _socket.removeAllListeners('close');\n\n        _socket.removeAllListeners('data');\n\n        if (!_socket.destroyed) _socket.destroy();\n        _socket = undefined;\n      }\n\n      _status = Status.CLOSED;\n      var errorThrownByCmd = socketErrorDispatchToQueries(err);\n\n      if (mustThrowError) {\n        if (self.listenerCount('error') > 0) {\n          self.emit('error', err);\n          self.emit('end');\n\n          _clear();\n        } else {\n          self.emit('end');\n\n          _clear(); //error will be thrown if no error listener and no command did throw the exception\n\n\n          if (!avoidThrowError && !errorThrownByCmd) throw err;\n        }\n      } else {\n        _clear();\n      }\n    };\n  };\n  /**\r\n   * Dispatch fatal error to current running queries.\r\n   *\r\n   * @param err        the fatal error\r\n   * @return {boolean} return if error has been relayed to queries\r\n   */\n\n\n  var socketErrorDispatchToQueries = function socketErrorDispatchToQueries(err) {\n    var receiveCmd;\n    var errorThrownByCmd = false;\n\n    while (receiveCmd = _receiveQueue.shift()) {\n      if (receiveCmd && receiveCmd.onPacketReceive) {\n        errorThrownByCmd = true;\n        setImmediate(receiveCmd.throwError.bind(receiveCmd), err, info);\n      }\n    }\n\n    return errorThrownByCmd;\n  };\n  /**\r\n   * Will send next command in queue if any.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _nextSendCmd = function _nextSendCmd() {\n    var sendCmd;\n\n    if (sendCmd = _sendQueue.shift()) {\n      if (sendCmd.sending) {\n        _sendQueue.unshift(sendCmd);\n      } else {\n        sendCmd.start(_out, opts, info);\n\n        if (sendCmd.sending) {\n          sendCmd.prependOnceListener('send_end', function () {\n            _sendQueue.shift();\n          });\n\n          _sendQueue.unshift(sendCmd);\n        }\n      }\n    }\n  };\n  /**\r\n   * Clearing connection variables when ending.\r\n   *\r\n   * @private\r\n   */\n\n\n  var _clear = function _clear() {\n    _sendQueue.clear();\n\n    opts.removeAllListeners();\n    _out = undefined;\n    _socket = undefined;\n  }; //*****************************************************************\n  // internal variables\n  //*****************************************************************\n\n\n  EventEmitter.call(this);\n  var opts = Object.assign(new EventEmitter(), options);\n  var info = new ConnectionInformation();\n\n  var _sendQueue = new Queue();\n\n  var _receiveQueue = new Queue();\n\n  var _status = Status.NOT_CONNECTED;\n  var _socketConnected = false;\n  var _socket = null;\n  var _timeout = null;\n  var _addCommand = _addCommandEnable;\n\n  var _fatalError = _fatalErrorHandler(this);\n\n  var _out = new PacketOutputStream(opts, info);\n\n  var _in = new PacketInputStream(_unexpectedPacket.bind(this), _receiveQueue, _out, opts, info);\n\n  this.escape = Utils.escape.bind(this, opts, info);\n  this.escapeId = Utils.escapeId.bind(this, opts, info); //add alias threadId for mysql/mysql2 compatibility\n\n  Object.defineProperty(this, 'threadId', {\n    get: function get() {\n      return info ? info.threadId : undefined;\n    }\n  });\n  Object.defineProperty(this, 'info', {\n    get: function get() {\n      return info;\n    }\n  });\n}\n\nutil.inherits(Connection, EventEmitter);\nmodule.exports = Connection;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/connection.js"],"names":["EventEmitter","require","util","Queue","Net","PacketInputStream","PacketOutputStream","CompressionInputStream","CompressionOutputStream","ServerStatus","ConnectionInformation","tls","Errors","Utils","Capabilities","moment","Handshake","Quit","Ping","Reset","Query","BatchRewrite","BatchBulk","Stream","ChangeUser","Status","Connection","options","connect","_status","NOT_CONNECTED","CONNECTING","Promise","resolve","reject","_registerHandshakeCmd","CLOSING","CLOSED","createError","info","ER_CONNECTION_ALREADY_CLOSED","AUTHENTICATING","ER_ALREADY_CONNECTING","changeUser","isMariaDB","ER_MYSQL_CHANGE_USER_BUG","_addCommand","res","collation","opts","_authFailHandler","bind","beginTransaction","query","commit","_changeTransaction","rollback","sql","values","_cmdOpt","_sql","_values","cmd","trace","Error","captureStackTrace","batch","initialValues","_options","ER_BATCH_WITH_NO_VALUES","vals","Array","isArray","useBulk","canUseBulk","queryStream","_socket","inStream","ping","reset","hasMinVersion","serverVersion","isValid","CONNECTED","end","_addCommandDisabled","clearTimeout","_timeout","ended","destroy","unref","_clear","_receiveQueue","clear","quitCmd","_sendQueue","push","length","process","nextTick","_nextSendCmd","close","self","killCon","then","killResHandler","destroyError","ER_CMD_NOT_EXECUTED_DESTROYED","socketErrorDispatchToQueries","catch","threadId","err","sock","setImmediate","pause","resume","format","ER_NOT_IMPLEMENTED_FORMAT","raw","debug","val","emit","logPackets","debugCompress","TestMethods","prototype","getCollation","getSocket","__tests","_queryCallback","cb","_cmdOpts","_cb","undefined","rows","meta","handleNewRows","row","_rows","_responseIndex","_batchCallback","fct","bulk","namedPlaceholders","paramLen","r","j","pipe","read","keys","Object","rejected","_authFail","_authSucceed","_authSucceedHandler","handshake","_createSecureContext","_getSocket","once","_initSocket","_executeSessionVariableQuery","sessionVariables","sessionQuery","k","replace","errorHandling","initialErr","JSON","stringify","message","ER_SETTING_SESSION_ERROR","_checkServerTimezone","timezone","serverTimezone","tz","stz","serverZone","zone","guess","setDefault","ER_WRONG_AUTO_TIMEZONE","_checkServerVersion","forceVersionCheck","v","mariaDb","includes","parseVersionString","_executeInitQuery","initSql","initialArr","initialPromises","forEach","ER_INITIAL_SQL_ERROR","all","_executeSessionTimeout","queryTimeout","ER_INITIAL_TIMEOUT_ERROR","ER_TIMEOUT_NOT_SUPPORTED","authFailHandler","socketPath","port","host","connectTimeout","setTimeout","_connectTimeoutReached","Date","now","_socketError","_socketErrorHandler","on","_in","onData","_socketConnected","socketTimeout","_socketTimeoutReached","setNoDelay","writeBuf","write","flush","_out","setStream","enableLogPacket","compress","serverCapabilities","COMPRESS","removeAllListeners","console","error","pipelining","_addCommandEnablePipeline","commands","toArray","listeners","removeListener","errorInitialQueries","fatal","shift","_fatalError","callback","sslOption","assign","ssl","servername","socket","secureSocket","_unexpectedPacket","packet","peek","readError","pos","log","buf","ER_UNEXPECTED_PACKET","ER_CMD_CONNECTION_CLOSED","peekFront","status","STATUS_IN_TRANS","initialConnectionTime","ER_CONNECTION_TIMEOUT","stack","ER_SOCKET_TIMEOUT","packetMsgs","getLastPackets","_addCommandEnable","isEmpty","start","sending","prependOnceListener","throwNewError","displaySql","ER_SOCKET_UNEXPECTED_CLOSE","sqlState","currentCmd","substring","indexOf","_fatalErrorHandler","avoidThrowError","mustThrowError","destroyed","errorThrownByCmd","listenerCount","receiveCmd","onPacketReceive","throwError","sendCmd","unshift","call","escape","escapeId","defineProperty","get","inherits","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,QAAD,CAArB;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,0BAAD,CAAjC;;AACA,IAAMK,kBAAkB,GAAGL,OAAO,CAAC,2BAAD,CAAlC;;AACA,IAAMM,sBAAsB,GAAGN,OAAO,CAAC,+BAAD,CAAtC;;AACA,IAAMO,uBAAuB,GAAGP,OAAO,CAAC,gCAAD,CAAvC;;AACA,IAAMQ,YAAY,GAAGR,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAMS,qBAAqB,GAAGT,OAAO,CAAC,+BAAD,CAArC;;AACA,IAAMU,GAAG,GAAGV,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMW,MAAM,GAAGX,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMY,KAAK,GAAGZ,OAAO,CAAC,cAAD,CAArB;;AACA,IAAMa,YAAY,GAAGb,OAAO,CAAC,sBAAD,CAA5B;;AACA,IAAMc,MAAM,GAAGd,OAAO,CAAC,iBAAD,CAAtB;AAEA;;;AACA,IAAMe,SAAS,GAAGf,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAMgB,IAAI,GAAGhB,OAAO,CAAC,YAAD,CAApB;;AACA,IAAMiB,IAAI,GAAGjB,OAAO,CAAC,YAAD,CAApB;;AACA,IAAMkB,KAAK,GAAGlB,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMmB,KAAK,GAAGnB,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMoB,YAAY,GAAGpB,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAMqB,SAAS,GAAGrB,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMsB,MAAM,GAAGtB,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAMuB,UAAU,GAAGvB,OAAO,CAAC,mBAAD,CAA1B;;eACmBA,OAAO,CAAC,2BAAD,C;IAAlBwB,M,YAAAA,M;AAER;;;;;;;;;;;;;AAWA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAAA;;AAC3B;AACA;AACA;;AAEA;;;;;AAKA,OAAKC,OAAL,GAAe,YAAM;AACnB,YAAQC,OAAR;AACE,WAAKJ,MAAM,CAACK,aAAZ;AACED,QAAAA,OAAO,GAAGJ,MAAM,CAACM,UAAjB;AACA,eAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CC,UAAAA,qBAAqB,CAACF,OAAD,EAAUC,MAAV,CAArB;AACD,SAFM,CAAP;;AAIF,WAAKT,MAAM,CAACW,OAAZ;AACA,WAAKX,MAAM,CAACY,MAAZ;AACE,eAAOL,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,mBADF,EAEE,IAFF,EAGEC,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAAC4B,4BALT,CADK,CAAP;;AAUF,WAAKf,MAAM,CAACM,UAAZ;AACA,WAAKN,MAAM,CAACgB,cAAZ;AACE,eAAOT,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,kCADF,EAEE,IAFF,EAGEC,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAAC8B,qBALT,CADK,CAAP;AArBJ,KADmB,CAgCnB;;;AACA,WAAOV,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD,GAlCD;AAoCA;;;;;;;;;;AAQA,OAAKU,UAAL,GAAkB,UAAAhB,OAAO,EAAI;AAC3B,QAAI,CAACY,IAAI,CAACK,SAAL,EAAL,EAAuB;AACrB,aAAOZ,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,oEADF,EAEE,KAFF,EAGEC,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACiC,wBALT,CADK,CAAP;AASD;;AAED,WAAO,IAAIb,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CY,MAAAA,WAAW,CACT,IAAItB,UAAJ,CACEG,OADF,EAEE,UAAAoB,GAAG,EAAI;AACL,YAAIpB,OAAO,IAAIA,OAAO,CAACqB,SAAvB,EAAkCC,IAAI,CAACD,SAAL,GAAiBrB,OAAO,CAACqB,SAAzB;AAClCf,QAAAA,OAAO,CAACc,GAAD,CAAP;AACD,OALH,EAMEG,gBAAgB,CAACC,IAAjB,CAAsB,IAAtB,EAA4BjB,MAA5B,CANF,EAOEY,WAAW,CAACK,IAAZ,CAAiB,IAAjB,CAPF,CADS,CAAX;AAWD,KAZM,CAAP;AAaD,GA1BD;AA4BA;;;;;;;AAKA,OAAKC,gBAAL,GAAwB,YAAM;AAC5B,WAAO,KAAI,CAACC,KAAL,CAAW,mBAAX,CAAP;AACD,GAFD;AAIA;;;;;;;AAKA,OAAKC,MAAL,GAAc,YAAM;AAClB,WAAOC,kBAAkB,CAAC,QAAD,CAAzB;AACD,GAFD;AAIA;;;;;;;AAKA,OAAKC,QAAL,GAAgB,YAAM;AACpB,WAAOD,kBAAkB,CAAC,UAAD,CAAzB;AACD,GAFD;AAIA;;;;;;;;;;AAQA,OAAKF,KAAL,GAAa,UAACI,GAAD,EAAMC,MAAN,EAAiB;AAC5B,QAAIC,OAAJ;AAAA,QACEC,IADF;AAAA,QAEEC,OAAO,GAAGH,MAFZ;;AAGA,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3BE,MAAAA,OAAO,GAAGF,GAAV;AACAG,MAAAA,IAAI,GAAGD,OAAO,CAACF,GAAf;AACA,UAAIE,OAAO,CAACD,MAAZ,EAAoBG,OAAO,GAAGF,OAAO,CAACD,MAAlB;AACrB,KAJD,MAIO;AACLE,MAAAA,IAAI,GAAGH,GAAP;AACD;;AAED,WAAO,IAAIzB,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,UAAM4B,GAAG,GAAG,IAAI1C,KAAJ,CAAUa,OAAV,EAAmBC,MAAnB,EAA2ByB,OAA3B,EAAoCV,IAApC,EAA0CW,IAA1C,EAAgDC,OAAhD,CAAZ;AACA,UAAIZ,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,MAAAA,WAAW,CAACgB,GAAD,CAAX;AACD,KAJM,CAAP;AAKD,GAjBD;AAmBA;;;;;;;;;;AAQA,OAAKI,KAAL,GAAa,UAACT,GAAD,EAAMU,aAAN,EAAwB;AACnC,QAAIC,QAAJ;AAAA,QACER,IADF;AAAA,QAEEC,OAAO,GAAGM,aAFZ;;AAGA,QAAI,OAAOV,GAAP,KAAe,QAAnB,EAA6B;AAC3BW,MAAAA,QAAQ,GAAGX,GAAX;AACAG,MAAAA,IAAI,GAAGQ,QAAQ,CAACX,GAAhB;AACA,UAAIW,QAAQ,CAACV,MAAb,EAAqBG,OAAO,GAAGO,QAAQ,CAACV,MAAnB;AACtB,KAJD,MAIO;AACLE,MAAAA,IAAI,GAAGH,GAAP;AACD;;AAED,QAAI,CAACI,OAAL,EAAc;AACZ,aAAO7B,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,sCAAsCsB,IAAtC,GAA6C,kBAD/C,EAEE,KAFF,EAGErB,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACyD,uBALT,CADK,CAAP;AASD;;AAED,QAAMC,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcX,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAAhD;AAEA,WAAO,IAAI7B,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,UAAIuC,OAAO,GAAGC,UAAU,CAACJ,IAAD,CAAxB;AAEA,UAAMR,GAAG,GAAGW,OAAO,GACf,IAAInD,SAAJ,CAAcW,OAAd,EAAuBC,MAAvB,EAA+BkC,QAA/B,EAAyCnB,IAAzC,EAA+CW,IAA/C,EAAqDU,IAArD,CADe,GAEf,IAAIjD,YAAJ,CAAiBY,OAAjB,EAA0BC,MAA1B,EAAkCkC,QAAlC,EAA4CnB,IAA5C,EAAkDW,IAAlD,EAAwDU,IAAxD,CAFJ;AAGA,UAAIrB,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,MAAAA,WAAW,CAACgB,GAAD,CAAX;AACD,KARM,CAAP;AASD,GAnCD;AAqCA;;;;;;;;;;;AASA,OAAKa,WAAL,GAAmB,UAAClB,GAAD,EAAMC,MAAN,EAAiB;AAClC,QAAIC,OAAJ;AAAA,QACEC,IADF;AAAA,QAEEC,OAAO,GAAGH,MAFZ;;AAGA,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3BE,MAAAA,OAAO,GAAGF,GAAV;AACAG,MAAAA,IAAI,GAAGD,OAAO,CAACF,GAAf;AACA,UAAIA,GAAG,CAACC,MAAR,EAAgBG,OAAO,GAAGJ,GAAG,CAACC,MAAd;AACjB,KAJD,MAIO;AACLE,MAAAA,IAAI,GAAGH,GAAP;AACD;;AAED,QAAMK,GAAG,GAAG,IAAIvC,MAAJ,CAAWoC,OAAX,EAAoBV,IAApB,EAA0BW,IAA1B,EAAgCC,OAAhC,EAAyCe,OAAzC,CAAZ;AACA,QAAI3B,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,IAAAA,WAAW,CAACgB,GAAD,CAAX;;AACA,WAAOA,GAAG,CAACe,QAAX;AACD,GAhBD;AAkBA;;;;;;;AAKA,OAAKC,IAAL,GAAY,YAAM;AAChB,WAAO,IAAI9C,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,aAAOY,WAAW,CAAC,IAAI5B,IAAJ,CAASe,OAAT,EAAkBC,MAAlB,CAAD,CAAlB;AACD,KAFM,CAAP;AAGD,GAJD;AAMA;;;;;;;;;;;;;AAWA,OAAK6C,KAAL,GAAa,YAAM;AACjB,QACGxC,IAAI,CAACK,SAAL,MAAoBL,IAAI,CAACyC,aAAL,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,CAA1B,CAArB,IACC,CAACzC,IAAI,CAACK,SAAL,EAAD,IAAqBL,IAAI,CAACyC,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAFxB,EAGE;AACA,aAAO,IAAIhD,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,eAAOY,WAAW,CAAC,IAAI3B,KAAJ,CAAUc,OAAV,EAAmBC,MAAnB,CAAD,CAAlB;AACD,OAFM,CAAP;AAGD;;AACD,WAAOF,OAAO,CAACE,MAAR,CACL,IAAI8B,KAAJ,CACE,4CACE,KAAI,CAACzB,IAAL,CAAU0C,aADZ,GAEE,4DAHJ,CADK,CAAP;AAOD,GAhBD;AAkBA;;;;;;AAIA,OAAKC,OAAL,GAAe,YAAM;AACnB,WAAOrD,OAAO,KAAKJ,MAAM,CAAC0D,SAA1B;AACD,GAFD;AAIA;;;;;;;AAKA,OAAKC,GAAL,GAAW,YAAM;AACftC,IAAAA,WAAW,GAAGuC,mBAAd;AACAC,IAAAA,YAAY,CAACC,QAAD,CAAZ;;AAEA,QACE1D,OAAO,KAAKJ,MAAM,CAACW,OAAnB,IACAP,OAAO,KAAKJ,MAAM,CAACY,MADnB,IAEAR,OAAO,KAAKJ,MAAM,CAACK,aAHrB,EAIE;AACAD,MAAAA,OAAO,GAAGJ,MAAM,CAACW,OAAjB;AACA,aAAO,IAAIJ,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,YAAMsD,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB3D,UAAAA,OAAO,GAAGJ,MAAM,CAACY,MAAjB;;AACAuC,UAAAA,OAAO,CAACa,OAAR;;AACAb,UAAAA,OAAO,CAACc,KAAR;;AACAC,UAAAA,MAAM;;AACNC,UAAAA,aAAa,CAACC,KAAd;;AACA5D,UAAAA,OAAO;AACR,SAPD;;AAQA,YAAM6D,OAAO,GAAG,IAAI7E,IAAJ,CAASuE,KAAT,EAAgBA,KAAhB,CAAhB;;AACAO,QAAAA,UAAU,CAACC,IAAX,CAAgBF,OAAhB;;AACAF,QAAAA,aAAa,CAACI,IAAd,CAAmBF,OAAnB;;AACA,YAAIC,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AAC3BC,UAAAA,OAAO,CAACC,QAAR,CAAiBC,YAAY,CAACjD,IAAb,CAAkB,IAAlB,CAAjB;AACD;AACF,OAfM,CAAP;AAgBD;;AACD,WAAOnB,OAAO,CAACC,OAAR,EAAP;AACD,GA5BD;AA8BA;;;;;AAGA,OAAKoE,KAAL,GAAa,YAAW;AACtB,SAAKZ,OAAL;AACD,GAFD;AAIA;;;;;AAGA,OAAKA,OAAL,GAAe,YAAM;AACnB3C,IAAAA,WAAW,GAAGuC,mBAAd;AACAC,IAAAA,YAAY,CAACC,QAAD,CAAZ;;AACA,QAAI1D,OAAO,KAAKJ,MAAM,CAACW,OAAnB,IAA8BP,OAAO,KAAKJ,MAAM,CAACY,MAArD,EAA6D;AAC3DR,MAAAA,OAAO,GAAGJ,MAAM,CAACW,OAAjB;;AACA2D,MAAAA,UAAU,CAACF,KAAX;;AACA,UAAID,aAAa,CAACK,MAAd,GAAuB,CAA3B,EAA8B;AAC5B;AACA;AACA;AACA,YAAMK,IAAI,GAAG,KAAb;AACA,YAAMC,OAAO,GAAG,IAAI7E,UAAJ,CAAeuB,IAAf,CAAhB;AACAsD,QAAAA,OAAO,CACJ3E,OADH,GAEG4E,IAFH,CAEQ,YAAM;AACV;AACA;AACA;AACA,cAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,gBAAMC,YAAY,GAAG9F,MAAM,CAAC0B,WAAP,CACnB,0CADmB,EAEnB,IAFmB,EAGnBC,IAHmB,EAInB,OAJmB,EAKnB3B,MAAM,CAAC+F,6BALY,CAArB;AAOAC,YAAAA,4BAA4B,CAACF,YAAD,CAA5B;AACAR,YAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,kBAAIvB,OAAJ,EAAaA,OAAO,CAACa,OAAR;AACd,aAFD;AAGA5D,YAAAA,OAAO,GAAGJ,MAAM,CAACY,MAAjB;AACAkE,YAAAA,OAAO,CAACnB,GAAR,GAAcyB,KAAd,CAAoB,YAAM,CAAE,CAA5B;AACD,WAdD;;AAgBAN,UAAAA,OAAO,CACJlD,KADH,CACS,UAAUd,IAAI,CAACuE,QADxB,EAEGN,IAFH,CAEQC,cAFR,EAGGI,KAHH,CAGSJ,cAHT;AAID,SA1BH,EA2BGI,KA3BH,CA2BS,UAAAE,GAAG,EAAI;AACZ;AACA;AACA;AACA,cAAMvB,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,gBAAIwB,IAAI,GAAGpC,OAAX;;AACAe,YAAAA,MAAM;;AACN9D,YAAAA,OAAO,GAAGJ,MAAM,CAACY,MAAjB;AACA4E,YAAAA,YAAY,CAAChF,OAAD,CAAZ;AACA+E,YAAAA,IAAI,CAACvB,OAAL;;AACAG,YAAAA,aAAa,CAACC,KAAd;AACD,WAPD;;AAQA,cAAMC,OAAO,GAAG,IAAI7E,IAAJ,CAASuE,KAAT,EAAgBA,KAAhB,CAAhB;;AACAO,UAAAA,UAAU,CAACC,IAAX,CAAgBF,OAAhB;;AACAF,UAAAA,aAAa,CAACI,IAAd,CAAmBF,OAAnB;;AACA,cAAIC,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AAC3BC,YAAAA,OAAO,CAACC,QAAR,CAAiBC,YAAY,CAACjD,IAAb,CAAkBmD,IAAlB,CAAjB;AACD;AACF,SA7CH;AA8CD,OApDD,MAoDO;AACLzE,QAAAA,OAAO,GAAGJ,MAAM,CAACY,MAAjB;;AACAuC,QAAAA,OAAO,CAACa,OAAR;AACD;AACF;;AACDE,IAAAA,MAAM;AACP,GAhED;;AAkEA,OAAKuB,KAAL,GAAa,YAAM;AACjBtC,IAAAA,OAAO,CAACsC,KAAR;AACD,GAFD;;AAIA,OAAKC,MAAL,GAAc,YAAM;AAClBvC,IAAAA,OAAO,CAACuC,MAAR;AACD,GAFD;;AAIA,OAAKC,MAAL,GAAc,UAAC3D,GAAD,EAAMC,MAAN,EAAiB;AAC7B,UAAM9C,MAAM,CAAC0B,WAAP,CACJ,+HADI,EAEJ,KAFI,EAGJC,IAHI,EAIJ,OAJI,EAKJ3B,MAAM,CAACyG,yBALH,CAAN;AAOD,GARD,CAvX2B,CAiY3B;AACA;AACA;;AAEA;;;;;;;AAKA,OAAKpC,aAAL,GAAqB,YAAM;AACzB,QAAI,CAAC1C,IAAI,CAAC0C,aAAV,EACE,MAAM,IAAIjB,KAAJ,CAAU,mEAAV,CAAN;AACF,WAAOzB,IAAI,CAAC0C,aAAL,CAAmBqC,GAA1B;AACD,GAJD;AAMA;;;;;;AAIA,OAAKC,KAAL,GAAa,UAAAC,GAAG,EAAI;AAClBvE,IAAAA,IAAI,CAACsE,KAAL,GAAaC,GAAb;AACAvE,IAAAA,IAAI,CAACwE,IAAL,CAAU,OAAV,EAAmBxE,IAAI,CAACyE,UAAxB,EAAoCzE,IAAI,CAACsE,KAAzC;AACD,GAHD;;AAKA,OAAKI,aAAL,GAAqB,UAAAH,GAAG,EAAI;AAC1BvE,IAAAA,IAAI,CAAC0E,aAAL,GAAqBH,GAArB;AACD,GAFD,CAzZ2B,CA6Z3B;AACA;AACA;;;AAEA,WAASI,WAAT,GAAuB,CAAE;;AAEzBA,EAAAA,WAAW,CAACC,SAAZ,CAAsBC,YAAtB,GAAqC,YAAM;AACzC,WAAO7E,IAAI,CAACD,SAAZ;AACD,GAFD;;AAIA4E,EAAAA,WAAW,CAACC,SAAZ,CAAsBE,SAAtB,GAAkC,YAAM;AACtC,WAAOnD,OAAP;AACD,GAFD;;AAIA,OAAKoD,OAAL,GAAe,IAAIJ,WAAJ,EAAf,CA3a2B,CA6a3B;AACA;AACA;;AAEA,OAAK/F,OAAL,GAAe,YAAM;AACnB,WAAOA,OAAP;AACD,GAFD;AAIA;;;;;;;;;;;;AAUA,OAAKoG,cAAL,GAAsB,UAACxE,GAAD,EAAMC,MAAN,EAAcwE,EAAd,EAAqB;AACzC,QAAIC,QAAJ;AAAA,QACEvE,IADF;AAAA,QAEEC,OAAO,GAAGH,MAFZ;AAAA,QAGE0E,GAAG,GAAGF,EAHR;;AAKA,QAAI,OAAOxE,MAAP,KAAkB,UAAtB,EAAkC;AAChC0E,MAAAA,GAAG,GAAG1E,MAAN;AACAG,MAAAA,OAAO,GAAGwE,SAAV;AACD;;AAED,QAAI,OAAO5E,GAAP,KAAe,QAAnB,EAA6B;AAC3B0E,MAAAA,QAAQ,GAAG1E,GAAX;AACAG,MAAAA,IAAI,GAAGuE,QAAQ,CAAC1E,GAAhB;AACA,UAAIA,GAAG,CAACC,MAAR,EAAgBG,OAAO,GAAGJ,GAAG,CAACC,MAAd;AACjB,KAJD,MAIO;AACLE,MAAAA,IAAI,GAAGH,GAAP;AACD;;AAED,QAAIK,GAAJ;;AACA,QAAIsE,GAAJ,EAAS;AACP,UAAMnG,QAAO,GAAG,SAAVA,QAAU,CAAAqG,IAAI,EAAI;AACtB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,eAAOD,IAAI,CAACC,IAAZ;;AACAH,QAAAA,GAAG,CAAC,IAAD,EAAOE,IAAP,EAAaC,IAAb,CAAH;AACD,OAJD;;AAKAzE,MAAAA,GAAG,GAAG,IAAI1C,KAAJ,CAAUa,QAAV,EAAmBmG,GAAnB,EAAwBD,QAAxB,EAAkClF,IAAlC,EAAwCW,IAAxC,EAA8CC,OAA9C,CAAN;AACD,KAPD,MAOO;AACLC,MAAAA,GAAG,GAAG,IAAI1C,KAAJ,CACJ,YAAM,CAAE,CADJ,EAEJ,YAAM,CAAE,CAFJ,EAGJ+G,QAHI,EAIJlF,IAJI,EAKJW,IALI,EAMJC,OANI,CAAN;AAQD;;AACDC,IAAAA,GAAG,CAAC0E,aAAJ,GAAoB,UAAAC,GAAG,EAAI;AACzB3E,MAAAA,GAAG,CAAC4E,KAAJ,CAAU5E,GAAG,CAAC6E,cAAd,EAA8B3C,IAA9B,CAAmCyC,GAAnC;;AACA3E,MAAAA,GAAG,CAAC2D,IAAJ,CAAS,MAAT,EAAiBgB,GAAjB;AACD,KAHD;;AAKA,QAAIxF,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,IAAAA,WAAW,CAACgB,GAAD,CAAX;;AACA,WAAOA,GAAP;AACD,GA7CD;AA+CA;;;;;;;;;;;;AAUA,OAAK8E,cAAL,GAAsB,UAACnF,GAAD,EAAMC,MAAN,EAAcwE,EAAd,EAAqB;AACzC,QAAIC,QAAJ;AAAA,QACEvE,IADF;AAAA,QAEEC,OAAO,GAAGH,MAFZ;AAAA,QAGE0E,GAAG,GAAGF,EAHR;;AAKA,QAAI,OAAOxE,MAAP,KAAkB,UAAtB,EAAkC;AAChC0E,MAAAA,GAAG,GAAG1E,MAAN;AACAG,MAAAA,OAAO,GAAGwE,SAAV;AACD;;AAED,QAAI,OAAO5E,GAAP,KAAe,QAAnB,EAA6B;AAC3B0E,MAAAA,QAAQ,GAAG1E,GAAX;AACAG,MAAAA,IAAI,GAAGuE,QAAQ,CAAC1E,GAAhB;AACA,UAAIA,GAAG,CAACC,MAAR,EAAgBG,OAAO,GAAGJ,GAAG,CAACC,MAAd;AACjB,KAJD,MAIO;AACLE,MAAAA,IAAI,GAAGH,GAAP;AACD;;AAED,QAAII,OAAO,KAAKwE,SAAhB,EAA2B;AACzBxE,MAAAA,OAAO,GAAGU,KAAK,CAACC,OAAN,CAAcX,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAA7C;AACD;;AAED,QAAIC,GAAJ;;AAEA,QAAI,CAACD,OAAL,EAAc;AACZ,UAAIuE,GAAJ,EAAS;AACPA,QAAAA,GAAG,CACDxH,MAAM,CAAC0B,WAAP,CACE,sCAAsCsB,IAAtC,GAA6C,kBAD/C,EAEE,KAFF,EAGErB,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACyD,uBALT,CADC,CAAH;AASD;;AACD,aAAO,IAAP;AACD;;AAED,QAAII,OAAO,GAAGC,UAAU,CAACb,OAAD,CAAxB;AAEA,QAAMgF,GAAG,GAAGpE,OAAO,GAAGnD,SAAH,GAAeD,YAAlC;;AAEA,QAAI+G,GAAJ,EAAS;AACP,UAAMnG,SAAO,GAAG,SAAVA,SAAU,CAAAqG,IAAI,EAAI;AACtB,YAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,eAAOD,IAAI,CAACC,IAAZ;;AACAH,QAAAA,GAAG,CAAC,IAAD,EAAOE,IAAP,EAAaC,IAAb,CAAH;AACD,OAJD;;AAKAzE,MAAAA,GAAG,GAAG,IAAI+E,GAAJ,CAAQ5G,SAAR,EAAiBmG,GAAjB,EAAsBD,QAAtB,EAAgClF,IAAhC,EAAsCW,IAAtC,EAA4CC,OAA5C,CAAN;AACD,KAPD,MAOO;AACLC,MAAAA,GAAG,GAAG,IAAI+E,GAAJ,CACJ,YAAM,CAAE,CADJ,EAEJ,YAAM,CAAE,CAFJ,EAGJV,QAHI,EAIJlF,IAJI,EAKJW,IALI,EAMJC,OANI,CAAN;AAQD;;AACDC,IAAAA,GAAG,CAAC0E,aAAJ,GAAoB,UAAAC,GAAG,EAAI;AACzB3E,MAAAA,GAAG,CAAC4E,KAAJ,CAAU5E,GAAG,CAAC6E,cAAd,EAA8B3C,IAA9B,CAAmCyC,GAAnC;;AACA3E,MAAAA,GAAG,CAAC2D,IAAJ,CAAS,MAAT,EAAiBgB,GAAjB;AACD,KAHD;;AAKA,QAAIxF,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,IAAAA,WAAW,CAACgB,GAAD,CAAX;;AACA,WAAOA,GAAP;AACD,GArED;AAuEA;;;;;;;;AAMA,MAAMY,UAAU,GAAG,SAAbA,UAAa,CAAAhB,MAAM,EAAI;AAC3B,QAAIe,OAAO,GAAGlC,IAAI,CAACK,SAAL,MAAoBL,IAAI,CAACyC,aAAL,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,CAA1B,CAApB,IAAoD/B,IAAI,CAAC6F,IAAvE;;AACA,QAAIrE,OAAJ,EAAa;AACX;AACA,UAAIf,MAAM,KAAK2E,SAAf,EAA0B;AACxB,YAAI,CAACpF,IAAI,CAAC8F,iBAAV,EAA6B;AAC3B;AACA;AACA,cAAMC,QAAQ,GAAGzE,KAAK,CAACC,OAAN,CAAcd,MAAM,CAAC,CAAD,CAApB,IAA2BA,MAAM,CAAC,CAAD,CAAN,CAAUuC,MAArC,GAA8CvC,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ,GAAgB,CAA/E;AACA,cAAIsF,QAAQ,IAAI,CAAhB,EAAmB,OAAO,KAAP;;AACnB,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvF,MAAM,CAACuC,MAA3B,EAAmCgD,CAAC,EAApC,EAAwC;AACtC,gBAAIR,GAAG,GAAG/E,MAAM,CAACuF,CAAD,CAAhB;AACA,gBAAI,CAAC1E,KAAK,CAACC,OAAN,CAAciE,GAAd,CAAL,EAAyBA,GAAG,GAAG,CAACA,GAAD,CAAN;;AACzB,gBAAIO,QAAQ,KAAKP,GAAG,CAACxC,MAArB,EAA6B;AAC3B,qBAAO,KAAP;AACD;;AACD,iBAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8BE,CAAC,EAA/B,EAAmC;AACjC,kBAAM1B,GAAG,GAAGiB,GAAG,CAACS,CAAD,CAAf;;AACA,kBACE1B,GAAG,KAAK,IAAR,IACA,OAAOA,GAAP,KAAe,QADf,IAEA,OAAOA,GAAG,CAAC2B,IAAX,KAAoB,UAFpB,IAGA,OAAO3B,GAAG,CAAC4B,IAAX,KAAoB,UAJtB,EAKE;AACA,uBAAO,KAAP;AACD;AACF;AACF;AACF,SAvBD,MAuBO;AACL,eAAK,IAAIH,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGvF,MAAM,CAACuC,MAA3B,EAAmCgD,EAAC,EAApC,EAAwC;AACtC,gBAAIR,IAAG,GAAG/E,MAAM,CAACuF,EAAD,CAAhB;AACA,gBAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYZ,IAAZ,CAAb;;AACA,iBAAK,IAAIS,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGG,IAAI,CAACpD,MAAzB,EAAiCiD,EAAC,EAAlC,EAAsC;AACpC,kBAAM1B,IAAG,GAAGiB,IAAG,CAACY,IAAI,CAACH,EAAD,CAAL,CAAf;;AACA,kBACE1B,IAAG,KAAK,IAAR,IACA,OAAOA,IAAP,KAAe,QADf,IAEA,OAAOA,IAAG,CAAC2B,IAAX,KAAoB,UAFpB,IAGA,OAAO3B,IAAG,CAAC4B,IAAX,KAAoB,UAJtB,EAKE;AACA,uBAAO,KAAP;AACD;AACF;AACF;AACF;AACF;AACF;;AACD,WAAO3E,OAAP;AACD,GAhDD;AAkDA;;;;;;;AAKA,MAAMtC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,OAAD,EAAUsH,QAAV,EAAuB;AACnD,QAAMC,SAAS,GAAGtG,gBAAgB,CAACC,IAAjB,CAAsB,KAAtB,EAA4BoG,QAA5B,CAAlB;;AACA,QAAME,YAAY,GAAGC,mBAAmB,CAACvG,IAApB,CAAyB,KAAzB,EAA+BlB,OAA/B,EAAwCuH,SAAxC,CAArB;;AAEA,QAAMG,SAAS,GAAG,IAAI3I,SAAJ,CAChByI,YADgB,EAEhBD,SAFgB,EAGhBI,oBAAoB,CAACzG,IAArB,CAA0B,KAA1B,EAAgCqG,SAAhC,CAHgB,EAIhB1G,WAAW,CAACK,IAAZ,CAAiB,KAAjB,CAJgB,EAKhB0G,UALgB,CAAlB;AAOA7F,IAAAA,KAAK,CAACC,iBAAN,CAAwB0F,SAAxB;AAEAA,IAAAA,SAAS,CAACG,IAAV,CAAe,KAAf,EAAsB,YAAM;AAC1B5D,MAAAA,OAAO,CAACC,QAAR,CAAiBC,YAAjB;AACD,KAFD;;AAIAR,IAAAA,aAAa,CAACI,IAAd,CAAmB2D,SAAnB;;AACAI,IAAAA,WAAW,CAACP,SAAD,CAAX;AACD,GAnBD;;AAqBA,MAAMQ,4BAA4B,GAAG,SAA/BA,4BAA+B,GAAM;AACzC,QAAI/G,IAAI,CAACgH,gBAAT,EAA2B;AACzB,UAAMvG,MAAM,GAAG,EAAf;AACA,UAAIwG,YAAY,GAAG,MAAnB;AACA,UAAIb,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYpG,IAAI,CAACgH,gBAAjB,CAAX;;AACA,UAAIZ,IAAI,CAACpD,MAAL,GAAc,CAAlB,EAAqB;AACnB,eAAO,IAAIjE,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,eAAK,IAAIiI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACpD,MAAzB,EAAiC,EAAEkE,CAAnC,EAAsC;AACpCD,YAAAA,YAAY,IACV,CAACC,CAAC,KAAK,CAAN,GAAU,GAAV,GAAgB,EAAjB,IAAuB,IAAvB,GAA8Bd,IAAI,CAACc,CAAD,CAAJ,CAAQC,OAAR,CAAgB,cAAhB,EAAgC,EAAhC,CAA9B,GAAoE,IADtE;AAEA1G,YAAAA,MAAM,CAACsC,IAAP,CAAY/C,IAAI,CAACgH,gBAAL,CAAsBZ,IAAI,CAACc,CAAD,CAA1B,CAAZ;AACD;;AACD,cAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,UAAU,EAAI;AAClCpI,YAAAA,MAAM,CACJtB,MAAM,CAAC0B,WAAP,CACE,2CACEiI,IAAI,CAACC,SAAL,CAAevH,IAAI,CAACgH,gBAApB,CADF,GAEE,YAFF,GAGEK,UAAU,CAACG,OAJf,EAKE,IALF,EAMElI,IANF,EAOE,OAPF,EAQE3B,MAAM,CAAC8J,wBART,EASE,IATF,CADI,CAAN;AAaD,WAdD;;AAeA,cAAM5G,GAAG,GAAG,IAAI1C,KAAJ,CAAUa,OAAV,EAAmBoI,aAAnB,EAAkC,IAAlC,EAAwCpH,IAAxC,EAA8CiH,YAA9C,EAA4DxG,MAA5D,CAAZ;AACA,cAAIT,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,UAAAA,WAAW,CAACgB,GAAD,CAAX;AACD,SAxBM,CAAP;AAyBD;AACF;;AACD,WAAO9B,OAAO,CAACC,OAAR,EAAP;AACD,GAlCD;AAoCA;;;;;;;AAKA,MAAM0I,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,QAAI1H,IAAI,CAAC2H,QAAL,KAAkB,MAAtB,EAA8B;AAC5B,aAAO5I,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,WAAO,KAAI,CAACoB,KAAL,CAAW,+CAAX,EAA4DmD,IAA5D,CAAiE,UAAAzD,GAAG,EAAI;AAC7E,UAAM8H,cAAc,GAAG9H,GAAG,CAAC,CAAD,CAAH,CAAO+H,EAAP,KAAc,QAAd,GAAyB/H,GAAG,CAAC,CAAD,CAAH,CAAOgI,GAAhC,GAAsChI,GAAG,CAAC,CAAD,CAAH,CAAO+H,EAApE;AACA,UAAME,UAAU,GAAGjK,MAAM,CAAC+J,EAAP,CAAUG,IAAV,CAAeJ,cAAf,CAAnB;;AACA,UAAIG,UAAJ,EAAgB;AACd,YAAIH,cAAc,KAAK9J,MAAM,CAAC+J,EAAP,CAAUI,KAAV,EAAvB,EAA0C;AACxC;AACAjI,UAAAA,IAAI,CAAC6H,EAAL,GAAU,IAAV;AACD,SAHD,MAGO;AACL7H,UAAAA,IAAI,CAAC6H,EAAL,GAAU/J,MAAM,CAAC+J,EAAP,CAAUK,UAAV,CAAqBN,cAArB,CAAV;AACD;AACF,OAPD,MAOO;AACL,eAAO7I,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,wDACEuI,cADF,GAEE,uGAHJ,EAIE,IAJF,EAKEtI,IALF,EAME,OANF,EAOE3B,MAAM,CAACwK,sBAPT,CADK,CAAP;AAWD;;AACD,aAAOpJ,OAAO,CAACC,OAAR,EAAP;AACD,KAxBM,CAAP;AAyBD,GA7BD;;AA+BA,MAAMoJ,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAI,CAACpI,IAAI,CAACqI,iBAAV,EAA6B;AAC3B,aAAOtJ,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,WAAO,KAAI,CAACoB,KAAL,CAAW,uBAAX,EAAoCmD,IAApC,CAAyC,UAAAzD,GAAG,EAAI;AACrDR,MAAAA,IAAI,CAAC0C,aAAL,CAAmBqC,GAAnB,GAAyBvE,GAAG,CAAC,CAAD,CAAH,CAAOwI,CAAhC;AACAhJ,MAAAA,IAAI,CAAC0C,aAAL,CAAmBuG,OAAnB,GAA6BjJ,IAAI,CAAC0C,aAAL,CAAmBqC,GAAnB,CAAuBmE,QAAvB,CAAgC,SAAhC,CAA7B;AACA/K,MAAAA,qBAAqB,CAACgL,kBAAtB,CAAyCnJ,IAAzC;AACA,aAAOP,OAAO,CAACC,OAAR,EAAP;AACD,KALM,CAAP;AAMD,GAVD;;AAYA,MAAM0J,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAI1I,IAAI,CAAC2I,OAAT,EAAkB;AAChB,UAAMC,UAAU,GAAGtH,KAAK,CAACC,OAAN,CAAcvB,IAAI,CAAC2I,OAAnB,IAA8B3I,IAAI,CAAC2I,OAAnC,GAA6C,CAAC3I,IAAI,CAAC2I,OAAN,CAAhE;AACA,UAAME,eAAe,GAAG,EAAxB;AACAD,MAAAA,UAAU,CAACE,OAAX,CAAmB,UAAAtI,GAAG,EAAI;AACxBqI,QAAAA,eAAe,CAAC9F,IAAhB,CACE,IAAIhE,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACpC,cAAMmI,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,UAAU,EAAI;AAClCpI,YAAAA,MAAM,CACJtB,MAAM,CAAC0B,WAAP,CACE,0CAA0CgI,UAAU,CAACG,OADvD,EAEE,IAFF,EAGElI,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACoL,oBALT,EAME,IANF,CADI,CAAN;AAUD,WAXD;;AAYA,cAAMlI,GAAG,GAAG,IAAI1C,KAAJ,CAAUa,OAAV,EAAmBoI,aAAnB,EAAkC,IAAlC,EAAwCpH,IAAxC,EAA8CQ,GAA9C,EAAmD,IAAnD,CAAZ;AACA,cAAIR,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,UAAAA,WAAW,CAACgB,GAAD,CAAX;AACD,SAhBD,CADF;AAmBD,OApBD;AAqBA,aAAO9B,OAAO,CAACiK,GAAR,CAAYH,eAAZ,CAAP;AACD;;AACD,WAAO9J,OAAO,CAACC,OAAR,EAAP;AACD,GA5BD;;AA8BA,MAAMiK,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,QAAIjJ,IAAI,CAACkJ,YAAT,EAAuB;AACrB,UAAI5J,IAAI,CAACK,SAAL,MAAoBL,IAAI,CAACyC,aAAL,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,CAA1B,CAAxB,EAAsD;AACpD,eAAO,IAAIhD,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,cAAMmI,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,UAAU,EAAI;AAClCpI,YAAAA,MAAM,CACJtB,MAAM,CAAC0B,WAAP,CACE,yCAAyCgI,UAAU,CAACG,OADtD,EAEE,IAFF,EAGElI,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACwL,wBALT,EAME,IANF,CADI,CAAN;AAUD,WAXD;;AAYA,cAAMtI,GAAG,GAAG,IAAI1C,KAAJ,CACVa,OADU,EAEVoI,aAFU,EAGV,IAHU,EAIVpH,IAJU,EAKV,4BAA4BA,IAAI,CAACkJ,YAAL,GAAoB,IALtC,EAMV,IANU,CAAZ;AAQA,cAAIlJ,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,UAAAA,WAAW,CAACgB,GAAD,CAAX;AACD,SAvBM,CAAP;AAwBD,OAzBD,MAyBO;AACL,eAAO9B,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,oFACEW,IAAI,CAACkJ,YAFT,EAGE,KAHF,EAIE5J,IAJF,EAKE,OALF,EAME3B,MAAM,CAACyL,wBANT,CADK,CAAP;AAUD;AACF;;AACD,WAAOrK,OAAO,CAACC,OAAR,EAAP;AACD,GAzCD;;AA2CA,MAAM4H,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,WAAOjF,OAAP;AACD,GAFD;AAIA;;;;;;AAIA,MAAMmF,WAAW,GAAG,SAAdA,WAAc,CAAAuC,eAAe,EAAI;AACrC,QAAIrJ,IAAI,CAACsJ,UAAT,EAAqB;AACnB3H,MAAAA,OAAO,GAAGxE,GAAG,CAACwB,OAAJ,CAAYqB,IAAI,CAACsJ,UAAjB,CAAV;AACD,KAFD,MAEO;AACL3H,MAAAA,OAAO,GAAGxE,GAAG,CAACwB,OAAJ,CAAYqB,IAAI,CAACuJ,IAAjB,EAAuBvJ,IAAI,CAACwJ,IAA5B,CAAV;AACD;;AAED,QAAIxJ,IAAI,CAACyJ,cAAT,EAAyB;AACvBnH,MAAAA,QAAQ,GAAGoH,UAAU,CACnBC,sBADmB,EAEnB3J,IAAI,CAACyJ,cAFc,EAGnBJ,eAHmB,EAInBO,IAAI,CAACC,GAAL,EAJmB,CAArB;AAMD;;AAED,QAAMC,YAAY,GAAGC,mBAAmB,CAAC7J,IAApB,CAAyB,KAAzB,EAA+BmJ,eAA/B,CAArB;;AAEA1H,IAAAA,OAAO,CAACqI,EAAR,CAAW,MAAX,EAAmBC,GAAG,CAACC,MAAJ,CAAWhK,IAAX,CAAgB+J,GAAhB,CAAnB;;AACAtI,IAAAA,OAAO,CAACqI,EAAR,CAAW,OAAX,EAAoBF,YAApB;;AACAnI,IAAAA,OAAO,CAACqI,EAAR,CAAW,KAAX,EAAkBF,YAAlB;;AACAnI,IAAAA,OAAO,CAACqI,EAAR,CACE,SADF,EAEE,YAAW;AACT3H,MAAAA,YAAY,CAACC,QAAD,CAAZ;;AACA,UAAI1D,OAAO,KAAKJ,MAAM,CAACM,UAAvB,EAAmC;AACjCF,QAAAA,OAAO,GAAGJ,MAAM,CAACgB,cAAjB;AACA2K,QAAAA,gBAAgB,GAAG,IAAnB;;AACAxI,QAAAA,OAAO,CAAC+H,UAAR,CAAmB1J,IAAI,CAACoK,aAAxB,EAAuCC,qBAAqB,CAACnK,IAAtB,CAA2B,IAA3B,EAAiCmJ,eAAjC,CAAvC;;AACA1H,QAAAA,OAAO,CAAC2I,UAAR,CAAmB,IAAnB;AACD;AACF,KARD,CAQEpK,IARF,CAQO,KARP,CAFF;;AAaAyB,IAAAA,OAAO,CAAC4I,QAAR,GAAmB5I,OAAO,CAAC6I,KAA3B;;AACA7I,IAAAA,OAAO,CAAC8I,KAAR,GAAgB,YAAM,CAAE,CAAxB;;AACAC,IAAAA,IAAI,CAACC,SAAL,CAAehJ,OAAf;AACD,GArCD;AAuCA;;;;;;;AAKA,MAAM8E,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACzH,OAAD,EAAUsH,QAAV,EAAuB;AACjD;AACA,QAAItG,IAAI,CAACyE,UAAT,EAAqBnF,IAAI,CAACsL,eAAL;;AACrB,QAAI5K,IAAI,CAAC6K,QAAT,EAAmB;AACjB,UAAIvL,IAAI,CAACwL,kBAAL,GAA0BjN,YAAY,CAACkN,QAA3C,EAAqD;AACnDL,QAAAA,IAAI,CAACC,SAAL,CAAe,IAAIpN,uBAAJ,CAA4BoE,OAA5B,EAAqC3B,IAArC,EAA2CV,IAA3C,CAAf;;AACA2K,QAAAA,GAAG,GAAG,IAAI3M,sBAAJ,CAA2B2M,GAA3B,EAAgCtH,aAAhC,EAA+C3C,IAA/C,EAAqDV,IAArD,CAAN;;AACAqC,QAAAA,OAAO,CAACqJ,kBAAR,CAA2B,MAA3B;;AACArJ,QAAAA,OAAO,CAACqI,EAAR,CAAW,MAAX,EAAmBC,GAAG,CAACC,MAAJ,CAAWhK,IAAX,CAAgB+J,GAAhB,CAAnB;AACD,OALD,MAKO;AACLgB,QAAAA,OAAO,CAACC,KAAR,CACE,iGADF;AAGD;AACF;;AAED,QAAIlL,IAAI,CAACmL,UAAT,EAAqB;AACnBtL,MAAAA,WAAW,GAAGuL,yBAAd;;AACA,UAAMC,QAAQ,GAAG1I,aAAa,CAAC2I,OAAd,EAAjB;;AACAD,MAAAA,QAAQ,CAACvC,OAAT,CAAiB,UAAAjI,GAAG,EAAI;AACtB,YAAM0K,SAAS,GAAG1K,GAAG,CAAC0K,SAAJ,CAAc,KAAd,CAAlB;AACA1K,QAAAA,GAAG,CAAC2K,cAAJ,CAAmB,KAAnB,EAA0BD,SAAS,CAAC,CAAD,CAAnC;AACA1K,QAAAA,GAAG,CAACgG,IAAJ,CAAS,UAAT,EAAqB,YAAM;AACzB7C,UAAAA,YAAY,CAACb,YAAD,CAAZ;AACD,SAFD;AAGD,OAND;AAOD;;AAED,QAAMsI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA3H,GAAG,EAAI;AACjC,UAAI,CAACA,GAAG,CAAC4H,KAAT,EAAgB,KAAI,CAACvJ,GAAL,GAAWyB,KAAX,CAAiB,UAAAE,GAAG,EAAI,CAAE,CAA1B;AAChBb,MAAAA,OAAO,CAACC,QAAR,CAAiBoD,QAAjB,EAA2BxC,GAA3B;AACD,KAHD;;AAKAiD,IAAAA,4BAA4B,GACzBxD,IADH,CACQ,YAAM;AACV,aAAOmE,oBAAoB,EAA3B;AACD,KAHH,EAIGnE,IAJH,CAIQ,YAAM;AACV,aAAO6E,mBAAmB,EAA1B;AACD,KANH,EAOG7E,IAPH,CAOQ,YAAM;AACV,aAAOmF,iBAAiB,EAAxB;AACD,KATH,EAUGnF,IAVH,CAUQ,YAAM;AACV,aAAO0F,sBAAsB,EAA7B;AACD,KAZH,EAaG1F,IAbH,CAaQ,YAAM;AACV3E,MAAAA,OAAO,GAAGJ,MAAM,CAAC0D,SAAjB;AACAe,MAAAA,OAAO,CAACC,QAAR,CAAiBlE,OAAjB,EAA0B,KAA1B;AACD,KAhBH,EAiBG4E,KAjBH,CAiBS6H,mBAjBT;AAkBD,GAnDD;AAqDA;;;;;;;AAKA,MAAMxL,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAChB,MAAD,EAAS6E,GAAT,EAAiB;AACxCb,IAAAA,OAAO,CAACC,QAAR,CAAiBjE,MAAjB,EAAyB6E,GAAzB,EADwC,CAExC;;AACAnB,IAAAA,aAAa,CAACgJ,KAAd;;AAEAC,IAAAA,WAAW,CAAC9H,GAAD,EAAM,IAAN,CAAX;AACD,GAND;AAQA;;;;;;;;;AAOA,MAAM6C,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACL,QAAD,EAAWuF,QAAX,EAAwB;AACnD,QAAM/B,YAAY,GAAGC,mBAAmB,CAAC7J,IAApB,CAAyB,KAAzB,EAA+BoG,QAA/B,CAArB;;AACA,QAAMwF,SAAS,GAAGzF,MAAM,CAAC0F,MAAP,CAAc,EAAd,EAAkB/L,IAAI,CAACgM,GAAvB,EAA4B;AAC5CC,MAAAA,UAAU,EAAEjM,IAAI,CAACwJ,IAD2B;AAE5C0C,MAAAA,MAAM,EAAEvK;AAFoC,KAA5B,CAAlB;;AAKA,QAAI;AACF,UAAMwK,YAAY,GAAGzO,GAAG,CAACiB,OAAJ,CAAYmN,SAAZ,EAAuBD,QAAvB,CAArB;AAEAM,MAAAA,YAAY,CAACnC,EAAb,CAAgB,MAAhB,EAAwBC,GAAG,CAACC,MAAJ,CAAWhK,IAAX,CAAgB+J,GAAhB,CAAxB;AACAkC,MAAAA,YAAY,CAACnC,EAAb,CAAgB,OAAhB,EAAyBF,YAAzB;AACAqC,MAAAA,YAAY,CAACnC,EAAb,CAAgB,KAAhB,EAAuBF,YAAvB;AACAqC,MAAAA,YAAY,CAAC5B,QAAb,GAAwB4B,YAAY,CAAC3B,KAArC;;AACA2B,MAAAA,YAAY,CAAC1B,KAAb,GAAqB,YAAM,CAAE,CAA7B;;AAEA9I,MAAAA,OAAO,CAACqJ,kBAAR,CAA2B,MAA3B;;AACArJ,MAAAA,OAAO,GAAGwK,YAAV;;AAEAzB,MAAAA,IAAI,CAACC,SAAL,CAAewB,YAAf;AACD,KAbD,CAaE,OAAOrI,GAAP,EAAY;AACZgG,MAAAA,YAAY,CAAChG,GAAD,CAAZ;AACD;AACF,GAvBD;AAyBA;;;;;;;;;AAOA,MAAMsI,iBAAiB,GAAG,SAApBA,iBAAoB,CAASC,MAAT,EAAiB;AACzC,QAAIA,MAAM,IAAIA,MAAM,CAACC,IAAP,OAAkB,IAAhC,EAAsC;AACpC;AACA;AACA,UAAIxI,GAAG,GAAGuI,MAAM,CAACE,SAAP,CAAiBjN,IAAjB,CAAV;;AACA,UAAIwE,GAAG,CAAC4H,KAAJ,IAAa9M,OAAO,KAAKJ,MAAM,CAACW,OAAhC,IAA2CP,OAAO,KAAKJ,MAAM,CAACY,MAAlE,EAA0E;AACxE,aAAKoF,IAAL,CAAU,OAAV,EAAmBV,GAAnB;AACA,aAAK3B,GAAL;AACD;AACF,KARD,MAQO,IAAIvD,OAAO,KAAKJ,MAAM,CAACW,OAAnB,IAA8BP,OAAO,KAAKJ,MAAM,CAACY,MAArD,EAA6D;AAClE,WAAKoF,IAAL,CACE,OADF,EAEE7G,MAAM,CAAC0B,WAAP,CACE,2DACE,OADF,IAEGC,IAAI,CAACuE,QAAL,GAAgBvE,IAAI,CAACuE,QAArB,GAAgC,CAAC,CAFpC,IAGE,GAHF,GAIEwI,MAAM,CAACG,GAJT,GAKE,GALF,GAMEH,MAAM,CAAClK,GANT,GAOE,KAPF,GAQEvE,KAAK,CAAC6O,GAAN,CAAUzM,IAAV,EAAgBqM,MAAM,CAACK,GAAvB,EAA4BL,MAAM,CAACG,GAAnC,EAAwCH,MAAM,CAAClK,GAA/C,CATJ,EAUE,IAVF,EAWE7C,IAXF,EAYE,OAZF,EAaE3B,MAAM,CAACgP,oBAbT,CAFF;AAkBA,WAAKnK,OAAL;AACD;AACF,GA9BD;AAgCA;;;;;;;;;AAOA,MAAMlC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAE,GAAG,EAAI;AAChC;AACA,QAAI5B,OAAO,KAAKJ,MAAM,CAACW,OAAnB,IAA8BP,OAAO,KAAKJ,MAAM,CAACY,MAArD,EAA6D;AAC3D,aAAOL,OAAO,CAACE,MAAR,CACLtB,MAAM,CAAC0B,WAAP,CACE,0DAA0DmB,GAD5D,EAEE,IAFF,EAGElB,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACiP,wBALT,CADK,CAAP;AASD,KAZ+B,CAchC;AACA;;;AACA,QAAIjK,aAAa,CAACkK,SAAd,MAA6BvN,IAAI,CAACwN,MAAL,GAActP,YAAY,CAACuP,eAA5D,EAA6E;AAC3E,aAAO,IAAIhO,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,YAAM4B,GAAG,GAAG,IAAI1C,KAAJ,CAAUa,OAAV,EAAmBC,MAAnB,EAA2B,IAA3B,EAAiCe,IAAjC,EAAuCQ,GAAvC,EAA4C,IAA5C,CAAZ;AACA,YAAIR,IAAI,CAACc,KAAT,EAAgBC,KAAK,CAACC,iBAAN,CAAwBH,GAAxB;;AAChBhB,QAAAA,WAAW,CAACgB,GAAD,CAAX;AACD,OAJM,CAAP;AAKD;;AACD,WAAO9B,OAAO,CAACC,OAAR,EAAP;AACD,GAxBD;AA0BA;;;;;;;AAKA,MAAM2K,sBAAsB,GAAG,SAAzBA,sBAAyB,CAASN,eAAT,EAA0B2D,qBAA1B,EAAiD;AAC9E1K,IAAAA,QAAQ,GAAG,IAAX;;AACA,QAAMoE,SAAS,GAAG/D,aAAa,CAACkK,SAAd,EAAlB;;AACAxD,IAAAA,eAAe,CACb1L,MAAM,CAAC0B,WAAP,CACE,wDACGuK,IAAI,CAACC,GAAL,KAAamD,qBADhB,IAEE,IAHJ,EAIE,IAJF,EAKE1N,IALF,EAME,OANF,EAOE3B,MAAM,CAACsP,qBAPT,EAQEvG,SAAS,GAAGA,SAAS,CAACwG,KAAb,GAAqB,IARhC,CADa,CAAf;AAYD,GAfD;AAiBA;;;;;;;AAKA,MAAM7C,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAW;AACvC,QAAMvG,GAAG,GAAGnG,MAAM,CAAC0B,WAAP,CAAmB,gBAAnB,EAAqC,IAArC,EAA2CC,IAA3C,EAAiD,OAAjD,EAA0D3B,MAAM,CAACwP,iBAAjE,CAAZ;AACA,QAAMC,UAAU,GAAG9N,IAAI,CAAC+N,cAAL,EAAnB;;AACA,QAAID,UAAU,KAAK,EAAnB,EAAuB;AACrBtJ,MAAAA,GAAG,CAAC0D,OAAJ,GAAc1D,GAAG,CAAC0D,OAAJ,GAAc,4BAAd,GAA6C4F,UAA3D;AACD;;AACDxB,IAAAA,WAAW,CAAC9H,GAAD,EAAM,IAAN,CAAX;AACD,GAPD;AASA;;;;;;;;;AAOA,MAAMwJ,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAzM,GAAG,EAAI;AAC/BA,IAAAA,GAAG,CAACgG,IAAJ,CAAS,KAAT,EAAgB,YAAM;AACpB7C,MAAAA,YAAY,CAACb,YAAD,CAAZ;AACD,KAFD,EAD+B,CAK/B;;AACA,QAAIL,UAAU,CAACyK,OAAX,MAAwB3O,OAAO,KAAKJ,MAAM,CAAC0D,SAA/C,EAA0D;AACxD,UAAIS,aAAa,CAACkK,SAAd,EAAJ,EAA+B;AAC7BlK,QAAAA,aAAa,CAACI,IAAd,CAAmBlC,GAAnB;;AACAiC,QAAAA,UAAU,CAACC,IAAX,CAAgBlC,GAAhB;;AACA,eAAOA,GAAP;AACD;;AAED8B,MAAAA,aAAa,CAACI,IAAd,CAAmBlC,GAAnB;;AACAA,MAAAA,GAAG,CAAC2M,KAAJ,CAAU9C,IAAV,EAAgB1K,IAAhB,EAAsBV,IAAtB;AACD,KATD,MASO;AACLqD,MAAAA,aAAa,CAACI,IAAd,CAAmBlC,GAAnB;;AACAiC,MAAAA,UAAU,CAACC,IAAX,CAAgBlC,GAAhB;AACD;;AACD,WAAOA,GAAP;AACD,GApBD;AAsBA;;;;;;;;;AAOA,MAAMuK,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAvK,GAAG,EAAI;AACvCA,IAAAA,GAAG,CAACgG,IAAJ,CAAS,UAAT,EAAqB,YAAM;AACzB7C,MAAAA,YAAY,CAACb,YAAD,CAAZ;AACD,KAFD;;AAIAR,IAAAA,aAAa,CAACI,IAAd,CAAmBlC,GAAnB;;AACA,QAAIiC,UAAU,CAACyK,OAAX,EAAJ,EAA0B;AACxB1M,MAAAA,GAAG,CAAC2M,KAAJ,CAAU9C,IAAV,EAAgB1K,IAAhB,EAAsBV,IAAtB;;AACA,UAAIuB,GAAG,CAAC4M,OAAR,EAAiB;AACf3K,QAAAA,UAAU,CAACC,IAAX,CAAgBlC,GAAhB;;AACAA,QAAAA,GAAG,CAAC6M,mBAAJ,CAAwB,UAAxB,EAAoC,YAAM;AACxC5K,UAAAA,UAAU,CAAC6I,KAAX;AACD,SAFD;AAGD;AACF,KARD,MAQO;AACL7I,MAAAA,UAAU,CAACC,IAAX,CAAgBlC,GAAhB;AACD;;AACD,WAAOA,GAAP;AACD,GAlBD;AAoBA;;;;;;;;AAMA,MAAMuB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAvB,GAAG,EAAI;AACjCA,IAAAA,GAAG,CAAC8M,aAAJ,CACE,qDAAqD9M,GAAG,CAAC+M,UAAJ,EADvD,EAEE,IAFF,EAGEtO,IAHF,EAIE,OAJF,EAKE3B,MAAM,CAACiP,wBALT;AAOD,GARD;AAUA;;;;;;;;;AAOA,MAAM7C,mBAAmB,GAAG,SAAtBA,mBAAsB,CAASV,eAAT,EAA0BvF,GAA1B,EAA+B;AACzD,QAAIlF,OAAO,KAAKJ,MAAM,CAACW,OAAnB,IAA8BP,OAAO,KAAKJ,MAAM,CAACY,MAArD,EAA6D;;AAE7DuC,IAAAA,OAAO,CAAC4I,QAAR,GAAmB,YAAM,CAAE,CAA3B;;AACA5I,IAAAA,OAAO,CAAC8I,KAAR,GAAgB,YAAM,CAAE,CAAxB,CAJyD,CAMzD;;;AACA,QAAI,CAAC3G,GAAL,EAAU;AACRA,MAAAA,GAAG,GAAGnG,MAAM,CAAC0B,WAAP,CACJ,qCADI,EAEJ,IAFI,EAGJC,IAHI,EAIJ,OAJI,EAKJ3B,MAAM,CAACkQ,0BALH,CAAN;AAOD,KARD,MAQO;AACL/J,MAAAA,GAAG,CAAC4H,KAAJ,GAAY,IAAZ;AACA,WAAKoC,QAAL,GAAgB,OAAhB;AACD;;AAED,QAAMV,UAAU,GAAG9N,IAAI,CAAC+N,cAAL,EAAnB;;AACA,QAAID,UAAU,KAAK,EAAnB,EAAuB;AACrBtJ,MAAAA,GAAG,CAAC0D,OAAJ,IAAe,+BAA+B4F,UAA9C;AACD;;AAED,YAAQxO,OAAR;AACE,WAAKJ,MAAM,CAACM,UAAZ;AACA,WAAKN,MAAM,CAACgB,cAAZ;AACE,YAAMuO,UAAU,GAAGpL,aAAa,CAACkK,SAAd,EAAnB;;AACA,YAAIkB,UAAU,IAAIA,UAAU,CAACb,KAAzB,IAAkCpJ,GAAtC,EAA2C;AACzCA,UAAAA,GAAG,CAACoJ,KAAJ,IACE,qBAAqBa,UAAU,CAACb,KAAX,CAAiBc,SAAjB,CAA2BD,UAAU,CAACb,KAAX,CAAiBe,OAAjB,CAAyB,IAAzB,IAAiC,CAA5D,CADvB;AAED;;AACD5E,QAAAA,eAAe,CAACvF,GAAD,CAAf;AACA;;AAEF;AACE8H,QAAAA,WAAW,CAAC9H,GAAD,EAAM,KAAN,CAAX;;AAZJ;AAcD,GAvCD;AAyCA;;;;;;;;AAMA,MAAMoK,kBAAkB,GAAG,SAArBA,kBAAqB,CAAS7K,IAAT,EAAe;AACxC,WAAO,UAASS,GAAT,EAAcqK,eAAd,EAA+B;AACpC,UAAIvP,OAAO,KAAKJ,MAAM,CAACW,OAAnB,IAA8BP,OAAO,KAAKJ,MAAM,CAACY,MAArD,EAA6D;AAC3DuE,QAAAA,4BAA4B,CAACG,GAAD,CAA5B;AACA;AACD;;AACD,UAAMsK,cAAc,GAAGxP,OAAO,KAAKJ,MAAM,CAACM,UAA1C;AACAF,MAAAA,OAAO,GAAGJ,MAAM,CAACW,OAAjB,CANoC,CAQpC;;AACAU,MAAAA,WAAW,GAAGuC,mBAAd;;AAEA,UAAIT,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACqJ,kBAAR,CAA2B,OAA3B;;AACArJ,QAAAA,OAAO,CAACqJ,kBAAR,CAA2B,SAA3B;;AACArJ,QAAAA,OAAO,CAACqJ,kBAAR,CAA2B,OAA3B;;AACArJ,QAAAA,OAAO,CAACqJ,kBAAR,CAA2B,MAA3B;;AACA,YAAI,CAACrJ,OAAO,CAAC0M,SAAb,EAAwB1M,OAAO,CAACa,OAAR;AACxBb,QAAAA,OAAO,GAAGyD,SAAV;AACD;;AACDxG,MAAAA,OAAO,GAAGJ,MAAM,CAACY,MAAjB;AAEA,UAAMkP,gBAAgB,GAAG3K,4BAA4B,CAACG,GAAD,CAArD;;AACA,UAAIsK,cAAJ,EAAoB;AAClB,YAAI/K,IAAI,CAACkL,aAAL,CAAmB,OAAnB,IAA8B,CAAlC,EAAqC;AACnClL,UAAAA,IAAI,CAACmB,IAAL,CAAU,OAAV,EAAmBV,GAAnB;AACAT,UAAAA,IAAI,CAACmB,IAAL,CAAU,KAAV;;AACA9B,UAAAA,MAAM;AACP,SAJD,MAIO;AACLW,UAAAA,IAAI,CAACmB,IAAL,CAAU,KAAV;;AACA9B,UAAAA,MAAM,GAFD,CAGL;;;AACA,cAAI,CAACyL,eAAD,IAAoB,CAACG,gBAAzB,EAA2C,MAAMxK,GAAN;AAC5C;AACF,OAXD,MAWO;AACLpB,QAAAA,MAAM;AACP;AACF,KApCD;AAqCD,GAtCD;AAwCA;;;;;;;;AAMA,MAAMiB,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAAG,GAAG,EAAI;AAC1C,QAAI0K,UAAJ;AACA,QAAIF,gBAAgB,GAAG,KAAvB;;AACA,WAAQE,UAAU,GAAG7L,aAAa,CAACgJ,KAAd,EAArB,EAA6C;AAC3C,UAAI6C,UAAU,IAAIA,UAAU,CAACC,eAA7B,EAA8C;AAC5CH,QAAAA,gBAAgB,GAAG,IAAnB;AACAtK,QAAAA,YAAY,CAACwK,UAAU,CAACE,UAAX,CAAsBxO,IAAtB,CAA2BsO,UAA3B,CAAD,EAAyC1K,GAAzC,EAA8CxE,IAA9C,CAAZ;AACD;AACF;;AACD,WAAOgP,gBAAP;AACD,GAVD;AAYA;;;;;;;AAKA,MAAMnL,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIwL,OAAJ;;AACA,QAAKA,OAAO,GAAG7L,UAAU,CAAC6I,KAAX,EAAf,EAAoC;AAClC,UAAIgD,OAAO,CAAClB,OAAZ,EAAqB;AACnB3K,QAAAA,UAAU,CAAC8L,OAAX,CAAmBD,OAAnB;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,CAACnB,KAAR,CAAc9C,IAAd,EAAoB1K,IAApB,EAA0BV,IAA1B;;AACA,YAAIqP,OAAO,CAAClB,OAAZ,EAAqB;AACnBkB,UAAAA,OAAO,CAACjB,mBAAR,CAA4B,UAA5B,EAAwC,YAAM;AAC5C5K,YAAAA,UAAU,CAAC6I,KAAX;AACD,WAFD;;AAGA7I,UAAAA,UAAU,CAAC8L,OAAX,CAAmBD,OAAnB;AACD;AACF;AACF;AACF,GAfD;AAiBA;;;;;;;AAKA,MAAMjM,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBI,IAAAA,UAAU,CAACF,KAAX;;AACA5C,IAAAA,IAAI,CAACgL,kBAAL;AACAN,IAAAA,IAAI,GAAGtF,SAAP;AACAzD,IAAAA,OAAO,GAAGyD,SAAV;AACD,GALD,CAnwC2B,CA0wC3B;AACA;AACA;;;AAEArI,EAAAA,YAAY,CAAC8R,IAAb,CAAkB,IAAlB;AACA,MAAM7O,IAAI,GAAGqG,MAAM,CAAC0F,MAAP,CAAc,IAAIhP,YAAJ,EAAd,EAAkC2B,OAAlC,CAAb;AACA,MAAMY,IAAI,GAAG,IAAI7B,qBAAJ,EAAb;;AACA,MAAMqF,UAAU,GAAG,IAAI5F,KAAJ,EAAnB;;AACA,MAAMyF,aAAa,GAAG,IAAIzF,KAAJ,EAAtB;;AACA,MAAI0B,OAAO,GAAGJ,MAAM,CAACK,aAArB;AACA,MAAIsL,gBAAgB,GAAG,KAAvB;AACA,MAAIxI,OAAO,GAAG,IAAd;AACA,MAAIW,QAAQ,GAAG,IAAf;AACA,MAAIzC,WAAW,GAAGyN,iBAAlB;;AACA,MAAM1B,WAAW,GAAGsC,kBAAkB,CAAC,IAAD,CAAtC;;AACA,MAAIxD,IAAI,GAAG,IAAIrN,kBAAJ,CAAuB2C,IAAvB,EAA6BV,IAA7B,CAAX;;AACA,MAAI2K,GAAG,GAAG,IAAI7M,iBAAJ,CAAsBgP,iBAAiB,CAAClM,IAAlB,CAAuB,IAAvB,CAAtB,EAAoDyC,aAApD,EAAmE+H,IAAnE,EAAyE1K,IAAzE,EAA+EV,IAA/E,CAAV;;AAEA,OAAKwP,MAAL,GAAclR,KAAK,CAACkR,MAAN,CAAa5O,IAAb,CAAkB,IAAlB,EAAwBF,IAAxB,EAA8BV,IAA9B,CAAd;AACA,OAAKyP,QAAL,GAAgBnR,KAAK,CAACmR,QAAN,CAAe7O,IAAf,CAAoB,IAApB,EAA0BF,IAA1B,EAAgCV,IAAhC,CAAhB,CA7xC2B,CA+xC3B;;AACA+G,EAAAA,MAAM,CAAC2I,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;AACtCC,IAAAA,GADsC,iBAChC;AACJ,aAAO3P,IAAI,GAAGA,IAAI,CAACuE,QAAR,GAAmBuB,SAA9B;AACD;AAHqC,GAAxC;AAKAiB,EAAAA,MAAM,CAAC2I,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCC,IAAAA,GADkC,iBAC5B;AACJ,aAAO3P,IAAP;AACD;AAHiC,GAApC;AAKD;;AAEDrC,IAAI,CAACiS,QAAL,CAAczQ,UAAd,EAA0B1B,YAA1B;AAEAoS,MAAM,CAACC,OAAP,GAAiB3Q,UAAjB","sourcesContent":["'use strict';\r\n\r\nconst EventEmitter = require('events');\r\nconst util = require('util');\r\nconst Queue = require('denque');\r\nconst Net = require('net');\r\nconst PacketInputStream = require('./io/packet-input-stream');\r\nconst PacketOutputStream = require('./io/packet-output-stream');\r\nconst CompressionInputStream = require('./io/compression-input-stream');\r\nconst CompressionOutputStream = require('./io/compression-output-stream');\r\nconst ServerStatus = require('./const/server-status');\r\nconst ConnectionInformation = require('./misc/connection-information');\r\nconst tls = require('tls');\r\nconst Errors = require('./misc/errors');\r\nconst Utils = require('./misc/utils');\r\nconst Capabilities = require('./const/capabilities');\r\nconst moment = require('moment-timezone');\r\n\r\n/*commands*/\r\nconst Handshake = require('./cmd/handshake/handshake');\r\nconst Quit = require('./cmd/quit');\r\nconst Ping = require('./cmd/ping');\r\nconst Reset = require('./cmd/reset');\r\nconst Query = require('./cmd/query');\r\nconst BatchRewrite = require('./cmd/batch-rewrite');\r\nconst BatchBulk = require('./cmd/batch-bulk');\r\nconst Stream = require('./cmd/stream');\r\nconst ChangeUser = require('./cmd/change-user');\r\nconst { Status } = require('./const/connection_status');\r\n\r\n/**\r\n * New Connection instance.\r\n *\r\n * @param options    connection options\r\n * @returns Connection instance\r\n * @constructor\r\n * @fires Connection#connect\r\n * @fires Connection#end\r\n * @fires Connection#error\r\n *\r\n */\r\nfunction Connection(options) {\r\n  //*****************************************************************\r\n  // public API functions\r\n  //*****************************************************************\r\n\r\n  /**\r\n   * Connect event\r\n   *\r\n   * @returns {Promise} promise\r\n   */\r\n  this.connect = () => {\r\n    switch (_status) {\r\n      case Status.NOT_CONNECTED:\r\n        _status = Status.CONNECTING;\r\n        return new Promise(function(resolve, reject) {\r\n          _registerHandshakeCmd(resolve, reject);\r\n        });\r\n\r\n      case Status.CLOSING:\r\n      case Status.CLOSED:\r\n        return Promise.reject(\r\n          Errors.createError(\r\n            'Connection closed',\r\n            true,\r\n            info,\r\n            '08S01',\r\n            Errors.ER_CONNECTION_ALREADY_CLOSED\r\n          )\r\n        );\r\n\r\n      case Status.CONNECTING:\r\n      case Status.AUTHENTICATING:\r\n        return Promise.reject(\r\n          Errors.createError(\r\n            'Connection is already connecting',\r\n            true,\r\n            info,\r\n            '08S01',\r\n            Errors.ER_ALREADY_CONNECTING\r\n          )\r\n        );\r\n    }\r\n    //status Connected\r\n    return Promise.resolve(this);\r\n  };\r\n\r\n  /**\r\n   * Permit to change user during connection.\r\n   * All user variables will be reset, Prepare commands will be released.\r\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\r\n   *\r\n   * @param options   connection options\r\n   * @returns {Promise} promise\r\n   */\r\n  this.changeUser = options => {\r\n    if (!info.isMariaDB()) {\r\n      return Promise.reject(\r\n        Errors.createError(\r\n          'method changeUser not available for MySQL server due to Bug #83472',\r\n          false,\r\n          info,\r\n          '0A000',\r\n          Errors.ER_MYSQL_CHANGE_USER_BUG\r\n        )\r\n      );\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      _addCommand(\r\n        new ChangeUser(\r\n          options,\r\n          res => {\r\n            if (options && options.collation) opts.collation = options.collation;\r\n            resolve(res);\r\n          },\r\n          _authFailHandler.bind(this, reject),\r\n          _addCommand.bind(this)\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Start transaction\r\n   *\r\n   * @returns {Promise} promise\r\n   */\r\n  this.beginTransaction = () => {\r\n    return this.query('START TRANSACTION');\r\n  };\r\n\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * @returns {Promise} command if commit was needed only\r\n   */\r\n  this.commit = () => {\r\n    return _changeTransaction('COMMIT');\r\n  };\r\n\r\n  /**\r\n   * Roll back a transaction.\r\n   *\r\n   * @returns {Promise} promise\r\n   */\r\n  this.rollback = () => {\r\n    return _changeTransaction('ROLLBACK');\r\n  };\r\n\r\n  /**\r\n   * Execute query using text protocol.\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @returns {Promise} promise\r\n   */\r\n  this.query = (sql, values) => {\r\n    let _cmdOpt,\r\n      _sql,\r\n      _values = values;\r\n    if (typeof sql === 'object') {\r\n      _cmdOpt = sql;\r\n      _sql = _cmdOpt.sql;\r\n      if (_cmdOpt.values) _values = _cmdOpt.values;\r\n    } else {\r\n      _sql = sql;\r\n    }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      const cmd = new Query(resolve, reject, _cmdOpt, opts, _sql, _values);\r\n      if (opts.trace) Error.captureStackTrace(cmd);\r\n      _addCommand(cmd);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Execute batch using text protocol.\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param initialValues  object / array of placeholder values (not mandatory)\r\n   * @returns {Promise} promise\r\n   */\r\n  this.batch = (sql, initialValues) => {\r\n    let _options,\r\n      _sql,\r\n      _values = initialValues;\r\n    if (typeof sql === 'object') {\r\n      _options = sql;\r\n      _sql = _options.sql;\r\n      if (_options.values) _values = _options.values;\r\n    } else {\r\n      _sql = sql;\r\n    }\r\n\r\n    if (!_values) {\r\n      return Promise.reject(\r\n        Errors.createError(\r\n          'Batch must have values set\\nsql: ' + _sql + ' - parameters:[]',\r\n          false,\r\n          info,\r\n          'HY000',\r\n          Errors.ER_BATCH_WITH_NO_VALUES\r\n        )\r\n      );\r\n    }\r\n\r\n    const vals = Array.isArray(_values) ? _values : [_values];\r\n\r\n    return new Promise(function(resolve, reject) {\r\n      let useBulk = canUseBulk(vals);\r\n\r\n      const cmd = useBulk\r\n        ? new BatchBulk(resolve, reject, _options, opts, _sql, vals)\r\n        : new BatchRewrite(resolve, reject, _options, opts, _sql, vals);\r\n      if (opts.trace) Error.captureStackTrace(cmd);\r\n      _addCommand(cmd);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\r\n   * to permit streaming big result-set\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @returns {Readable}\r\n   */\r\n  this.queryStream = (sql, values) => {\r\n    let _cmdOpt,\r\n      _sql,\r\n      _values = values;\r\n    if (typeof sql === 'object') {\r\n      _cmdOpt = sql;\r\n      _sql = _cmdOpt.sql;\r\n      if (sql.values) _values = sql.values;\r\n    } else {\r\n      _sql = sql;\r\n    }\r\n\r\n    const cmd = new Stream(_cmdOpt, opts, _sql, _values, _socket);\r\n    if (opts.trace) Error.captureStackTrace(cmd);\r\n    _addCommand(cmd);\r\n    return cmd.inStream;\r\n  };\r\n\r\n  /**\r\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\r\n   *\r\n   * @returns {Promise} promise\r\n   */\r\n  this.ping = () => {\r\n    return new Promise(function(resolve, reject) {\r\n      return _addCommand(new Ping(resolve, reject));\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Send a reset command that will\r\n   * - rollback any open transaction\r\n   * - reset transaction isolation level\r\n   * - reset session variables\r\n   * - delete user variables\r\n   * - remove temporary tables\r\n   * - remove all PREPARE statement\r\n   *\r\n   * @returns {Promise} promise\r\n   */\r\n  this.reset = () => {\r\n    if (\r\n      (info.isMariaDB() && info.hasMinVersion(10, 2, 4)) ||\r\n      (!info.isMariaDB() && info.hasMinVersion(5, 7, 3))\r\n    ) {\r\n      return new Promise(function(resolve, reject) {\r\n        return _addCommand(new Reset(resolve, reject));\r\n      });\r\n    }\r\n    return Promise.reject(\r\n      new Error(\r\n        'Reset command not permitted for server ' +\r\n          this.info.serverVersion +\r\n          ' (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)'\r\n      )\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Indicates the state of the connection as the driver knows it\r\n   * @returns {boolean}\r\n   */\r\n  this.isValid = () => {\r\n    return _status === Status.CONNECTED;\r\n  };\r\n\r\n  /**\r\n   * Terminate connection gracefully.\r\n   *\r\n   * @returns {Promise} promise\r\n   */\r\n  this.end = () => {\r\n    _addCommand = _addCommandDisabled;\r\n    clearTimeout(_timeout);\r\n\r\n    if (\r\n      _status !== Status.CLOSING &&\r\n      _status !== Status.CLOSED &&\r\n      _status !== Status.NOT_CONNECTED\r\n    ) {\r\n      _status = Status.CLOSING;\r\n      return new Promise(function(resolve, reject) {\r\n        const ended = () => {\r\n          _status = Status.CLOSED;\r\n          _socket.destroy();\r\n          _socket.unref();\r\n          _clear();\r\n          _receiveQueue.clear();\r\n          resolve();\r\n        };\r\n        const quitCmd = new Quit(ended, ended);\r\n        _sendQueue.push(quitCmd);\r\n        _receiveQueue.push(quitCmd);\r\n        if (_sendQueue.length === 1) {\r\n          process.nextTick(_nextSendCmd.bind(this));\r\n        }\r\n      });\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  /**\r\n   * Alias for destroy.\r\n   */\r\n  this.close = function() {\r\n    this.destroy();\r\n  };\r\n\r\n  /**\r\n   * Force connection termination by closing the underlying socket and killing server process if any.\r\n   */\r\n  this.destroy = () => {\r\n    _addCommand = _addCommandDisabled;\r\n    clearTimeout(_timeout);\r\n    if (_status !== Status.CLOSING && _status !== Status.CLOSED) {\r\n      _status = Status.CLOSING;\r\n      _sendQueue.clear();\r\n      if (_receiveQueue.length > 0) {\r\n        //socket is closed, but server may still be processing a huge select\r\n        //only possibility is to kill process by another thread\r\n        //TODO reuse a pool connection to avoid connection creation\r\n        const self = this;\r\n        const killCon = new Connection(opts);\r\n        killCon\r\n          .connect()\r\n          .then(() => {\r\n            //*************************************************\r\n            //kill connection\r\n            //*************************************************\r\n            const killResHandler = () => {\r\n              const destroyError = Errors.createError(\r\n                'Connection destroyed, command was killed',\r\n                true,\r\n                info,\r\n                '08S01',\r\n                Errors.ER_CMD_NOT_EXECUTED_DESTROYED\r\n              );\r\n              socketErrorDispatchToQueries(destroyError);\r\n              process.nextTick(() => {\r\n                if (_socket) _socket.destroy();\r\n              });\r\n              _status = Status.CLOSED;\r\n              killCon.end().catch(() => {});\r\n            };\r\n\r\n            killCon\r\n              .query('KILL ' + info.threadId)\r\n              .then(killResHandler)\r\n              .catch(killResHandler);\r\n          })\r\n          .catch(err => {\r\n            //*************************************************\r\n            //failing to create a kill connection, end normally\r\n            //*************************************************\r\n            const ended = () => {\r\n              let sock = _socket;\r\n              _clear();\r\n              _status = Status.CLOSED;\r\n              setImmediate(resolve);\r\n              sock.destroy();\r\n              _receiveQueue.clear();\r\n            };\r\n            const quitCmd = new Quit(ended, ended);\r\n            _sendQueue.push(quitCmd);\r\n            _receiveQueue.push(quitCmd);\r\n            if (_sendQueue.length === 1) {\r\n              process.nextTick(_nextSendCmd.bind(self));\r\n            }\r\n          });\r\n      } else {\r\n        _status = Status.CLOSED;\r\n        _socket.destroy();\r\n      }\r\n    }\r\n    _clear();\r\n  };\r\n\r\n  this.pause = () => {\r\n    _socket.pause();\r\n  };\r\n\r\n  this.resume = () => {\r\n    _socket.resume();\r\n  };\r\n\r\n  this.format = (sql, values) => {\r\n    throw Errors.createError(\r\n      '\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster',\r\n      false,\r\n      info,\r\n      '0A000',\r\n      Errors.ER_NOT_IMPLEMENTED_FORMAT\r\n    );\r\n  };\r\n\r\n  //*****************************************************************\r\n  // additional public methods\r\n  //*****************************************************************\r\n\r\n  /**\r\n   * return current connected server version information.\r\n   *\r\n   * @returns {*}\r\n   */\r\n  this.serverVersion = () => {\r\n    if (!info.serverVersion)\r\n      throw new Error('cannot know if server information until connection is established');\r\n    return info.serverVersion.raw;\r\n  };\r\n\r\n  /**\r\n   * Change option \"debug\" during connection.\r\n   * @param val   debug value\r\n   */\r\n  this.debug = val => {\r\n    opts.debug = val;\r\n    opts.emit('debug', opts.logPackets, opts.debug);\r\n  };\r\n\r\n  this.debugCompress = val => {\r\n    opts.debugCompress = val;\r\n  };\r\n\r\n  //*****************************************************************\r\n  // internal public testing methods\r\n  //*****************************************************************\r\n\r\n  function TestMethods() {}\r\n\r\n  TestMethods.prototype.getCollation = () => {\r\n    return opts.collation;\r\n  };\r\n\r\n  TestMethods.prototype.getSocket = () => {\r\n    return _socket;\r\n  };\r\n\r\n  this.__tests = new TestMethods();\r\n\r\n  //*****************************************************************\r\n  // internal methods\r\n  //*****************************************************************\r\n\r\n  this._status = () => {\r\n    return _status;\r\n  };\r\n\r\n  /**\r\n   * Execute query using text protocol with callback emit columns/data/end/error\r\n   * events to permit streaming big result-set\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @param cb      callback\r\n   * @returns {Query} query\r\n   */\r\n  this._queryCallback = (sql, values, cb) => {\r\n    let _cmdOpts,\r\n      _sql,\r\n      _values = values,\r\n      _cb = cb;\r\n\r\n    if (typeof values === 'function') {\r\n      _cb = values;\r\n      _values = undefined;\r\n    }\r\n\r\n    if (typeof sql === 'object') {\r\n      _cmdOpts = sql;\r\n      _sql = _cmdOpts.sql;\r\n      if (sql.values) _values = sql.values;\r\n    } else {\r\n      _sql = sql;\r\n    }\r\n\r\n    let cmd;\r\n    if (_cb) {\r\n      const resolve = rows => {\r\n        const meta = rows.meta;\r\n        delete rows.meta;\r\n        _cb(null, rows, meta);\r\n      };\r\n      cmd = new Query(resolve, _cb, _cmdOpts, opts, _sql, _values);\r\n    } else {\r\n      cmd = new Query(\r\n        () => {},\r\n        () => {},\r\n        _cmdOpts,\r\n        opts,\r\n        _sql,\r\n        _values\r\n      );\r\n    }\r\n    cmd.handleNewRows = row => {\r\n      cmd._rows[cmd._responseIndex].push(row);\r\n      cmd.emit('data', row);\r\n    };\r\n\r\n    if (opts.trace) Error.captureStackTrace(cmd);\r\n    _addCommand(cmd);\r\n    return cmd;\r\n  };\r\n\r\n  /**\r\n   * Execute a batch using text protocol with callback emit columns/data/end/error\r\n   * events to permit streaming big result-set\r\n   *\r\n   * @param sql     sql parameter Object can be used to supersede default option.\r\n   *                Object must then have sql property.\r\n   * @param values  object / array of placeholder values (not mandatory)\r\n   * @param cb      callback\r\n   * @returns {Query} query\r\n   */\r\n  this._batchCallback = (sql, values, cb) => {\r\n    let _cmdOpts,\r\n      _sql,\r\n      _values = values,\r\n      _cb = cb;\r\n\r\n    if (typeof values === 'function') {\r\n      _cb = values;\r\n      _values = undefined;\r\n    }\r\n\r\n    if (typeof sql === 'object') {\r\n      _cmdOpts = sql;\r\n      _sql = _cmdOpts.sql;\r\n      if (sql.values) _values = sql.values;\r\n    } else {\r\n      _sql = sql;\r\n    }\r\n\r\n    if (_values !== undefined) {\r\n      _values = Array.isArray(_values) ? _values : [_values];\r\n    }\r\n\r\n    let cmd;\r\n\r\n    if (!_values) {\r\n      if (_cb) {\r\n        _cb(\r\n          Errors.createError(\r\n            'Batch must have values set\\nsql: ' + _sql + ' - parameters:[]',\r\n            false,\r\n            info,\r\n            'HY000',\r\n            Errors.ER_BATCH_WITH_NO_VALUES\r\n          )\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    let useBulk = canUseBulk(_values);\r\n\r\n    const fct = useBulk ? BatchBulk : BatchRewrite;\r\n\r\n    if (_cb) {\r\n      const resolve = rows => {\r\n        const meta = rows.meta;\r\n        delete rows.meta;\r\n        _cb(null, rows, meta);\r\n      };\r\n      cmd = new fct(resolve, _cb, _cmdOpts, opts, _sql, _values);\r\n    } else {\r\n      cmd = new fct(\r\n        () => {},\r\n        () => {},\r\n        _cmdOpts,\r\n        opts,\r\n        _sql,\r\n        _values\r\n      );\r\n    }\r\n    cmd.handleNewRows = row => {\r\n      cmd._rows[cmd._responseIndex].push(row);\r\n      cmd.emit('data', row);\r\n    };\r\n\r\n    if (opts.trace) Error.captureStackTrace(cmd);\r\n    _addCommand(cmd);\r\n    return cmd;\r\n  };\r\n\r\n  /**\r\n   * Use Batch rewrite or MariaDB bulk protocol.\r\n   *\r\n   * @param values current batch values\r\n   * @return {boolean} indicating if must use rewrite or bulk\r\n   */\r\n  const canUseBulk = values => {\r\n    let useBulk = info.isMariaDB() && info.hasMinVersion(10, 2, 7) && opts.bulk;\r\n    if (useBulk) {\r\n      //ensure that there is no stream object\r\n      if (values !== undefined) {\r\n        if (!opts.namedPlaceholders) {\r\n          //ensure that all parameters have same length\r\n          //single array is considered as an array of single element.\r\n          const paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\r\n          if (paramLen == 0) return false;\r\n          for (let r = 0; r < values.length; r++) {\r\n            let row = values[r];\r\n            if (!Array.isArray(row)) row = [row];\r\n            if (paramLen !== row.length) {\r\n              return false;\r\n            }\r\n            for (let j = 0; j < paramLen; j++) {\r\n              const val = row[j];\r\n              if (\r\n                val !== null &&\r\n                typeof val === 'object' &&\r\n                typeof val.pipe === 'function' &&\r\n                typeof val.read === 'function'\r\n              ) {\r\n                return false;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          for (let r = 0; r < values.length; r++) {\r\n            let row = values[r];\r\n            const keys = Object.keys(row);\r\n            for (let j = 0; j < keys.length; j++) {\r\n              const val = row[keys[j]];\r\n              if (\r\n                val !== null &&\r\n                typeof val === 'object' &&\r\n                typeof val.pipe === 'function' &&\r\n                typeof val.read === 'function'\r\n              ) {\r\n                return false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return useBulk;\r\n  };\r\n\r\n  /**\r\n   * Add handshake command to queue.\r\n   *\r\n   * @private\r\n   */\r\n  const _registerHandshakeCmd = (resolve, rejected) => {\r\n    const _authFail = _authFailHandler.bind(this, rejected);\r\n    const _authSucceed = _authSucceedHandler.bind(this, resolve, _authFail);\r\n\r\n    const handshake = new Handshake(\r\n      _authSucceed,\r\n      _authFail,\r\n      _createSecureContext.bind(this, _authFail),\r\n      _addCommand.bind(this),\r\n      _getSocket\r\n    );\r\n    Error.captureStackTrace(handshake);\r\n\r\n    handshake.once('end', () => {\r\n      process.nextTick(_nextSendCmd);\r\n    });\r\n\r\n    _receiveQueue.push(handshake);\r\n    _initSocket(_authFail);\r\n  };\r\n\r\n  const _executeSessionVariableQuery = () => {\r\n    if (opts.sessionVariables) {\r\n      const values = [];\r\n      let sessionQuery = 'set ';\r\n      let keys = Object.keys(opts.sessionVariables);\r\n      if (keys.length > 0) {\r\n        return new Promise(function(resolve, reject) {\r\n          for (let k = 0; k < keys.length; ++k) {\r\n            sessionQuery +=\r\n              (k !== 0 ? ',' : '') + '@@' + keys[k].replace(/[^a-z0-9_]/gi, '') + '=?';\r\n            values.push(opts.sessionVariables[keys[k]]);\r\n          }\r\n          const errorHandling = initialErr => {\r\n            reject(\r\n              Errors.createError(\r\n                'Error setting session variable (value ' +\r\n                  JSON.stringify(opts.sessionVariables) +\r\n                  '). Error: ' +\r\n                  initialErr.message,\r\n                true,\r\n                info,\r\n                '08S01',\r\n                Errors.ER_SETTING_SESSION_ERROR,\r\n                null\r\n              )\r\n            );\r\n          };\r\n          const cmd = new Query(resolve, errorHandling, null, opts, sessionQuery, values);\r\n          if (opts.trace) Error.captureStackTrace(cmd);\r\n          _addCommand(cmd);\r\n        });\r\n      }\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  /**\r\n   * Asking server timezone if not set in case of 'auto'\r\n   * @returns {Promise<void>}\r\n   * @private\r\n   */\r\n  const _checkServerTimezone = () => {\r\n    if (opts.timezone !== 'auto') {\r\n      return Promise.resolve();\r\n    }\r\n    return this.query('SELECT @@system_time_zone stz, @@time_zone tz').then(res => {\r\n      const serverTimezone = res[0].tz === 'SYSTEM' ? res[0].stz : res[0].tz;\r\n      const serverZone = moment.tz.zone(serverTimezone);\r\n      if (serverZone) {\r\n        if (serverTimezone === moment.tz.guess()) {\r\n          //db server and client use same timezone, avoid any conversion\r\n          opts.tz = null;\r\n        } else {\r\n          opts.tz = moment.tz.setDefault(serverTimezone);\r\n        }\r\n      } else {\r\n        return Promise.reject(\r\n          Errors.createError(\r\n            \"Automatic timezone setting fails. Server timezone '\" +\r\n              serverTimezone +\r\n              \"' does't have a corresponding IANA timezone. Option timezone must be set according to server timezone\",\r\n            true,\r\n            info,\r\n            '08S01',\r\n            Errors.ER_WRONG_AUTO_TIMEZONE\r\n          )\r\n        );\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n  };\r\n\r\n  const _checkServerVersion = () => {\r\n    if (!opts.forceVersionCheck) {\r\n      return Promise.resolve();\r\n    }\r\n    return this.query('SELECT @@VERSION AS v').then(res => {\r\n      info.serverVersion.raw = res[0].v;\r\n      info.serverVersion.mariaDb = info.serverVersion.raw.includes('MariaDB');\r\n      ConnectionInformation.parseVersionString(info);\r\n      return Promise.resolve();\r\n    });\r\n  };\r\n\r\n  const _executeInitQuery = () => {\r\n    if (opts.initSql) {\r\n      const initialArr = Array.isArray(opts.initSql) ? opts.initSql : [opts.initSql];\r\n      const initialPromises = [];\r\n      initialArr.forEach(sql => {\r\n        initialPromises.push(\r\n          new Promise(function(resolve, reject) {\r\n            const errorHandling = initialErr => {\r\n              reject(\r\n                Errors.createError(\r\n                  'Error executing initial sql command: ' + initialErr.message,\r\n                  true,\r\n                  info,\r\n                  '08S01',\r\n                  Errors.ER_INITIAL_SQL_ERROR,\r\n                  null\r\n                )\r\n              );\r\n            };\r\n            const cmd = new Query(resolve, errorHandling, null, opts, sql, null);\r\n            if (opts.trace) Error.captureStackTrace(cmd);\r\n            _addCommand(cmd);\r\n          })\r\n        );\r\n      });\r\n      return Promise.all(initialPromises);\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  const _executeSessionTimeout = () => {\r\n    if (opts.queryTimeout) {\r\n      if (info.isMariaDB() && info.hasMinVersion(10, 1, 2)) {\r\n        return new Promise(function(resolve, reject) {\r\n          const errorHandling = initialErr => {\r\n            reject(\r\n              Errors.createError(\r\n                'Error setting session queryTimeout: ' + initialErr.message,\r\n                true,\r\n                info,\r\n                '08S01',\r\n                Errors.ER_INITIAL_TIMEOUT_ERROR,\r\n                null\r\n              )\r\n            );\r\n          };\r\n          const cmd = new Query(\r\n            resolve,\r\n            errorHandling,\r\n            null,\r\n            opts,\r\n            'SET max_statement_time=' + opts.queryTimeout / 1000,\r\n            null\r\n          );\r\n          if (opts.trace) Error.captureStackTrace(cmd);\r\n          _addCommand(cmd);\r\n        });\r\n      } else {\r\n        return Promise.reject(\r\n          Errors.createError(\r\n            'Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ' +\r\n              opts.queryTimeout,\r\n            false,\r\n            info,\r\n            'HY000',\r\n            Errors.ER_TIMEOUT_NOT_SUPPORTED\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  const _getSocket = () => {\r\n    return _socket;\r\n  };\r\n\r\n  /**\r\n   * Initialize socket and associate events.\r\n   * @private\r\n   */\r\n  const _initSocket = authFailHandler => {\r\n    if (opts.socketPath) {\r\n      _socket = Net.connect(opts.socketPath);\r\n    } else {\r\n      _socket = Net.connect(opts.port, opts.host);\r\n    }\r\n\r\n    if (opts.connectTimeout) {\r\n      _timeout = setTimeout(\r\n        _connectTimeoutReached,\r\n        opts.connectTimeout,\r\n        authFailHandler,\r\n        Date.now()\r\n      );\r\n    }\r\n\r\n    const _socketError = _socketErrorHandler.bind(this, authFailHandler);\r\n\r\n    _socket.on('data', _in.onData.bind(_in));\r\n    _socket.on('error', _socketError);\r\n    _socket.on('end', _socketError);\r\n    _socket.on(\r\n      'connect',\r\n      function() {\r\n        clearTimeout(_timeout);\r\n        if (_status === Status.CONNECTING) {\r\n          _status = Status.AUTHENTICATING;\r\n          _socketConnected = true;\r\n          _socket.setTimeout(opts.socketTimeout, _socketTimeoutReached.bind(this, authFailHandler));\r\n          _socket.setNoDelay(true);\r\n        }\r\n      }.bind(this)\r\n    );\r\n\r\n    _socket.writeBuf = _socket.write;\r\n    _socket.flush = () => {};\r\n    _out.setStream(_socket);\r\n  };\r\n\r\n  /**\r\n   * Authentication success result handler.\r\n   *\r\n   * @private\r\n   */\r\n  const _authSucceedHandler = (resolve, rejected) => {\r\n    //enable packet compression according to option\r\n    if (opts.logPackets) info.enableLogPacket();\r\n    if (opts.compress) {\r\n      if (info.serverCapabilities & Capabilities.COMPRESS) {\r\n        _out.setStream(new CompressionOutputStream(_socket, opts, info));\r\n        _in = new CompressionInputStream(_in, _receiveQueue, opts, info);\r\n        _socket.removeAllListeners('data');\r\n        _socket.on('data', _in.onData.bind(_in));\r\n      } else {\r\n        console.error(\r\n          \"connection is configured to use packet compression, but the server doesn't have this capability\"\r\n        );\r\n      }\r\n    }\r\n\r\n    if (opts.pipelining) {\r\n      _addCommand = _addCommandEnablePipeline;\r\n      const commands = _receiveQueue.toArray();\r\n      commands.forEach(cmd => {\r\n        const listeners = cmd.listeners('end');\r\n        cmd.removeListener('end', listeners[0]);\r\n        cmd.once('send_end', () => {\r\n          setImmediate(_nextSendCmd);\r\n        });\r\n      });\r\n    }\r\n\r\n    const errorInitialQueries = err => {\r\n      if (!err.fatal) this.end().catch(err => {});\r\n      process.nextTick(rejected, err);\r\n    };\r\n\r\n    _executeSessionVariableQuery()\r\n      .then(() => {\r\n        return _checkServerTimezone();\r\n      })\r\n      .then(() => {\r\n        return _checkServerVersion();\r\n      })\r\n      .then(() => {\r\n        return _executeInitQuery();\r\n      })\r\n      .then(() => {\r\n        return _executeSessionTimeout();\r\n      })\r\n      .then(() => {\r\n        _status = Status.CONNECTED;\r\n        process.nextTick(resolve, this);\r\n      })\r\n      .catch(errorInitialQueries);\r\n  };\r\n\r\n  /**\r\n   * Authentication failed result handler.\r\n   *\r\n   * @private\r\n   */\r\n  const _authFailHandler = (reject, err) => {\r\n    process.nextTick(reject, err);\r\n    //remove handshake command\r\n    _receiveQueue.shift();\r\n\r\n    _fatalError(err, true);\r\n  };\r\n\r\n  /**\r\n   * Create TLS socket and associate events.\r\n   *\r\n   * @param rejected  rejected function when error\r\n   * @param callback  callback function when done\r\n   * @private\r\n   */\r\n  const _createSecureContext = (rejected, callback) => {\r\n    const _socketError = _socketErrorHandler.bind(this, rejected);\r\n    const sslOption = Object.assign({}, opts.ssl, {\r\n      servername: opts.host,\r\n      socket: _socket\r\n    });\r\n\r\n    try {\r\n      const secureSocket = tls.connect(sslOption, callback);\r\n\r\n      secureSocket.on('data', _in.onData.bind(_in));\r\n      secureSocket.on('error', _socketError);\r\n      secureSocket.on('end', _socketError);\r\n      secureSocket.writeBuf = secureSocket.write;\r\n      secureSocket.flush = () => {};\r\n\r\n      _socket.removeAllListeners('data');\r\n      _socket = secureSocket;\r\n\r\n      _out.setStream(secureSocket);\r\n    } catch (err) {\r\n      _socketError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle packet when no packet is expected.\r\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\r\n   *\r\n   * @param packet  packet\r\n   * @private\r\n   */\r\n  const _unexpectedPacket = function(packet) {\r\n    if (packet && packet.peek() === 0xff) {\r\n      //can receive unexpected error packet from server/proxy\r\n      //to inform that connection is closed (usually by timeout)\r\n      let err = packet.readError(info);\r\n      if (err.fatal && _status !== Status.CLOSING && _status !== Status.CLOSED) {\r\n        this.emit('error', err);\r\n        this.end();\r\n      }\r\n    } else if (_status !== Status.CLOSING && _status !== Status.CLOSED) {\r\n      this.emit(\r\n        'error',\r\n        Errors.createError(\r\n          'receiving packet from server without active commands\\n' +\r\n            'conn:' +\r\n            (info.threadId ? info.threadId : -1) +\r\n            '(' +\r\n            packet.pos +\r\n            ',' +\r\n            packet.end +\r\n            ')\\n' +\r\n            Utils.log(opts, packet.buf, packet.pos, packet.end),\r\n          true,\r\n          info,\r\n          '08S01',\r\n          Errors.ER_UNEXPECTED_PACKET\r\n        )\r\n      );\r\n      this.destroy();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Change transaction state.\r\n   *\r\n   * @param sql sql\r\n   * @returns {Promise} promise\r\n   * @private\r\n   */\r\n  const _changeTransaction = sql => {\r\n    //if command in progress, driver cannot rely on status and must execute query\r\n    if (_status === Status.CLOSING || _status === Status.CLOSED) {\r\n      return Promise.reject(\r\n        Errors.createError(\r\n          'Cannot execute new commands: connection closed\\nsql: ' + sql,\r\n          true,\r\n          info,\r\n          '08S01',\r\n          Errors.ER_CMD_CONNECTION_CLOSED\r\n        )\r\n      );\r\n    }\r\n\r\n    //Command in progress => must execute query\r\n    //or if no command in progress, can rely on status to know if query is needed\r\n    if (_receiveQueue.peekFront() || info.status & ServerStatus.STATUS_IN_TRANS) {\r\n      return new Promise(function(resolve, reject) {\r\n        const cmd = new Query(resolve, reject, null, opts, sql, null);\r\n        if (opts.trace) Error.captureStackTrace(cmd);\r\n        _addCommand(cmd);\r\n      });\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  /**\r\n   * Handle connection timeout.\r\n   *\r\n   * @private\r\n   */\r\n  const _connectTimeoutReached = function(authFailHandler, initialConnectionTime) {\r\n    _timeout = null;\r\n    const handshake = _receiveQueue.peekFront();\r\n    authFailHandler(\r\n      Errors.createError(\r\n        'Connection timeout: failed to create socket after ' +\r\n          (Date.now() - initialConnectionTime) +\r\n          'ms',\r\n        true,\r\n        info,\r\n        '08S01',\r\n        Errors.ER_CONNECTION_TIMEOUT,\r\n        handshake ? handshake.stack : null\r\n      )\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Handle socket timeout.\r\n   *\r\n   * @private\r\n   */\r\n  const _socketTimeoutReached = function() {\r\n    const err = Errors.createError('socket timeout', true, info, '08S01', Errors.ER_SOCKET_TIMEOUT);\r\n    const packetMsgs = info.getLastPackets();\r\n    if (packetMsgs !== '') {\r\n      err.message = err.message + '\\nlast received packets:\\n' + packetMsgs;\r\n    }\r\n    _fatalError(err, true);\r\n  };\r\n\r\n  /**\r\n   * Add command to command sending and receiving queue.\r\n   *\r\n   * @param cmd         command\r\n   * @returns {*}       current command\r\n   * @private\r\n   */\r\n  const _addCommandEnable = cmd => {\r\n    cmd.once('end', () => {\r\n      setImmediate(_nextSendCmd);\r\n    });\r\n\r\n    //send immediately only if no current active receiver\r\n    if (_sendQueue.isEmpty() && _status === Status.CONNECTED) {\r\n      if (_receiveQueue.peekFront()) {\r\n        _receiveQueue.push(cmd);\r\n        _sendQueue.push(cmd);\r\n        return cmd;\r\n      }\r\n\r\n      _receiveQueue.push(cmd);\r\n      cmd.start(_out, opts, info);\r\n    } else {\r\n      _receiveQueue.push(cmd);\r\n      _sendQueue.push(cmd);\r\n    }\r\n    return cmd;\r\n  };\r\n\r\n  /**\r\n   * Add command to command sending and receiving queue using pipelining\r\n   *\r\n   * @param cmd         command\r\n   * @returns {*}       current command\r\n   * @private\r\n   */\r\n  const _addCommandEnablePipeline = cmd => {\r\n    cmd.once('send_end', () => {\r\n      setImmediate(_nextSendCmd);\r\n    });\r\n\r\n    _receiveQueue.push(cmd);\r\n    if (_sendQueue.isEmpty()) {\r\n      cmd.start(_out, opts, info);\r\n      if (cmd.sending) {\r\n        _sendQueue.push(cmd);\r\n        cmd.prependOnceListener('send_end', () => {\r\n          _sendQueue.shift();\r\n        });\r\n      }\r\n    } else {\r\n      _sendQueue.push(cmd);\r\n    }\r\n    return cmd;\r\n  };\r\n\r\n  /**\r\n   * Replacing command when connection is closing or closed to send a proper error message.\r\n   *\r\n   * @param cmd         command\r\n   * @private\r\n   */\r\n  const _addCommandDisabled = cmd => {\r\n    cmd.throwNewError(\r\n      'Cannot execute new commands: connection closed\\n' + cmd.displaySql(),\r\n      true,\r\n      info,\r\n      '08S01',\r\n      Errors.ER_CMD_CONNECTION_CLOSED\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Handle socket error.\r\n   *\r\n   * @param authFailHandler   authentication handler\r\n   * @param err               socket error\r\n   * @private\r\n   */\r\n  const _socketErrorHandler = function(authFailHandler, err) {\r\n    if (_status === Status.CLOSING || _status === Status.CLOSED) return;\r\n\r\n    _socket.writeBuf = () => {};\r\n    _socket.flush = () => {};\r\n\r\n    //socket has been ended without error\r\n    if (!err) {\r\n      err = Errors.createError(\r\n        'socket has unexpectedly been closed',\r\n        true,\r\n        info,\r\n        '08S01',\r\n        Errors.ER_SOCKET_UNEXPECTED_CLOSE\r\n      );\r\n    } else {\r\n      err.fatal = true;\r\n      this.sqlState = 'HY000';\r\n    }\r\n\r\n    const packetMsgs = info.getLastPackets();\r\n    if (packetMsgs !== '') {\r\n      err.message += '\\nlast received packets:\\n' + packetMsgs;\r\n    }\r\n\r\n    switch (_status) {\r\n      case Status.CONNECTING:\r\n      case Status.AUTHENTICATING:\r\n        const currentCmd = _receiveQueue.peekFront();\r\n        if (currentCmd && currentCmd.stack && err) {\r\n          err.stack +=\r\n            '\\n From event:\\n' + currentCmd.stack.substring(currentCmd.stack.indexOf('\\n') + 1);\r\n        }\r\n        authFailHandler(err);\r\n        break;\r\n\r\n      default:\r\n        _fatalError(err, false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fatal unexpected error : closing connection, and throw exception.\r\n   *\r\n   * @param self    current connection\r\n   * @private\r\n   */\r\n  const _fatalErrorHandler = function(self) {\r\n    return function(err, avoidThrowError) {\r\n      if (_status === Status.CLOSING || _status === Status.CLOSED) {\r\n        socketErrorDispatchToQueries(err);\r\n        return;\r\n      }\r\n      const mustThrowError = _status !== Status.CONNECTING;\r\n      _status = Status.CLOSING;\r\n\r\n      //prevent executing new commands\r\n      _addCommand = _addCommandDisabled;\r\n\r\n      if (_socket) {\r\n        _socket.removeAllListeners('error');\r\n        _socket.removeAllListeners('timeout');\r\n        _socket.removeAllListeners('close');\r\n        _socket.removeAllListeners('data');\r\n        if (!_socket.destroyed) _socket.destroy();\r\n        _socket = undefined;\r\n      }\r\n      _status = Status.CLOSED;\r\n\r\n      const errorThrownByCmd = socketErrorDispatchToQueries(err);\r\n      if (mustThrowError) {\r\n        if (self.listenerCount('error') > 0) {\r\n          self.emit('error', err);\r\n          self.emit('end');\r\n          _clear();\r\n        } else {\r\n          self.emit('end');\r\n          _clear();\r\n          //error will be thrown if no error listener and no command did throw the exception\r\n          if (!avoidThrowError && !errorThrownByCmd) throw err;\r\n        }\r\n      } else {\r\n        _clear();\r\n      }\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Dispatch fatal error to current running queries.\r\n   *\r\n   * @param err        the fatal error\r\n   * @return {boolean} return if error has been relayed to queries\r\n   */\r\n  const socketErrorDispatchToQueries = err => {\r\n    let receiveCmd;\r\n    let errorThrownByCmd = false;\r\n    while ((receiveCmd = _receiveQueue.shift())) {\r\n      if (receiveCmd && receiveCmd.onPacketReceive) {\r\n        errorThrownByCmd = true;\r\n        setImmediate(receiveCmd.throwError.bind(receiveCmd), err, info);\r\n      }\r\n    }\r\n    return errorThrownByCmd;\r\n  };\r\n\r\n  /**\r\n   * Will send next command in queue if any.\r\n   *\r\n   * @private\r\n   */\r\n  const _nextSendCmd = () => {\r\n    let sendCmd;\r\n    if ((sendCmd = _sendQueue.shift())) {\r\n      if (sendCmd.sending) {\r\n        _sendQueue.unshift(sendCmd);\r\n      } else {\r\n        sendCmd.start(_out, opts, info);\r\n        if (sendCmd.sending) {\r\n          sendCmd.prependOnceListener('send_end', () => {\r\n            _sendQueue.shift();\r\n          });\r\n          _sendQueue.unshift(sendCmd);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clearing connection variables when ending.\r\n   *\r\n   * @private\r\n   */\r\n  const _clear = () => {\r\n    _sendQueue.clear();\r\n    opts.removeAllListeners();\r\n    _out = undefined;\r\n    _socket = undefined;\r\n  };\r\n\r\n  //*****************************************************************\r\n  // internal variables\r\n  //*****************************************************************\r\n\r\n  EventEmitter.call(this);\r\n  const opts = Object.assign(new EventEmitter(), options);\r\n  const info = new ConnectionInformation();\r\n  const _sendQueue = new Queue();\r\n  const _receiveQueue = new Queue();\r\n  let _status = Status.NOT_CONNECTED;\r\n  let _socketConnected = false;\r\n  let _socket = null;\r\n  let _timeout = null;\r\n  let _addCommand = _addCommandEnable;\r\n  const _fatalError = _fatalErrorHandler(this);\r\n  let _out = new PacketOutputStream(opts, info);\r\n  let _in = new PacketInputStream(_unexpectedPacket.bind(this), _receiveQueue, _out, opts, info);\r\n\r\n  this.escape = Utils.escape.bind(this, opts, info);\r\n  this.escapeId = Utils.escapeId.bind(this, opts, info);\r\n\r\n  //add alias threadId for mysql/mysql2 compatibility\r\n  Object.defineProperty(this, 'threadId', {\r\n    get() {\r\n      return info ? info.threadId : undefined;\r\n    }\r\n  });\r\n  Object.defineProperty(this, 'info', {\r\n    get() {\r\n      return info;\r\n    }\r\n  });\r\n}\r\n\r\nutil.inherits(Connection, EventEmitter);\r\n\r\nmodule.exports = Connection;\r\n"]},"metadata":{},"sourceType":"script"}