{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Command = require('../command');\n\nvar InitialHandshake = require('./initial-handshake');\n\nvar ClientHandshakeResponse = require('./client-handshake-response');\n\nvar SslRequest = require('./ssl-request');\n\nvar ClientCapabilities = require('./client-capabilities');\n\nvar Errors = require('../../misc/errors');\n\nvar Capabilities = require('../../const/capabilities');\n/**\n * Handle handshake.\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/\n */\n\n\nvar Handshake =\n/*#__PURE__*/\nfunction (_Command) {\n  _inherits(Handshake, _Command);\n\n  function Handshake(resolve, reject, _createSecureContext, _addCommand, getSocket) {\n    var _this;\n\n    _classCallCheck(this, Handshake);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Handshake).call(this, resolve, reject));\n    _this._createSecureContext = _createSecureContext;\n    _this._addCommand = _addCommand;\n    _this.getSocket = getSocket;\n    _this.onPacketReceive = _this.parseHandshakeInit;\n    _this.plugin = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(Handshake, [{\n    key: \"parseHandshakeInit\",\n    value: function parseHandshakeInit(packet, out, opts, info) {\n      if (packet.peek() === 0xff) {\n        //in case that some host is not permit to connect server\n        var authErr = packet.readError(info);\n        authErr.fatal = true;\n        return this.throwError(authErr, info);\n      }\n\n      var handshake = new InitialHandshake(packet, info);\n      ClientCapabilities.init(opts, info);\n\n      if (opts.ssl) {\n        if (info.serverCapabilities & Capabilities.SSL) {\n          info.clientCapabilities |= Capabilities.SSL;\n          SslRequest.send(this, out, info, opts);\n\n          this._createSecureContext(function () {\n            ClientHandshakeResponse.send(this, out, opts, handshake.pluginName, info);\n          }.bind(this));\n\n          return this.onPacketReceive = this.handshakeResult;\n        } else {\n          return this.throwNewError('Trying to connect with ssl, but ssl not enabled in the server', true, info, '08S01', Errors.ER_SERVER_SSL_DISABLED);\n        }\n      } else {\n        ClientHandshakeResponse.send(this, out, opts, handshake.pluginName, info);\n      }\n\n      this.onPacketReceive = this.handshakeResult;\n    }\n    /**\n     * Fast-path handshake results :\n     *  - if plugin was the one expected by server, server will send OK_Packet / ERR_Packet.\n     *  - if not, server send an AuthSwitchRequest packet, indicating the specific PLUGIN to use with this user.\n     *    dispatching to plugin handler then.\n     *\n     * @param packet    current packet\n     * @param out       output buffer\n     * @param opts      options\n     * @param info      connection info\n     * @returns {*}     return null if authentication succeed, depending on plugin conversation if not finished\n     */\n\n  }, {\n    key: \"handshakeResult\",\n    value: function handshakeResult(packet, out, opts, info) {\n      var marker = packet.peek();\n\n      switch (marker) {\n        //*********************************************************************************************************\n        //* AuthSwitchRequest packet\n        //*********************************************************************************************************\n        case 0xfe:\n          this.plugin.onPacketReceive = null;\n          this.plugin.emit('send_end');\n          this.plugin.emit('end');\n          this.dispatchAuthSwitchRequest(packet, out, opts, info);\n          return;\n        //*********************************************************************************************************\n        //* OK_Packet - authentication succeeded\n        //*********************************************************************************************************\n\n        case 0x00:\n          packet.skip(1); //skip header\n\n          packet.skipLengthCodedNumber(); //skip affected rows\n\n          packet.skipLengthCodedNumber(); //skip last insert id\n\n          info.status = packet.readUInt16();\n          this.plugin.emit('send_end');\n          return this.plugin.successEnd();\n        //*********************************************************************************************************\n        //* ERR_Packet\n        //*********************************************************************************************************\n\n        case 0xff:\n          var authErr = packet.readError(info, this.displaySql());\n          authErr.fatal = true;\n          return this.plugin.throwError(authErr, info);\n        //*********************************************************************************************************\n        //* unexpected\n        //*********************************************************************************************************\n\n        default:\n          this.throwNewError('Unexpected type of packet during handshake phase : ' + marker, true, info, '42000', Errors.ER_AUTHENTICATION_BAD_PACKET);\n      }\n    }\n    /**\n     * Handle authentication switch request : dispatch to plugin handler.\n     *\n     * @param packet  packet\n     * @param out     output writer\n     * @param opts    options\n     * @param info    connection information\n     */\n\n  }, {\n    key: \"dispatchAuthSwitchRequest\",\n    value: function dispatchAuthSwitchRequest(packet, out, opts, info) {\n      var pluginName, pluginData;\n\n      if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n        packet.skip(1); //header\n\n        if (packet.remaining()) {\n          //AuthSwitchRequest packet.\n          pluginName = packet.readStringNullEnded();\n          pluginData = packet.readBufferRemaining();\n        } else {\n          //OldAuthSwitchRequest\n          pluginName = 'mysql_old_password';\n          pluginData = info.seed.slice(0, 8);\n        }\n      } else {\n        pluginName = packet.readStringNullEnded('cesu8');\n        pluginData = packet.readBufferRemaining();\n      }\n\n      var plugin = Handshake.pluginHandler(pluginName, this.plugin.sequenceNo, this.plugin.compressSequenceNo, pluginData, info, opts, out, this.resolve, this.reject, this.handshakeResult.bind(this));\n\n      if (!plugin) {\n        this.reject(Errors.createError(\"Client does not support authentication protocol '\" + pluginName + \"' requested by server. \", true, info, '08004', Errors.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED));\n      } else {\n        this.plugin = plugin;\n\n        this._addCommand(this.plugin, false);\n      }\n    }\n  }], [{\n    key: \"pluginHandler\",\n    value: function pluginHandler(pluginName, packSeq, compressPackSeq, pluginData, info, opts, out, authResolve, authReject, multiAuthResolver) {\n      var pluginAuth;\n\n      switch (pluginName) {\n        case 'mysql_native_password':\n          pluginAuth = require('./auth/native-password-auth.js');\n          break;\n\n        case 'mysql_clear_password':\n          pluginAuth = require('./auth/clear-password-auth.js');\n          break;\n\n        case 'client_ed25519':\n          pluginAuth = require('./auth/ed25519-password-auth.js');\n          break;\n\n        case 'dialog':\n          pluginAuth = require('./auth/pam-password-auth.js');\n          break;\n        //TODO \"auth_gssapi_client\"\n\n        default:\n          return null;\n      }\n\n      return new pluginAuth(packSeq, compressPackSeq, pluginData, authResolve, authReject, multiAuthResolver);\n    }\n  }]);\n\n  return Handshake;\n}(Command);\n\nmodule.exports = Handshake;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/handshake/handshake.js"],"names":["Command","require","InitialHandshake","ClientHandshakeResponse","SslRequest","ClientCapabilities","Errors","Capabilities","Handshake","resolve","reject","_createSecureContext","_addCommand","getSocket","onPacketReceive","parseHandshakeInit","plugin","packet","out","opts","info","peek","authErr","readError","fatal","throwError","handshake","init","ssl","serverCapabilities","SSL","clientCapabilities","send","pluginName","bind","handshakeResult","throwNewError","ER_SERVER_SSL_DISABLED","marker","emit","dispatchAuthSwitchRequest","skip","skipLengthCodedNumber","status","readUInt16","successEnd","displaySql","ER_AUTHENTICATION_BAD_PACKET","pluginData","PLUGIN_AUTH","remaining","readStringNullEnded","readBufferRemaining","seed","slice","pluginHandler","sequenceNo","compressSequenceNo","createError","ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED","packSeq","compressPackSeq","authResolve","authReject","multiAuthResolver","pluginAuth","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,qBAAD,CAAhC;;AACA,IAAME,uBAAuB,GAAGF,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMI,kBAAkB,GAAGJ,OAAO,CAAC,uBAAD,CAAlC;;AACA,IAAMK,MAAM,GAAGL,OAAO,CAAC,mBAAD,CAAtB;;AACA,IAAMM,YAAY,GAAGN,OAAO,CAAC,0BAAD,CAA5B;AAEA;;;;;;IAIMO,S;;;;;AACJ,qBAAYC,OAAZ,EAAqBC,MAArB,EAA6BC,oBAA7B,EAAmDC,WAAnD,EAAgEC,SAAhE,EAA2E;AAAA;;AAAA;;AACzE,mFAAMJ,OAAN,EAAeC,MAAf;AACA,UAAKC,oBAAL,GAA4BA,oBAA5B;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AACA,UAAKC,eAAL,GAAuB,MAAKC,kBAA5B;AACA,UAAKC,MAAL;AANyE;AAO1E;;;;uCAEkBC,M,EAAQC,G,EAAKC,I,EAAMC,I,EAAM;AAC1C,UAAIH,MAAM,CAACI,IAAP,OAAkB,IAAtB,EAA4B;AAC1B;AACA,YAAMC,OAAO,GAAGL,MAAM,CAACM,SAAP,CAAiBH,IAAjB,CAAhB;AACAE,QAAAA,OAAO,CAACE,KAAR,GAAgB,IAAhB;AACA,eAAO,KAAKC,UAAL,CAAgBH,OAAhB,EAAyBF,IAAzB,CAAP;AACD;;AAED,UAAIM,SAAS,GAAG,IAAIxB,gBAAJ,CAAqBe,MAArB,EAA6BG,IAA7B,CAAhB;AACAf,MAAAA,kBAAkB,CAACsB,IAAnB,CAAwBR,IAAxB,EAA8BC,IAA9B;;AAEA,UAAID,IAAI,CAACS,GAAT,EAAc;AACZ,YAAIR,IAAI,CAACS,kBAAL,GAA0BtB,YAAY,CAACuB,GAA3C,EAAgD;AAC9CV,UAAAA,IAAI,CAACW,kBAAL,IAA2BxB,YAAY,CAACuB,GAAxC;AACA1B,UAAAA,UAAU,CAAC4B,IAAX,CAAgB,IAAhB,EAAsBd,GAAtB,EAA2BE,IAA3B,EAAiCD,IAAjC;;AACA,eAAKR,oBAAL,CACE,YAAW;AACTR,YAAAA,uBAAuB,CAAC6B,IAAxB,CAA6B,IAA7B,EAAmCd,GAAnC,EAAwCC,IAAxC,EAA8CO,SAAS,CAACO,UAAxD,EAAoEb,IAApE;AACD,WAFD,CAEEc,IAFF,CAEO,IAFP,CADF;;AAKA,iBAAQ,KAAKpB,eAAL,GAAuB,KAAKqB,eAApC;AACD,SATD,MASO;AACL,iBAAO,KAAKC,aAAL,CACL,+DADK,EAEL,IAFK,EAGLhB,IAHK,EAIL,OAJK,EAKLd,MAAM,CAAC+B,sBALF,CAAP;AAOD;AACF,OAnBD,MAmBO;AACLlC,QAAAA,uBAAuB,CAAC6B,IAAxB,CAA6B,IAA7B,EAAmCd,GAAnC,EAAwCC,IAAxC,EAA8CO,SAAS,CAACO,UAAxD,EAAoEb,IAApE;AACD;;AACD,WAAKN,eAAL,GAAuB,KAAKqB,eAA5B;AACD;AAED;;;;;;;;;;;;;;;oCAYgBlB,M,EAAQC,G,EAAKC,I,EAAMC,I,EAAM;AACvC,UAAMkB,MAAM,GAAGrB,MAAM,CAACI,IAAP,EAAf;;AACA,cAAQiB,MAAR;AACE;AACA;AACA;AACA,aAAK,IAAL;AACE,eAAKtB,MAAL,CAAYF,eAAZ,GAA8B,IAA9B;AACA,eAAKE,MAAL,CAAYuB,IAAZ,CAAiB,UAAjB;AACA,eAAKvB,MAAL,CAAYuB,IAAZ,CAAiB,KAAjB;AACA,eAAKC,yBAAL,CAA+BvB,MAA/B,EAAuCC,GAAvC,EAA4CC,IAA5C,EAAkDC,IAAlD;AACA;AAEF;AACA;AACA;;AACA,aAAK,IAAL;AACEH,UAAAA,MAAM,CAACwB,IAAP,CAAY,CAAZ,EADF,CACkB;;AAChBxB,UAAAA,MAAM,CAACyB,qBAAP,GAFF,CAEkC;;AAChCzB,UAAAA,MAAM,CAACyB,qBAAP,GAHF,CAGkC;;AAChCtB,UAAAA,IAAI,CAACuB,MAAL,GAAc1B,MAAM,CAAC2B,UAAP,EAAd;AACA,eAAK5B,MAAL,CAAYuB,IAAZ,CAAiB,UAAjB;AACA,iBAAO,KAAKvB,MAAL,CAAY6B,UAAZ,EAAP;AAEF;AACA;AACA;;AACA,aAAK,IAAL;AACE,cAAMvB,OAAO,GAAGL,MAAM,CAACM,SAAP,CAAiBH,IAAjB,EAAuB,KAAK0B,UAAL,EAAvB,CAAhB;AACAxB,UAAAA,OAAO,CAACE,KAAR,GAAgB,IAAhB;AACA,iBAAO,KAAKR,MAAL,CAAYS,UAAZ,CAAuBH,OAAvB,EAAgCF,IAAhC,CAAP;AAEF;AACA;AACA;;AACA;AACE,eAAKgB,aAAL,CACE,wDAAwDE,MAD1D,EAEE,IAFF,EAGElB,IAHF,EAIE,OAJF,EAKEd,MAAM,CAACyC,4BALT;AAlCJ;AA0CD;AAED;;;;;;;;;;;8CAQ0B9B,M,EAAQC,G,EAAKC,I,EAAMC,I,EAAM;AACjD,UAAIa,UAAJ,EAAgBe,UAAhB;;AACA,UAAI5B,IAAI,CAACW,kBAAL,GAA0BxB,YAAY,CAAC0C,WAA3C,EAAwD;AACtDhC,QAAAA,MAAM,CAACwB,IAAP,CAAY,CAAZ,EADsD,CACtC;;AAChB,YAAIxB,MAAM,CAACiC,SAAP,EAAJ,EAAwB;AACtB;AACAjB,UAAAA,UAAU,GAAGhB,MAAM,CAACkC,mBAAP,EAAb;AACAH,UAAAA,UAAU,GAAG/B,MAAM,CAACmC,mBAAP,EAAb;AACD,SAJD,MAIO;AACL;AACAnB,UAAAA,UAAU,GAAG,oBAAb;AACAe,UAAAA,UAAU,GAAG5B,IAAI,CAACiC,IAAL,CAAUC,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAb;AACD;AACF,OAXD,MAWO;AACLrB,QAAAA,UAAU,GAAGhB,MAAM,CAACkC,mBAAP,CAA2B,OAA3B,CAAb;AACAH,QAAAA,UAAU,GAAG/B,MAAM,CAACmC,mBAAP,EAAb;AACD;;AAED,UAAMpC,MAAM,GAAGR,SAAS,CAAC+C,aAAV,CACbtB,UADa,EAEb,KAAKjB,MAAL,CAAYwC,UAFC,EAGb,KAAKxC,MAAL,CAAYyC,kBAHC,EAIbT,UAJa,EAKb5B,IALa,EAMbD,IANa,EAObD,GAPa,EAQb,KAAKT,OARQ,EASb,KAAKC,MATQ,EAUb,KAAKyB,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAVa,CAAf;;AAaA,UAAI,CAAClB,MAAL,EAAa;AACX,aAAKN,MAAL,CACEJ,MAAM,CAACoD,WAAP,CACE,sDACEzB,UADF,GAEE,yBAHJ,EAIE,IAJF,EAKEb,IALF,EAME,OANF,EAOEd,MAAM,CAACqD,sCAPT,CADF;AAWD,OAZD,MAYO;AACL,aAAK3C,MAAL,GAAcA,MAAd;;AACA,aAAKJ,WAAL,CAAiB,KAAKI,MAAtB,EAA8B,KAA9B;AACD;AACF;;;kCAGCiB,U,EACA2B,O,EACAC,e,EACAb,U,EACA5B,I,EACAD,I,EACAD,G,EACA4C,W,EACAC,U,EACAC,iB,EACA;AACA,UAAIC,UAAJ;;AACA,cAAQhC,UAAR;AACE,aAAK,uBAAL;AACEgC,UAAAA,UAAU,GAAGhE,OAAO,CAAC,gCAAD,CAApB;AACA;;AAEF,aAAK,sBAAL;AACEgE,UAAAA,UAAU,GAAGhE,OAAO,CAAC,+BAAD,CAApB;AACA;;AAEF,aAAK,gBAAL;AACEgE,UAAAA,UAAU,GAAGhE,OAAO,CAAC,iCAAD,CAApB;AACA;;AAEF,aAAK,QAAL;AACEgE,UAAAA,UAAU,GAAGhE,OAAO,CAAC,6BAAD,CAApB;AACA;AAEF;;AAEA;AACE,iBAAO,IAAP;AApBJ;;AAsBA,aAAO,IAAIgE,UAAJ,CACLL,OADK,EAELC,eAFK,EAGLb,UAHK,EAILc,WAJK,EAKLC,UALK,EAMLC,iBANK,CAAP;AAQD;;;;EA5MqBhE,O;;AA+MxBkE,MAAM,CAACC,OAAP,GAAiB3D,SAAjB","sourcesContent":["'use strict';\n\nconst Command = require('../command');\nconst InitialHandshake = require('./initial-handshake');\nconst ClientHandshakeResponse = require('./client-handshake-response');\nconst SslRequest = require('./ssl-request');\nconst ClientCapabilities = require('./client-capabilities');\nconst Errors = require('../../misc/errors');\nconst Capabilities = require('../../const/capabilities');\n\n/**\n * Handle handshake.\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/\n */\nclass Handshake extends Command {\n  constructor(resolve, reject, _createSecureContext, _addCommand, getSocket) {\n    super(resolve, reject);\n    this._createSecureContext = _createSecureContext;\n    this._addCommand = _addCommand;\n    this.getSocket = getSocket;\n    this.onPacketReceive = this.parseHandshakeInit;\n    this.plugin = this;\n  }\n\n  parseHandshakeInit(packet, out, opts, info) {\n    if (packet.peek() === 0xff) {\n      //in case that some host is not permit to connect server\n      const authErr = packet.readError(info);\n      authErr.fatal = true;\n      return this.throwError(authErr, info);\n    }\n\n    let handshake = new InitialHandshake(packet, info);\n    ClientCapabilities.init(opts, info);\n\n    if (opts.ssl) {\n      if (info.serverCapabilities & Capabilities.SSL) {\n        info.clientCapabilities |= Capabilities.SSL;\n        SslRequest.send(this, out, info, opts);\n        this._createSecureContext(\n          function() {\n            ClientHandshakeResponse.send(this, out, opts, handshake.pluginName, info);\n          }.bind(this)\n        );\n        return (this.onPacketReceive = this.handshakeResult);\n      } else {\n        return this.throwNewError(\n          'Trying to connect with ssl, but ssl not enabled in the server',\n          true,\n          info,\n          '08S01',\n          Errors.ER_SERVER_SSL_DISABLED\n        );\n      }\n    } else {\n      ClientHandshakeResponse.send(this, out, opts, handshake.pluginName, info);\n    }\n    this.onPacketReceive = this.handshakeResult;\n  }\n\n  /**\n   * Fast-path handshake results :\n   *  - if plugin was the one expected by server, server will send OK_Packet / ERR_Packet.\n   *  - if not, server send an AuthSwitchRequest packet, indicating the specific PLUGIN to use with this user.\n   *    dispatching to plugin handler then.\n   *\n   * @param packet    current packet\n   * @param out       output buffer\n   * @param opts      options\n   * @param info      connection info\n   * @returns {*}     return null if authentication succeed, depending on plugin conversation if not finished\n   */\n  handshakeResult(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* AuthSwitchRequest packet\n      //*********************************************************************************************************\n      case 0xfe:\n        this.plugin.onPacketReceive = null;\n        this.plugin.emit('send_end');\n        this.plugin.emit('end');\n        this.dispatchAuthSwitchRequest(packet, out, opts, info);\n        return;\n\n      //*********************************************************************************************************\n      //* OK_Packet - authentication succeeded\n      //*********************************************************************************************************\n      case 0x00:\n        packet.skip(1); //skip header\n        packet.skipLengthCodedNumber(); //skip affected rows\n        packet.skipLengthCodedNumber(); //skip last insert id\n        info.status = packet.readUInt16();\n        this.plugin.emit('send_end');\n        return this.plugin.successEnd();\n\n      //*********************************************************************************************************\n      //* ERR_Packet\n      //*********************************************************************************************************\n      case 0xff:\n        const authErr = packet.readError(info, this.displaySql());\n        authErr.fatal = true;\n        return this.plugin.throwError(authErr, info);\n\n      //*********************************************************************************************************\n      //* unexpected\n      //*********************************************************************************************************\n      default:\n        this.throwNewError(\n          'Unexpected type of packet during handshake phase : ' + marker,\n          true,\n          info,\n          '42000',\n          Errors.ER_AUTHENTICATION_BAD_PACKET\n        );\n    }\n  }\n\n  /**\n   * Handle authentication switch request : dispatch to plugin handler.\n   *\n   * @param packet  packet\n   * @param out     output writer\n   * @param opts    options\n   * @param info    connection information\n   */\n  dispatchAuthSwitchRequest(packet, out, opts, info) {\n    let pluginName, pluginData;\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      packet.skip(1); //header\n      if (packet.remaining()) {\n        //AuthSwitchRequest packet.\n        pluginName = packet.readStringNullEnded();\n        pluginData = packet.readBufferRemaining();\n      } else {\n        //OldAuthSwitchRequest\n        pluginName = 'mysql_old_password';\n        pluginData = info.seed.slice(0, 8);\n      }\n    } else {\n      pluginName = packet.readStringNullEnded('cesu8');\n      pluginData = packet.readBufferRemaining();\n    }\n\n    const plugin = Handshake.pluginHandler(\n      pluginName,\n      this.plugin.sequenceNo,\n      this.plugin.compressSequenceNo,\n      pluginData,\n      info,\n      opts,\n      out,\n      this.resolve,\n      this.reject,\n      this.handshakeResult.bind(this)\n    );\n\n    if (!plugin) {\n      this.reject(\n        Errors.createError(\n          \"Client does not support authentication protocol '\" +\n            pluginName +\n            \"' requested by server. \",\n          true,\n          info,\n          '08004',\n          Errors.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED\n        )\n      );\n    } else {\n      this.plugin = plugin;\n      this._addCommand(this.plugin, false);\n    }\n  }\n\n  static pluginHandler(\n    pluginName,\n    packSeq,\n    compressPackSeq,\n    pluginData,\n    info,\n    opts,\n    out,\n    authResolve,\n    authReject,\n    multiAuthResolver\n  ) {\n    let pluginAuth;\n    switch (pluginName) {\n      case 'mysql_native_password':\n        pluginAuth = require('./auth/native-password-auth.js');\n        break;\n\n      case 'mysql_clear_password':\n        pluginAuth = require('./auth/clear-password-auth.js');\n        break;\n\n      case 'client_ed25519':\n        pluginAuth = require('./auth/ed25519-password-auth.js');\n        break;\n\n      case 'dialog':\n        pluginAuth = require('./auth/pam-password-auth.js');\n        break;\n\n      //TODO \"auth_gssapi_client\"\n\n      default:\n        return null;\n    }\n    return new pluginAuth(\n      packSeq,\n      compressPackSeq,\n      pluginData,\n      authResolve,\n      authReject,\n      multiAuthResolver\n    );\n  }\n}\n\nmodule.exports = Handshake;\n"]},"metadata":{},"sourceType":"script"}