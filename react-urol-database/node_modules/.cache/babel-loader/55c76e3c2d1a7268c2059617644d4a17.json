{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar CommonBinary = require('./common-binary-cmd');\n\nvar Errors = require('../misc/errors');\n\nvar Parse = require('../misc/parse');\n\nvar BulkPacket = require('../io/bulk-packet');\n/**\n * Protocol COM_STMT_BULK_EXECUTE\n * see : https://mariadb.com/kb/en/library/com_stmt_bulk_execute/\n */\n\n\nvar BatchBulk =\n/*#__PURE__*/\nfunction (_CommonBinary) {\n  _inherits(BatchBulk, _CommonBinary);\n\n  function BatchBulk(resolve, reject, options, connOpts, sql, values) {\n    var _this;\n\n    _classCallCheck(this, BatchBulk);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BatchBulk).call(this, resolve, reject, options, connOpts, sql, values));\n    _this.sending = true;\n    _this.onPacketReceive = _this.readPrepareResultPacket;\n    return _this;\n  }\n  /**\n   * Send COM_STMT_BULK_EXECUTE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n\n\n  _createClass(BatchBulk, [{\n    key: \"start\",\n    value: function start(out, opts, info) {\n      this.info = info;\n      this.values = this.initialValues;\n\n      if (this.opts.timeout) {\n        var err = Errors.createError('Cannot use timeout for Batch statement', false, info, 'HY000', Errors.ER_TIMEOUT_NOT_SUPPORTED);\n        this.emit('send_end');\n        this.throwError(err, info);\n        return;\n      }\n\n      var questionMarkSql = this.sql;\n\n      if (this.opts.namedPlaceholders) {\n        var res = Parse.searchPlaceholder(this.sql, info, this.initialValues, this.displaySql.bind(this));\n        questionMarkSql = res.sql;\n        this.values = res.values;\n      }\n\n      if (!this.validateParameters(info)) {\n        this.sending = false;\n        return;\n      } //send COM_STMT_PREPARE command\n\n\n      this.out = out;\n      this.packet = new BulkPacket(this.opts, out, this.values[0]);\n      out.startPacket(this);\n      out.writeInt8(0x16);\n      out.writeString(questionMarkSql);\n      out.flushBuffer(true);\n      out.startPacket(this);\n      this.valueIdx = 0;\n      this.sendQueries();\n    }\n  }, {\n    key: \"sendQueries\",\n    value: function sendQueries() {\n      var flushed = false;\n\n      while (!flushed && this.sending && this.valueIdx < this.values.length) {\n        this.valueRow = this.values[this.valueIdx++]; //********************************************\n        // send params\n        //********************************************\n\n        var len = this.valueRow.length;\n\n        for (var i = 0; i < len; i++) {\n          var value = this.valueRow[i];\n\n          if (value === null) {\n            flushed = this.packet.writeInt8(0x01) || flushed;\n            continue;\n          } //********************************************\n          // param has no stream. directly write in buffer\n          //********************************************\n\n\n          flushed = this.writeParam(this.packet, value, this.opts, this.info) || flushed;\n        }\n\n        var last = this.valueIdx === this.values.length;\n        flushed = this.packet.mark(last, last ? null : this.values[this.valueIdx]) || flushed;\n      }\n\n      if (this.valueIdx < this.values.length && !this.packet.haveErrorResponse) {\n        //there is still data to send\n        setImmediate(this.sendQueries.bind(this));\n      } else {\n        if (this.sending && this.valueIdx === this.values.length) this.emit('send_end');\n        this.sending = false;\n      }\n    }\n  }, {\n    key: \"displaySql\",\n    value: function displaySql() {\n      if (this.opts && this.initialValues) {\n        if (this.sql.length > this.opts.debugLen) {\n          return 'sql: ' + this.sql.substring(0, this.opts.debugLen) + '...';\n        }\n\n        var sqlMsg = 'sql: ' + this.sql + ' - parameters:';\n        sqlMsg += '[';\n\n        for (var i = 0; i < this.initialValues.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          var param = this.initialValues[i];\n          sqlMsg = this.logParameters(sqlMsg, param);\n\n          if (sqlMsg.length > this.opts.debugLen) {\n            sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\n            break;\n          }\n        }\n\n        sqlMsg += ']';\n        return sqlMsg;\n      }\n\n      return 'sql: ' + this.sql + ' - parameters:[]';\n    }\n  }, {\n    key: \"success\",\n    value: function success(val) {\n      this.packet.waitingResponseNo--;\n\n      if (!this.sending && this.packet.waitingResponseNo === 0) {\n        //send COM_STMT_CLOSE packet\n        if (!this.firstError || !this.firstError.fatal) {\n          this.sequenceNo = -1;\n          this.compressSequenceNo = -1;\n          this.out.startPacket(this);\n          this.out.writeInt8(0x19);\n          this.out.writeInt32(this.statementId);\n          this.out.flushBuffer(true);\n        }\n\n        this.sending = false;\n        this.emit('send_end');\n\n        if (this.packet.haveErrorResponse) {\n          this.packet = null;\n          this.resolve = null;\n          this.onPacketReceive = null;\n          this._columns = null;\n          this._rows = null;\n          process.nextTick(this.reject, this.firstError);\n          this.reject = null;\n          this.emit('end', this.firstError);\n        } else {\n          this.packet = null;\n          var totalAffectedRows = 0;\n\n          this._rows.forEach(function (row) {\n            totalAffectedRows += row.affectedRows;\n          });\n\n          var rs = {\n            affectedRows: totalAffectedRows,\n            insertId: this._rows[0].insertId,\n            warningStatus: this._rows[this._rows.length - 1].warningStatus\n          };\n          this.successEnd(rs);\n          this._columns = null;\n          this._rows = null;\n        }\n\n        return;\n      }\n\n      if (!this.packet.haveErrorResponse) {\n        this._responseIndex++;\n        this.onPacketReceive = this.readResponsePacket;\n      }\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(err, info) {\n      this.packet.waitingResponseNo--;\n      this.sending = false;\n\n      if (this.packet && !this.packet.haveErrorResponse) {\n        if (err.fatal) {\n          this.packet.waitingResponseNo = 0;\n        }\n\n        if (this.stack) {\n          err = Errors.createError(err.message, err.fatal, info, err.sqlState, err.errno, this.stack, false);\n        }\n\n        this.firstError = err;\n        this.packet.endedWithError();\n      }\n\n      if (!this.sending && this.packet.waitingResponseNo === 0) {\n        this.resolve = null; //send COM_STMT_CLOSE packet\n\n        if (!err.fatal && this.statementId) {\n          this.sequenceNo = -1;\n          this.compressSequenceNo = -1;\n          this.out.startPacket(this);\n          this.out.writeInt8(0x19);\n          this.out.writeInt32(this.statementId);\n          this.out.flushBuffer(true);\n        }\n\n        this.emit('send_end');\n        process.nextTick(this.reject, this.firstError);\n        this.reject = null;\n        this.onPacketReceive = null;\n        this.emit('end', this.firstError);\n      } else {\n        this._responseIndex++;\n        this.onPacketReceive = this.readResponsePacket;\n      }\n    }\n    /**\n     * Validate that parameters exists and are defined.\n     *\n     * @param info        connection info\n     * @returns {boolean} return false if any error occur.\n     */\n\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters(info) {\n      //validate parameter size.\n      for (var r = 0; r < this.values.length; r++) {\n        if (!Array.isArray(this.values[r])) this.values[r] = [this.values[r]]; //validate parameter is defined.\n\n        for (var i = 0; i < this.values[r].length; i++) {\n          if (this.values[r][i] === undefined) {\n            this.emit('send_end');\n            this.throwNewError('Parameter at position ' + (i + 1) + ' is undefined for values ' + r + '\\n' + this.displaySql(), false, info, 'HY000', Errors.ER_PARAMETER_UNDEFINED);\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return BatchBulk;\n}(CommonBinary);\n\nmodule.exports = BatchBulk;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/batch-bulk.js"],"names":["CommonBinary","require","Errors","Parse","BulkPacket","BatchBulk","resolve","reject","options","connOpts","sql","values","sending","onPacketReceive","readPrepareResultPacket","out","opts","info","initialValues","timeout","err","createError","ER_TIMEOUT_NOT_SUPPORTED","emit","throwError","questionMarkSql","namedPlaceholders","res","searchPlaceholder","displaySql","bind","validateParameters","packet","startPacket","writeInt8","writeString","flushBuffer","valueIdx","sendQueries","flushed","length","valueRow","len","i","value","writeParam","last","mark","haveErrorResponse","setImmediate","debugLen","substring","sqlMsg","param","logParameters","substr","val","waitingResponseNo","firstError","fatal","sequenceNo","compressSequenceNo","writeInt32","statementId","_columns","_rows","process","nextTick","totalAffectedRows","forEach","row","affectedRows","rs","insertId","warningStatus","successEnd","_responseIndex","readResponsePacket","stack","message","sqlState","errno","endedWithError","r","Array","isArray","undefined","throwNewError","ER_PARAMETER_UNDEFINED","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommonBinary = require('./common-binary-cmd');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst BulkPacket = require('../io/bulk-packet');\n\n/**\n * Protocol COM_STMT_BULK_EXECUTE\n * see : https://mariadb.com/kb/en/library/com_stmt_bulk_execute/\n */\nclass BatchBulk extends CommonBinary {\n  constructor(resolve, reject, options, connOpts, sql, values) {\n    super(resolve, reject, options, connOpts, sql, values);\n    this.sending = true;\n    this.onPacketReceive = this.readPrepareResultPacket;\n  }\n\n  /**\n   * Send COM_STMT_BULK_EXECUTE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    this.info = info;\n    this.values = this.initialValues;\n\n    if (this.opts.timeout) {\n      const err = Errors.createError(\n        'Cannot use timeout for Batch statement',\n        false,\n        info,\n        'HY000',\n        Errors.ER_TIMEOUT_NOT_SUPPORTED\n      );\n      this.emit('send_end');\n      this.throwError(err, info);\n      return;\n    }\n\n    let questionMarkSql = this.sql;\n    if (this.opts.namedPlaceholders) {\n      const res = Parse.searchPlaceholder(\n        this.sql,\n        info,\n        this.initialValues,\n        this.displaySql.bind(this)\n      );\n      questionMarkSql = res.sql;\n      this.values = res.values;\n    }\n\n    if (!this.validateParameters(info)) {\n      this.sending = false;\n      return;\n    }\n\n    //send COM_STMT_PREPARE command\n    this.out = out;\n    this.packet = new BulkPacket(this.opts, out, this.values[0]);\n\n    out.startPacket(this);\n    out.writeInt8(0x16);\n    out.writeString(questionMarkSql);\n    out.flushBuffer(true);\n    out.startPacket(this);\n    this.valueIdx = 0;\n    this.sendQueries();\n  }\n\n  sendQueries() {\n    let flushed = false;\n    while (!flushed && this.sending && this.valueIdx < this.values.length) {\n      this.valueRow = this.values[this.valueIdx++];\n\n      //********************************************\n      // send params\n      //********************************************\n      const len = this.valueRow.length;\n      for (let i = 0; i < len; i++) {\n        const value = this.valueRow[i];\n        if (value === null) {\n          flushed = this.packet.writeInt8(0x01) || flushed;\n          continue;\n        }\n\n        //********************************************\n        // param has no stream. directly write in buffer\n        //********************************************\n        flushed = this.writeParam(this.packet, value, this.opts, this.info) || flushed;\n      }\n      const last = this.valueIdx === this.values.length;\n      flushed = this.packet.mark(last, last ? null : this.values[this.valueIdx]) || flushed;\n    }\n\n    if (this.valueIdx < this.values.length && !this.packet.haveErrorResponse) {\n      //there is still data to send\n      setImmediate(this.sendQueries.bind(this));\n    } else {\n      if (this.sending && this.valueIdx === this.values.length) this.emit('send_end');\n      this.sending = false;\n    }\n  }\n\n  displaySql() {\n    if (this.opts && this.initialValues) {\n      if (this.sql.length > this.opts.debugLen) {\n        return 'sql: ' + this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n\n      let sqlMsg = 'sql: ' + this.sql + ' - parameters:';\n      sqlMsg += '[';\n      for (let i = 0; i < this.initialValues.length; i++) {\n        if (i !== 0) sqlMsg += ',';\n        let param = this.initialValues[i];\n        sqlMsg = this.logParameters(sqlMsg, param);\n        if (sqlMsg.length > this.opts.debugLen) {\n          sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\n          break;\n        }\n      }\n      sqlMsg += ']';\n      return sqlMsg;\n    }\n    return 'sql: ' + this.sql + ' - parameters:[]';\n  }\n\n  success(val) {\n    this.packet.waitingResponseNo--;\n\n    if (!this.sending && this.packet.waitingResponseNo === 0) {\n      //send COM_STMT_CLOSE packet\n      if (!this.firstError || !this.firstError.fatal) {\n        this.sequenceNo = -1;\n        this.compressSequenceNo = -1;\n        this.out.startPacket(this);\n        this.out.writeInt8(0x19);\n        this.out.writeInt32(this.statementId);\n        this.out.flushBuffer(true);\n      }\n      this.sending = false;\n      this.emit('send_end');\n\n      if (this.packet.haveErrorResponse) {\n        this.packet = null;\n        this.resolve = null;\n        this.onPacketReceive = null;\n        this._columns = null;\n        this._rows = null;\n        process.nextTick(this.reject, this.firstError);\n        this.reject = null;\n        this.emit('end', this.firstError);\n      } else {\n        this.packet = null;\n        let totalAffectedRows = 0;\n        this._rows.forEach(row => {\n          totalAffectedRows += row.affectedRows;\n        });\n\n        const rs = {\n          affectedRows: totalAffectedRows,\n          insertId: this._rows[0].insertId,\n          warningStatus: this._rows[this._rows.length - 1].warningStatus\n        };\n        this.successEnd(rs);\n        this._columns = null;\n        this._rows = null;\n      }\n      return;\n    }\n\n    if (!this.packet.haveErrorResponse) {\n      this._responseIndex++;\n      this.onPacketReceive = this.readResponsePacket;\n    }\n  }\n\n  throwError(err, info) {\n    this.packet.waitingResponseNo--;\n    this.sending = false;\n    if (this.packet && !this.packet.haveErrorResponse) {\n      if (err.fatal) {\n        this.packet.waitingResponseNo = 0;\n      }\n      if (this.stack) {\n        err = Errors.createError(\n          err.message,\n          err.fatal,\n          info,\n          err.sqlState,\n          err.errno,\n          this.stack,\n          false\n        );\n      }\n      this.firstError = err;\n      this.packet.endedWithError();\n    }\n\n    if (!this.sending && this.packet.waitingResponseNo === 0) {\n      this.resolve = null;\n\n      //send COM_STMT_CLOSE packet\n      if (!err.fatal && this.statementId) {\n        this.sequenceNo = -1;\n        this.compressSequenceNo = -1;\n        this.out.startPacket(this);\n        this.out.writeInt8(0x19);\n        this.out.writeInt32(this.statementId);\n        this.out.flushBuffer(true);\n      }\n      this.emit('send_end');\n      process.nextTick(this.reject, this.firstError);\n      this.reject = null;\n      this.onPacketReceive = null;\n      this.emit('end', this.firstError);\n    } else {\n      this._responseIndex++;\n      this.onPacketReceive = this.readResponsePacket;\n    }\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    for (let r = 0; r < this.values.length; r++) {\n      if (!Array.isArray(this.values[r])) this.values[r] = [this.values[r]];\n\n      //validate parameter is defined.\n      for (let i = 0; i < this.values[r].length; i++) {\n        if (this.values[r][i] === undefined) {\n          this.emit('send_end');\n          this.throwNewError(\n            'Parameter at position ' +\n              (i + 1) +\n              ' is undefined for values ' +\n              r +\n              '\\n' +\n              this.displaySql(),\n            false,\n            info,\n            'HY000',\n            Errors.ER_PARAMETER_UNDEFINED\n          );\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = BatchBulk;\n"]},"metadata":{},"sourceType":"script"}