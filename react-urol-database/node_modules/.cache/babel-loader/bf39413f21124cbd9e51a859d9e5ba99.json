{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar Errors = require('../misc/errors');\n\nvar ServerStatus = require('../const/server-status');\n\nvar StateChange = require('../const/state-change');\n\nvar Collations = require('../const/collations');\n/**\n * Default command interface.\n */\n\n\nvar Command =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(Command, _EventEmitter);\n\n  function Command(resolve, reject) {\n    var _this;\n\n    _classCallCheck(this, Command);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Command).call(this));\n    _this.sequenceNo = -1;\n    _this.compressSequenceNo = -1;\n    _this.resolve = resolve;\n    _this.reject = reject;\n    _this.sending = false;\n    return _this;\n  }\n\n  _createClass(Command, [{\n    key: \"displaySql\",\n    value: function displaySql() {}\n    /**\n     * Throw an an unexpected error.\n     * server exchange will still be read to keep connection in a good state, but promise will be rejected.\n     *\n     * @param msg message\n     * @param fatal is error fatal for connection\n     * @param info current server state information\n     * @param sqlState error sqlState\n     * @param errno error number\n     */\n\n  }, {\n    key: \"throwUnexpectedError\",\n    value: function throwUnexpectedError(msg, fatal, info, sqlState, errno) {\n      if (this.reject) {\n        process.nextTick(this.reject, Errors.createError(msg, fatal, info, sqlState, errno, this.stack, false));\n        this.resolve = null;\n        this.reject = null;\n      }\n    }\n    /**\n     * Create and throw new Error from error information\n     * only first called throwing an error or successfully end will be executed.\n     *\n     * @param msg message\n     * @param fatal is error fatal for connection\n     * @param info current server state information\n     * @param sqlState error sqlState\n     * @param errno error number\n     */\n\n  }, {\n    key: \"throwNewError\",\n    value: function throwNewError(msg, fatal, info, sqlState, errno) {\n      this.onPacketReceive = null;\n\n      if (this.reject) {\n        process.nextTick(this.reject, Errors.createError(msg, fatal, info, sqlState, errno, this.stack, false));\n        this.resolve = null;\n        this.reject = null;\n      }\n\n      this.emit('end');\n    }\n    /**\n     * Throw Error\n     *  only first called throwing an error or successfully end will be executed.\n     *\n     * @param err error to be thrown\n     * @param info current server state information\n     */\n\n  }, {\n    key: \"throwError\",\n    value: function throwError(err, info) {\n      this.onPacketReceive = null;\n\n      if (this.reject) {\n        if (this.stack) {\n          err = Errors.createError(err.message, err.fatal, info, err.sqlState, err.errno, this.stack, false);\n        }\n\n        this.resolve = null;\n        process.nextTick(this.reject, err);\n        this.reject = null;\n      }\n\n      this.emit('end', err);\n    }\n    /**\n     * Successfully end command.\n     * only first called throwing an error or successfully end will be executed.\n     *\n     * @param val return value.\n     */\n\n  }, {\n    key: \"successEnd\",\n    value: function successEnd(val) {\n      if (this.resolve) {\n        this.onPacketReceive = null;\n        this.reject = null;\n        process.nextTick(this.resolve, val);\n        this.resolve = null;\n        this.emit('end');\n      }\n    }\n  }], [{\n    key: \"parseOkPacket\",\n    value: function parseOkPacket(packet, out, opts, info) {\n      packet.skip(1); //skip header\n\n      var affectedRows = packet.readUnsignedLength();\n      var insertIds = packet.readSignedLength();\n      info.status = packet.readUInt16();\n      var rs = {\n        affectedRows: affectedRows,\n        insertId: insertIds,\n        warningStatus: packet.readUInt16()\n      };\n\n      if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n        packet.skipLengthCodedNumber();\n\n        while (packet.remaining()) {\n          var subPacket = packet.subPacketLengthEncoded();\n\n          while (subPacket.remaining()) {\n            var type = subPacket.readUInt8();\n\n            switch (type) {\n              case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                var subSubPacket = subPacket.subPacketLengthEncoded();\n                var variable = subSubPacket.readStringLength();\n                var value = subSubPacket.readStringLength();\n\n                switch (variable) {\n                  case 'character_set_client':\n                    opts.collation = Collations.fromCharset(value);\n\n                    if (opts.collation === undefined) {\n                      this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                      return;\n                    }\n\n                    opts.emit('collation', opts.collation);\n                    break;\n\n                  default: //variable not used by driver\n\n                }\n\n                break;\n\n              case StateChange.SESSION_TRACK_SCHEMA:\n                var subSubPacket2 = subPacket.subPacketLengthEncoded();\n                info.database = subSubPacket2.readStringLength();\n                break;\n            }\n          }\n        }\n      }\n\n      return rs;\n    }\n  }]);\n\n  return Command;\n}(EventEmitter);\n\nmodule.exports = Command;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/command.js"],"names":["EventEmitter","require","Errors","ServerStatus","StateChange","Collations","Command","resolve","reject","sequenceNo","compressSequenceNo","sending","msg","fatal","info","sqlState","errno","process","nextTick","createError","stack","onPacketReceive","emit","err","message","val","packet","out","opts","skip","affectedRows","readUnsignedLength","insertIds","readSignedLength","status","readUInt16","rs","insertId","warningStatus","SESSION_STATE_CHANGED","skipLengthCodedNumber","remaining","subPacket","subPacketLengthEncoded","type","readUInt8","SESSION_TRACK_SYSTEM_VARIABLES","subSubPacket","variable","readStringLength","value","collation","fromCharset","undefined","throwError","Error","SESSION_TRACK_SCHEMA","subSubPacket2","database","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst Errors = require('../misc/errors');\nconst ServerStatus = require('../const/server-status');\nconst StateChange = require('../const/state-change');\nconst Collations = require('../const/collations');\n\n/**\n * Default command interface.\n */\nclass Command extends EventEmitter {\n  constructor(resolve, reject) {\n    super();\n    this.sequenceNo = -1;\n    this.compressSequenceNo = -1;\n    this.resolve = resolve;\n    this.reject = reject;\n    this.sending = false;\n  }\n\n  displaySql() {}\n\n  /**\n   * Throw an an unexpected error.\n   * server exchange will still be read to keep connection in a good state, but promise will be rejected.\n   *\n   * @param msg message\n   * @param fatal is error fatal for connection\n   * @param info current server state information\n   * @param sqlState error sqlState\n   * @param errno error number\n   */\n  throwUnexpectedError(msg, fatal, info, sqlState, errno) {\n    if (this.reject) {\n      process.nextTick(\n        this.reject,\n        Errors.createError(msg, fatal, info, sqlState, errno, this.stack, false)\n      );\n      this.resolve = null;\n      this.reject = null;\n    }\n  }\n\n  /**\n   * Create and throw new Error from error information\n   * only first called throwing an error or successfully end will be executed.\n   *\n   * @param msg message\n   * @param fatal is error fatal for connection\n   * @param info current server state information\n   * @param sqlState error sqlState\n   * @param errno error number\n   */\n  throwNewError(msg, fatal, info, sqlState, errno) {\n    this.onPacketReceive = null;\n    if (this.reject) {\n      process.nextTick(\n        this.reject,\n        Errors.createError(msg, fatal, info, sqlState, errno, this.stack, false)\n      );\n      this.resolve = null;\n      this.reject = null;\n    }\n    this.emit('end');\n  }\n\n  /**\n   * Throw Error\n   *  only first called throwing an error or successfully end will be executed.\n   *\n   * @param err error to be thrown\n   * @param info current server state information\n   */\n  throwError(err, info) {\n    this.onPacketReceive = null;\n    if (this.reject) {\n      if (this.stack) {\n        err = Errors.createError(\n          err.message,\n          err.fatal,\n          info,\n          err.sqlState,\n          err.errno,\n          this.stack,\n          false\n        );\n      }\n      this.resolve = null;\n      process.nextTick(this.reject, err);\n      this.reject = null;\n    }\n    this.emit('end', err);\n  }\n\n  /**\n   * Successfully end command.\n   * only first called throwing an error or successfully end will be executed.\n   *\n   * @param val return value.\n   */\n  successEnd(val) {\n    if (this.resolve) {\n      this.onPacketReceive = null;\n      this.reject = null;\n      process.nextTick(this.resolve, val);\n      this.resolve = null;\n      this.emit('end');\n    }\n  }\n\n  static parseOkPacket(packet, out, opts, info) {\n    packet.skip(1); //skip header\n\n    const affectedRows = packet.readUnsignedLength();\n    const insertIds = packet.readSignedLength();\n\n    info.status = packet.readUInt16();\n\n    const rs = {\n      affectedRows: affectedRows,\n      insertId: insertIds,\n      warningStatus: packet.readUInt16()\n    };\n\n    if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n      packet.skipLengthCodedNumber();\n      while (packet.remaining()) {\n        const subPacket = packet.subPacketLengthEncoded();\n        while (subPacket.remaining()) {\n          const type = subPacket.readUInt8();\n          switch (type) {\n            case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n              const subSubPacket = subPacket.subPacketLengthEncoded();\n              const variable = subSubPacket.readStringLength();\n              const value = subSubPacket.readStringLength();\n\n              switch (variable) {\n                case 'character_set_client':\n                  opts.collation = Collations.fromCharset(value);\n                  if (opts.collation === undefined) {\n                    this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                    return;\n                  }\n                  opts.emit('collation', opts.collation);\n                  break;\n\n                default:\n                //variable not used by driver\n              }\n              break;\n\n            case StateChange.SESSION_TRACK_SCHEMA:\n              const subSubPacket2 = subPacket.subPacketLengthEncoded();\n              info.database = subSubPacket2.readStringLength();\n              break;\n          }\n        }\n      }\n    }\n\n    return rs;\n  }\n}\n\nmodule.exports = Command;\n"]},"metadata":{},"sourceType":"script"}