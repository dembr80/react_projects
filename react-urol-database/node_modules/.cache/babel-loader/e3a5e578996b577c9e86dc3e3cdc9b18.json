{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar PluginAuth = require('./plugin-auth');\n\nvar Crypto = require('crypto');\n/**\n * Standard authentication plugin\n */\n\n\nvar NativePasswordAuth =\n/*#__PURE__*/\nfunction (_PluginAuth) {\n  _inherits(NativePasswordAuth, _PluginAuth);\n\n  function NativePasswordAuth(packSeq, compressPackSeq, pluginData, resolve, reject, multiAuthResolver) {\n    var _this;\n\n    _classCallCheck(this, NativePasswordAuth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NativePasswordAuth).call(this, resolve, reject, multiAuthResolver));\n    _this.pluginData = pluginData;\n    _this.sequenceNo = packSeq;\n    _this.compressSequenceNo = compressPackSeq;\n    return _this;\n  }\n\n  _createClass(NativePasswordAuth, [{\n    key: \"start\",\n    value: function start(out, opts, info) {\n      //seed is ended with a null byte value.\n      var data = this.pluginData.slice(0, 20);\n      var authToken = NativePasswordAuth.encryptPassword(opts.password, data);\n      out.startPacket(this);\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.flushBuffer(true);\n      this.emit('send_end');\n      this.onPacketReceive = this.successSend;\n    }\n  }], [{\n    key: \"encryptPassword\",\n    value: function encryptPassword(password, seed) {\n      if (!password) return Buffer.alloc(0);\n      var hash = Crypto.createHash('sha1');\n      var stage1 = hash.update(password, 'utf8').digest();\n      hash = Crypto.createHash('sha1');\n      var stage2 = hash.update(stage1).digest();\n      hash = Crypto.createHash('sha1');\n      hash.update(seed);\n      hash.update(stage2);\n      var digest = hash.digest();\n      var returnBytes = Buffer.allocUnsafe(digest.length);\n\n      for (var i = 0; i < digest.length; i++) {\n        returnBytes[i] = stage1[i] ^ digest[i];\n      }\n\n      return returnBytes;\n    }\n  }]);\n\n  return NativePasswordAuth;\n}(PluginAuth);\n\nmodule.exports = NativePasswordAuth;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js"],"names":["PluginAuth","require","Crypto","NativePasswordAuth","packSeq","compressPackSeq","pluginData","resolve","reject","multiAuthResolver","sequenceNo","compressSequenceNo","out","opts","info","data","slice","authToken","encryptPassword","password","startPacket","writeBuffer","length","flushBuffer","emit","onPacketReceive","successSend","seed","Buffer","alloc","hash","createHash","stage1","update","digest","stage2","returnBytes","allocUnsafe","i","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;;IAGME,kB;;;;;AACJ,8BAAYC,OAAZ,EAAqBC,eAArB,EAAsCC,UAAtC,EAAkDC,OAAlD,EAA2DC,MAA3D,EAAmEC,iBAAnE,EAAsF;AAAA;;AAAA;;AACpF,4FAAMF,OAAN,EAAeC,MAAf,EAAuBC,iBAAvB;AACA,UAAKH,UAAL,GAAkBA,UAAlB;AACA,UAAKI,UAAL,GAAkBN,OAAlB;AACA,UAAKO,kBAAL,GAA0BN,eAA1B;AAJoF;AAKrF;;;;0BAEKO,G,EAAKC,I,EAAMC,I,EAAM;AACrB;AACA,UAAMC,IAAI,GAAG,KAAKT,UAAL,CAAgBU,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAAb;AACA,UAAIC,SAAS,GAAGd,kBAAkB,CAACe,eAAnB,CAAmCL,IAAI,CAACM,QAAxC,EAAkDJ,IAAlD,CAAhB;AAEAH,MAAAA,GAAG,CAACQ,WAAJ,CAAgB,IAAhB;AACAR,MAAAA,GAAG,CAACS,WAAJ,CAAgBJ,SAAhB,EAA2B,CAA3B,EAA8BA,SAAS,CAACK,MAAxC;AACAV,MAAAA,GAAG,CAACW,WAAJ,CAAgB,IAAhB;AACA,WAAKC,IAAL,CAAU,UAAV;AACA,WAAKC,eAAL,GAAuB,KAAKC,WAA5B;AACD;;;oCAEsBP,Q,EAAUQ,I,EAAM;AACrC,UAAI,CAACR,QAAL,EAAe,OAAOS,MAAM,CAACC,KAAP,CAAa,CAAb,CAAP;AAEf,UAAIC,IAAI,GAAG5B,MAAM,CAAC6B,UAAP,CAAkB,MAAlB,CAAX;AACA,UAAIC,MAAM,GAAGF,IAAI,CAACG,MAAL,CAAYd,QAAZ,EAAsB,MAAtB,EAA8Be,MAA9B,EAAb;AACAJ,MAAAA,IAAI,GAAG5B,MAAM,CAAC6B,UAAP,CAAkB,MAAlB,CAAP;AAEA,UAAII,MAAM,GAAGL,IAAI,CAACG,MAAL,CAAYD,MAAZ,EAAoBE,MAApB,EAAb;AACAJ,MAAAA,IAAI,GAAG5B,MAAM,CAAC6B,UAAP,CAAkB,MAAlB,CAAP;AAEAD,MAAAA,IAAI,CAACG,MAAL,CAAYN,IAAZ;AACAG,MAAAA,IAAI,CAACG,MAAL,CAAYE,MAAZ;AAEA,UAAID,MAAM,GAAGJ,IAAI,CAACI,MAAL,EAAb;AACA,UAAIE,WAAW,GAAGR,MAAM,CAACS,WAAP,CAAmBH,MAAM,CAACZ,MAA1B,CAAlB;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACZ,MAA3B,EAAmCgB,CAAC,EAApC,EAAwC;AACtCF,QAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBN,MAAM,CAACM,CAAD,CAAN,GAAYJ,MAAM,CAACI,CAAD,CAAnC;AACD;;AACD,aAAOF,WAAP;AACD;;;;EAvC8BpC,U;;AA0CjCuC,MAAM,CAACC,OAAP,GAAiBrC,kBAAjB","sourcesContent":["'use strict';\n\nconst PluginAuth = require('./plugin-auth');\nconst Crypto = require('crypto');\n\n/**\n * Standard authentication plugin\n */\nclass NativePasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, resolve, reject, multiAuthResolver) {\n    super(resolve, reject, multiAuthResolver);\n    this.pluginData = pluginData;\n    this.sequenceNo = packSeq;\n    this.compressSequenceNo = compressPackSeq;\n  }\n\n  start(out, opts, info) {\n    //seed is ended with a null byte value.\n    const data = this.pluginData.slice(0, 20);\n    let authToken = NativePasswordAuth.encryptPassword(opts.password, data);\n\n    out.startPacket(this);\n    out.writeBuffer(authToken, 0, authToken.length);\n    out.flushBuffer(true);\n    this.emit('send_end');\n    this.onPacketReceive = this.successSend;\n  }\n\n  static encryptPassword(password, seed) {\n    if (!password) return Buffer.alloc(0);\n\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n\n    let stage2 = hash.update(stage1).digest();\n    hash = Crypto.createHash('sha1');\n\n    hash.update(seed);\n    hash.update(stage2);\n\n    let digest = hash.digest();\n    let returnBytes = Buffer.allocUnsafe(digest.length);\n    for (let i = 0; i < digest.length; i++) {\n      returnBytes[i] = stage1[i] ^ digest[i];\n    }\n    return returnBytes;\n  }\n}\n\nmodule.exports = NativePasswordAuth;\n"]},"metadata":{},"sourceType":"script"}