{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\dembr\\\\Documents\\\\GitHub\\\\react_projects\\\\react-urol-database\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar CommonText = require('./common-text-cmd');\n\nvar Errors = require('../misc/errors');\n\nvar Parse = require('../misc/parse');\n\nvar RewritePacket = require('../io/rewrite-packet');\n\nvar QUOTE = 0x27;\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\n\nvar BatchRewrite =\n/*#__PURE__*/\nfunction (_CommonText) {\n  _inherits(BatchRewrite, _CommonText);\n\n  function BatchRewrite(resolve, reject, options, connOpts, sql, values) {\n    var _this;\n\n    _classCallCheck(this, BatchRewrite);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BatchRewrite).call(this, resolve, reject, options, connOpts, sql, values));\n    _this.sending = true;\n    return _this;\n  }\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n\n\n  _createClass(BatchRewrite, [{\n    key: \"start\",\n    value: function start(out, opts, info) {\n      this.info = info;\n\n      if (this.opts.timeout) {\n        var err = Errors.createError('Cannot use timeout for Batch statement', false, info, 'HY000', Errors.ER_TIMEOUT_NOT_SUPPORTED);\n        this.emit('send_end');\n        this.throwError(err, info);\n        return;\n      }\n\n      if (this.initialValues.length === 0) this.initialValues = [[]];\n\n      if (this.opts.namedPlaceholders) {\n        this.parseResults = Parse.splitRewritableNamedParameterQuery(this.sql, this.initialValues);\n        this.values = this.parseResults.values;\n      } else {\n        this.parseResults = Parse.splitRewritableQuery(this.sql);\n        this.values = this.initialValues;\n\n        if (!this.validateParameters(info)) {\n          this.sending = false;\n          return;\n        }\n      }\n\n      out.startPacket(this);\n      this.packet = new RewritePacket(this.opts.maxAllowedPacket, out, this.parseResults.partList[0], this.parseResults.partList[this.parseResults.partList.length - 1]);\n      this.onPacketReceive = this.readResponsePacket;\n      this.valueIdx = 0;\n      this.sendQueries();\n    }\n  }, {\n    key: \"sendQueries\",\n    value: function sendQueries() {\n      var flushed = false;\n\n      while (!flushed && this.sending && this.valueIdx < this.values.length) {\n        this.valueRow = this.values[this.valueIdx++]; //********************************************\n        // send params\n        //********************************************\n\n        var len = this.parseResults.partList.length - 3;\n\n        for (var i = 0; i < len; i++) {\n          var value = this.valueRow[i];\n          flushed = this.packet.writeString(this.parseResults.partList[i + 1]) || flushed;\n\n          if (value === null) {\n            flushed = this.packet.writeStringAscii('NULL') || flushed;\n            continue;\n          }\n\n          if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n            //********************************************\n            // param is stream,\n            // now all params will be written by event\n            //********************************************\n            this.registerStreamSendEvent(this.packet, this.info);\n            this.currentParam = i;\n            this.packet.writeInt8(QUOTE); //'\n\n            value.on('data', function (chunk) {\n              this.packet.writeBufferEscape(chunk);\n            }.bind(this));\n            value.on('end', function () {\n              this.packet.writeInt8(QUOTE); //'\n\n              this.currentParam++;\n              this.paramWritten();\n            }.bind(this));\n            return;\n          } else {\n            //********************************************\n            // param isn't stream. directly write in buffer\n            //********************************************\n            flushed = this.writeParam(this.packet, value, this.opts, this.info) || flushed;\n          }\n        }\n\n        this.packet.writeString(this.parseResults.partList[this.parseResults.partList.length - 2]);\n        this.packet.mark(!this.parseResults.reWritable || this.valueIdx === this.values.length);\n      }\n\n      if (this.valueIdx < this.values.length && !this.packet.haveErrorResponse) {\n        //there is still data to send\n        setImmediate(this.sendQueries.bind(this));\n      } else {\n        if (this.sending && this.valueIdx === this.values.length) this.emit('send_end');\n        this.sending = false;\n      }\n    }\n  }, {\n    key: \"displaySql\",\n    value: function displaySql() {\n      if (this.opts && this.initialValues) {\n        if (this.sql.length > this.opts.debugLen) {\n          return 'sql: ' + this.sql.substring(0, this.opts.debugLen) + '...';\n        }\n\n        var sqlMsg = 'sql: ' + this.sql + ' - parameters:';\n        sqlMsg += '[';\n\n        for (var i = 0; i < this.initialValues.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          var param = this.initialValues[i];\n          sqlMsg = this.logParameters(sqlMsg, param);\n\n          if (sqlMsg.length > this.opts.debugLen) {\n            sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\n            break;\n          }\n        }\n\n        sqlMsg += ']';\n        return sqlMsg;\n      }\n\n      return 'sql: ' + this.sql + ' - parameters:[]';\n    }\n  }, {\n    key: \"success\",\n    value: function success(val) {\n      this.packet.waitingResponseNo--;\n\n      if (this.packet.haveErrorResponse) {\n        if (!this.sending && this.packet.waitingResponseNo === 0) {\n          this.packet = null;\n          this.onPacketReceive = null;\n          this.resolve = null;\n          this._columns = null;\n          this._rows = null;\n          process.nextTick(this.reject, this.firstError);\n          this.reject = null;\n          this.emit('end', this.firstError);\n        }\n      } else {\n        if (!this.sending && this.packet.waitingResponseNo === 0) {\n          if (this.parseResults.reWritable) {\n            this.packet = null;\n            var totalAffectedRows = 0;\n\n            this._rows.forEach(function (row) {\n              totalAffectedRows += row.affectedRows;\n            });\n\n            var rs = {\n              affectedRows: totalAffectedRows,\n              insertId: this._rows[0].insertId,\n              warningStatus: this._rows[this._rows.length - 1].warningStatus\n            };\n            this.successEnd(rs);\n            return;\n          } else {\n            this.successEnd(this._rows);\n          }\n\n          this._columns = null;\n          this._rows = null;\n          return;\n        }\n\n        this._responseIndex++;\n        this.onPacketReceive = this.readResponsePacket;\n      }\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(err, info) {\n      this.packet.waitingResponseNo--;\n      this.sending = false;\n\n      if (this.packet && !this.packet.haveErrorResponse) {\n        if (err.fatal) {\n          this.packet.waitingResponseNo = 0;\n        }\n\n        if (this.stack) {\n          err = Errors.createError(err.message, err.fatal, info, err.sqlState, err.errno, this.stack, false);\n        }\n\n        this.firstError = err;\n        this.packet.endedWithError();\n      }\n\n      if (!this.sending && this.packet.waitingResponseNo === 0) {\n        this.packet = null;\n        this.onPacketReceive = null;\n        this.resolve = null;\n        process.nextTick(this.reject, this.firstError);\n        this.reject = null;\n        this.emit('end', this.firstError);\n      } else {\n        this._responseIndex++;\n        this.onPacketReceive = this.readResponsePacket;\n      }\n    }\n    /**\n     * Validate that parameters exists and are defined.\n     *\n     * @param info        connection info\n     * @returns {boolean} return false if any error occur.\n     */\n\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters(info) {\n      //validate parameter size.\n      for (var r = 0; r < this.values.length; r++) {\n        var val = this.values[r];\n\n        if (!Array.isArray(val)) {\n          val = [val];\n          this.values[r] = val;\n        }\n\n        if (this.parseResults.partList.length - 3 > val.length) {\n          this.emit('send_end');\n          this.throwNewError('Parameter at position ' + (val.length + 1) + ' is not set for values ' + r + '\\n' + this.displaySql(), false, info, 'HY000', Errors.ER_MISSING_PARAMETER);\n          return false;\n        } //validate parameter is defined.\n\n\n        for (var i = 0; i < this.parseResults.partList.length - 3; i++) {\n          if (val[i] === undefined) {\n            this.emit('send_end');\n            this.throwNewError('Parameter at position ' + (i + 1) + ' is undefined for values ' + r + '\\n' + this.displaySql(), false, info, 'HY000', Errors.ER_PARAMETER_UNDEFINED);\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Define params events.\n     * Each parameter indicate that he is written to socket,\n     * emitting event so next parameter can be written.\n     */\n\n  }, {\n    key: \"registerStreamSendEvent\",\n    value: function registerStreamSendEvent(packet, info) {\n      this.paramWritten = function () {\n        var flushed = false;\n\n        while (!flushed) {\n          if (this.packet.haveErrorResponse) {\n            this.sending = false;\n            this.emit('send_end');\n            return;\n          }\n\n          if (this.currentParam === this.valueRow.length) {\n            // all parameters from row are written.\n            flushed = packet.writeString(this.parseResults.partList[this.parseResults.partList.length - 2]) || flushed;\n            flushed = packet.mark(!this.parseResults.reWritable || this.valueIdx === this.values.length) || flushed;\n\n            if (this.valueIdx < this.values.length) {\n              // still remaining rows\n              this.valueRow = this.values[this.valueIdx++];\n              this.currentParam = 0;\n            } else {\n              // all rows are written\n              this.sending = false;\n              this.emit('send_end');\n              return;\n            }\n          }\n\n          flushed = packet.writeString(this.parseResults.partList[this.currentParam + 1]) || flushed;\n          var value = this.valueRow[this.currentParam];\n\n          if (value === null) {\n            flushed = packet.writeStringAscii('NULL') || flushed;\n            this.currentParam++;\n            continue;\n          }\n\n          if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n            //********************************************\n            // param is stream,\n            //********************************************\n            flushed = packet.writeInt8(QUOTE) || flushed;\n            value.once('end', function () {\n              packet.writeInt8(QUOTE);\n              this.currentParam++;\n              this.paramWritten();\n            }.bind(this));\n            value.on('data', function (chunk) {\n              packet.writeBufferEscape(chunk);\n            });\n            return;\n          } //********************************************\n          // param isn't stream. directly write in buffer\n          //********************************************\n\n\n          flushed = this.writeParam(packet, value, this.opts, info) || flushed;\n          this.currentParam++;\n        }\n\n        if (this.sending) setImmediate(this.paramWritten.bind(this));\n      }.bind(this);\n    }\n  }]);\n\n  return BatchRewrite;\n}(CommonText);\n\nmodule.exports = BatchRewrite;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/batch-rewrite.js"],"names":["CommonText","require","Errors","Parse","RewritePacket","QUOTE","BatchRewrite","resolve","reject","options","connOpts","sql","values","sending","out","opts","info","timeout","err","createError","ER_TIMEOUT_NOT_SUPPORTED","emit","throwError","initialValues","length","namedPlaceholders","parseResults","splitRewritableNamedParameterQuery","splitRewritableQuery","validateParameters","startPacket","packet","maxAllowedPacket","partList","onPacketReceive","readResponsePacket","valueIdx","sendQueries","flushed","valueRow","len","i","value","writeString","writeStringAscii","pipe","read","registerStreamSendEvent","currentParam","writeInt8","on","chunk","writeBufferEscape","bind","paramWritten","writeParam","mark","reWritable","haveErrorResponse","setImmediate","debugLen","substring","sqlMsg","param","logParameters","substr","val","waitingResponseNo","_columns","_rows","process","nextTick","firstError","totalAffectedRows","forEach","row","affectedRows","rs","insertId","warningStatus","successEnd","_responseIndex","fatal","stack","message","sqlState","errno","endedWithError","r","Array","isArray","throwNewError","displaySql","ER_MISSING_PARAMETER","undefined","ER_PARAMETER_UNDEFINED","once","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommonText = require('./common-text-cmd');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst RewritePacket = require('../io/rewrite-packet');\nconst QUOTE = 0x27;\n\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\nclass BatchRewrite extends CommonText {\n  constructor(resolve, reject, options, connOpts, sql, values) {\n    super(resolve, reject, options, connOpts, sql, values);\n    this.sending = true;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    this.info = info;\n    if (this.opts.timeout) {\n      const err = Errors.createError(\n        'Cannot use timeout for Batch statement',\n        false,\n        info,\n        'HY000',\n        Errors.ER_TIMEOUT_NOT_SUPPORTED\n      );\n      this.emit('send_end');\n      this.throwError(err, info);\n      return;\n    }\n\n    if (this.initialValues.length === 0) this.initialValues = [[]];\n    if (this.opts.namedPlaceholders) {\n      this.parseResults = Parse.splitRewritableNamedParameterQuery(this.sql, this.initialValues);\n      this.values = this.parseResults.values;\n    } else {\n      this.parseResults = Parse.splitRewritableQuery(this.sql);\n      this.values = this.initialValues;\n      if (!this.validateParameters(info)) {\n        this.sending = false;\n        return;\n      }\n    }\n\n    out.startPacket(this);\n    this.packet = new RewritePacket(\n      this.opts.maxAllowedPacket,\n      out,\n      this.parseResults.partList[0],\n      this.parseResults.partList[this.parseResults.partList.length - 1]\n    );\n\n    this.onPacketReceive = this.readResponsePacket;\n    this.valueIdx = 0;\n    this.sendQueries();\n  }\n\n  sendQueries() {\n    let flushed = false;\n    while (!flushed && this.sending && this.valueIdx < this.values.length) {\n      this.valueRow = this.values[this.valueIdx++];\n\n      //********************************************\n      // send params\n      //********************************************\n      const len = this.parseResults.partList.length - 3;\n      for (let i = 0; i < len; i++) {\n        const value = this.valueRow[i];\n        flushed = this.packet.writeString(this.parseResults.partList[i + 1]) || flushed;\n        if (value === null) {\n          flushed = this.packet.writeStringAscii('NULL') || flushed;\n          continue;\n        }\n\n        if (\n          typeof value === 'object' &&\n          typeof value.pipe === 'function' &&\n          typeof value.read === 'function'\n        ) {\n          //********************************************\n          // param is stream,\n          // now all params will be written by event\n          //********************************************\n          this.registerStreamSendEvent(this.packet, this.info);\n          this.currentParam = i;\n          this.packet.writeInt8(QUOTE); //'\n\n          value.on(\n            'data',\n            function(chunk) {\n              this.packet.writeBufferEscape(chunk);\n            }.bind(this)\n          );\n\n          value.on(\n            'end',\n            function() {\n              this.packet.writeInt8(QUOTE); //'\n              this.currentParam++;\n              this.paramWritten();\n            }.bind(this)\n          );\n\n          return;\n        } else {\n          //********************************************\n          // param isn't stream. directly write in buffer\n          //********************************************\n          flushed = this.writeParam(this.packet, value, this.opts, this.info) || flushed;\n        }\n      }\n      this.packet.writeString(this.parseResults.partList[this.parseResults.partList.length - 2]);\n      this.packet.mark(!this.parseResults.reWritable || this.valueIdx === this.values.length);\n    }\n\n    if (this.valueIdx < this.values.length && !this.packet.haveErrorResponse) {\n      //there is still data to send\n      setImmediate(this.sendQueries.bind(this));\n    } else {\n      if (this.sending && this.valueIdx === this.values.length) this.emit('send_end');\n      this.sending = false;\n    }\n  }\n\n  displaySql() {\n    if (this.opts && this.initialValues) {\n      if (this.sql.length > this.opts.debugLen) {\n        return 'sql: ' + this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n\n      let sqlMsg = 'sql: ' + this.sql + ' - parameters:';\n      sqlMsg += '[';\n      for (let i = 0; i < this.initialValues.length; i++) {\n        if (i !== 0) sqlMsg += ',';\n        let param = this.initialValues[i];\n        sqlMsg = this.logParameters(sqlMsg, param);\n        if (sqlMsg.length > this.opts.debugLen) {\n          sqlMsg = sqlMsg.substr(0, this.opts.debugLen) + '...';\n          break;\n        }\n      }\n      sqlMsg += ']';\n      return sqlMsg;\n    }\n    return 'sql: ' + this.sql + ' - parameters:[]';\n  }\n\n  success(val) {\n    this.packet.waitingResponseNo--;\n\n    if (this.packet.haveErrorResponse) {\n      if (!this.sending && this.packet.waitingResponseNo === 0) {\n        this.packet = null;\n        this.onPacketReceive = null;\n        this.resolve = null;\n        this._columns = null;\n        this._rows = null;\n        process.nextTick(this.reject, this.firstError);\n        this.reject = null;\n        this.emit('end', this.firstError);\n      }\n    } else {\n      if (!this.sending && this.packet.waitingResponseNo === 0) {\n        if (this.parseResults.reWritable) {\n          this.packet = null;\n          let totalAffectedRows = 0;\n          this._rows.forEach(row => {\n            totalAffectedRows += row.affectedRows;\n          });\n\n          const rs = {\n            affectedRows: totalAffectedRows,\n            insertId: this._rows[0].insertId,\n            warningStatus: this._rows[this._rows.length - 1].warningStatus\n          };\n          this.successEnd(rs);\n          return;\n        } else {\n          this.successEnd(this._rows);\n        }\n        this._columns = null;\n        this._rows = null;\n        return;\n      }\n      this._responseIndex++;\n      this.onPacketReceive = this.readResponsePacket;\n    }\n  }\n\n  throwError(err, info) {\n    this.packet.waitingResponseNo--;\n    this.sending = false;\n\n    if (this.packet && !this.packet.haveErrorResponse) {\n      if (err.fatal) {\n        this.packet.waitingResponseNo = 0;\n      }\n      if (this.stack) {\n        err = Errors.createError(\n          err.message,\n          err.fatal,\n          info,\n          err.sqlState,\n          err.errno,\n          this.stack,\n          false\n        );\n      }\n      this.firstError = err;\n      this.packet.endedWithError();\n    }\n\n    if (!this.sending && this.packet.waitingResponseNo === 0) {\n      this.packet = null;\n      this.onPacketReceive = null;\n      this.resolve = null;\n      process.nextTick(this.reject, this.firstError);\n      this.reject = null;\n      this.emit('end', this.firstError);\n    } else {\n      this._responseIndex++;\n      this.onPacketReceive = this.readResponsePacket;\n    }\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    for (let r = 0; r < this.values.length; r++) {\n      let val = this.values[r];\n      if (!Array.isArray(val)) {\n        val = [val];\n        this.values[r] = val;\n      }\n\n      if (this.parseResults.partList.length - 3 > val.length) {\n        this.emit('send_end');\n        this.throwNewError(\n          'Parameter at position ' +\n            (val.length + 1) +\n            ' is not set for values ' +\n            r +\n            '\\n' +\n            this.displaySql(),\n          false,\n          info,\n          'HY000',\n          Errors.ER_MISSING_PARAMETER\n        );\n        return false;\n      }\n\n      //validate parameter is defined.\n      for (let i = 0; i < this.parseResults.partList.length - 3; i++) {\n        if (val[i] === undefined) {\n          this.emit('send_end');\n          this.throwNewError(\n            'Parameter at position ' +\n              (i + 1) +\n              ' is undefined for values ' +\n              r +\n              '\\n' +\n              this.displaySql(),\n            false,\n            info,\n            'HY000',\n            Errors.ER_PARAMETER_UNDEFINED\n          );\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next parameter can be written.\n   */\n  registerStreamSendEvent(packet, info) {\n    this.paramWritten = function() {\n      let flushed = false;\n      while (!flushed) {\n        if (this.packet.haveErrorResponse) {\n          this.sending = false;\n          this.emit('send_end');\n          return;\n        }\n        if (this.currentParam === this.valueRow.length) {\n          // all parameters from row are written.\n          flushed =\n            packet.writeString(this.parseResults.partList[this.parseResults.partList.length - 2]) ||\n            flushed;\n          flushed =\n            packet.mark(!this.parseResults.reWritable || this.valueIdx === this.values.length) ||\n            flushed;\n          if (this.valueIdx < this.values.length) {\n            // still remaining rows\n            this.valueRow = this.values[this.valueIdx++];\n            this.currentParam = 0;\n          } else {\n            // all rows are written\n            this.sending = false;\n            this.emit('send_end');\n            return;\n          }\n        }\n\n        flushed = packet.writeString(this.parseResults.partList[this.currentParam + 1]) || flushed;\n        const value = this.valueRow[this.currentParam];\n\n        if (value === null) {\n          flushed = packet.writeStringAscii('NULL') || flushed;\n          this.currentParam++;\n          continue;\n        }\n\n        if (\n          typeof value === 'object' &&\n          typeof value.pipe === 'function' &&\n          typeof value.read === 'function'\n        ) {\n          //********************************************\n          // param is stream,\n          //********************************************\n          flushed = packet.writeInt8(QUOTE) || flushed;\n          value.once(\n            'end',\n            function() {\n              packet.writeInt8(QUOTE);\n              this.currentParam++;\n              this.paramWritten();\n            }.bind(this)\n          );\n\n          value.on('data', function(chunk) {\n            packet.writeBufferEscape(chunk);\n          });\n          return;\n        }\n\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        flushed = this.writeParam(packet, value, this.opts, info) || flushed;\n        this.currentParam++;\n      }\n\n      if (this.sending) setImmediate(this.paramWritten.bind(this));\n    }.bind(this);\n  }\n}\n\nmodule.exports = BatchRewrite;\n"]},"metadata":{},"sourceType":"script"}