{"ast":null,"code":"'use strict';\n\nvar Connection = require('./connection');\n\nvar PoolBase = require('./pool-base');\n\nvar Errors = require('./misc/errors');\n\nvar util = require('util');\n\nfunction PoolPromise(options) {\n  var processTaskPromise = function processTaskPromise(conn, sql, values, isBatch) {\n    if (sql) {\n      var fct = isBatch ? conn.batch : conn.query;\n      return fct(sql, values).then(function (res) {\n        conn.releaseWithoutError();\n        return Promise.resolve(res);\n      }).catch(function (err) {\n        conn.releaseWithoutError();\n        return Promise.reject(err);\n      });\n    }\n\n    return Promise.resolve(conn);\n  };\n  /**\n   * Add connection to pool.\n   */\n\n\n  var createConnectionPoolPromise = function createConnectionPoolPromise(pool) {\n    var conn = new Connection(options.connOptions);\n    return conn.connect().then(function () {\n      if (pool.closed) {\n        conn.end().then(function () {}).catch(function () {});\n        return Promise.reject(Errors.createError('Cannot create new connection to pool, pool closed', true, null, '08S01', Errors.ER_ADD_CONNECTION_CLOSED_POOL, null));\n      }\n\n      conn.releaseWithoutError = function () {\n        conn.release().catch(function () {});\n      };\n\n      conn.forceEnd = conn.end;\n\n      conn.release = function () {\n        if (pool.closed) {\n          pool._discardConnection(conn);\n\n          return Promise.resolve();\n        }\n\n        if (options.noControlAfterUse) {\n          pool._releaseConnection(conn);\n\n          return Promise.resolve();\n        } //if server permit it, reset the connection, or rollback only if not\n        // COM_RESET_CONNECTION exist since mysql 5.7.3 and mariadb 10.2.4\n        // but not possible to use it with mysql waiting for https://bugs.mysql.com/bug.php?id=97633 correction.\n        // and mariadb only since https://jira.mariadb.org/browse/MDEV-18281\n\n\n        var revertFunction = conn.rollback;\n\n        if (options.resetAfterUse && conn.info.isMariaDB() && (conn.info.serverVersion.minor === 2 && conn.info.hasMinVersion(10, 2, 22) || conn.info.hasMinVersion(10, 3, 13))) {\n          revertFunction = conn.reset;\n        }\n\n        return revertFunction().then(function () {\n          pool._releaseConnection(conn);\n\n          return Promise.resolve();\n        }).catch(function (err) {\n          //uncertain connection state.\n          // discard it\n          pool._discardConnection(conn);\n\n          return Promise.resolve();\n        });\n      };\n\n      conn.end = conn.release;\n      return Promise.resolve(conn);\n    }).catch(function (err) {\n      return Promise.reject(err);\n    });\n  };\n\n  PoolBase.call(this, options, processTaskPromise, createConnectionPoolPromise, function (conn) {\n    return conn.ping();\n  });\n}\n\nutil.inherits(PoolPromise, PoolBase);\nmodule.exports = PoolPromise;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/pool-promise.js"],"names":["Connection","require","PoolBase","Errors","util","PoolPromise","options","processTaskPromise","conn","sql","values","isBatch","fct","batch","query","then","res","releaseWithoutError","Promise","resolve","catch","err","reject","createConnectionPoolPromise","pool","connOptions","connect","closed","end","createError","ER_ADD_CONNECTION_CLOSED_POOL","release","forceEnd","_discardConnection","noControlAfterUse","_releaseConnection","revertFunction","rollback","resetAfterUse","info","isMariaDB","serverVersion","minor","hasMinVersion","reset","call","ping","inherits","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Connection = require('./connection');\nconst PoolBase = require('./pool-base');\nconst Errors = require('./misc/errors');\nconst util = require('util');\n\nfunction PoolPromise(options) {\n  const processTaskPromise = function(conn, sql, values, isBatch) {\n    if (sql) {\n      const fct = isBatch ? conn.batch : conn.query;\n      return fct(sql, values)\n        .then(res => {\n          conn.releaseWithoutError();\n          return Promise.resolve(res);\n        })\n        .catch(err => {\n          conn.releaseWithoutError();\n          return Promise.reject(err);\n        });\n    }\n    return Promise.resolve(conn);\n  };\n\n  /**\n   * Add connection to pool.\n   */\n  const createConnectionPoolPromise = function(pool) {\n    const conn = new Connection(options.connOptions);\n    return conn\n      .connect()\n      .then(() => {\n        if (pool.closed) {\n          conn\n            .end()\n            .then(() => {})\n            .catch(() => {});\n          return Promise.reject(\n            Errors.createError(\n              'Cannot create new connection to pool, pool closed',\n              true,\n              null,\n              '08S01',\n              Errors.ER_ADD_CONNECTION_CLOSED_POOL,\n              null\n            )\n          );\n        }\n\n        conn.releaseWithoutError = () => {\n          conn.release().catch(() => {});\n        };\n\n        conn.forceEnd = conn.end;\n\n        conn.release = () => {\n          if (pool.closed) {\n            pool._discardConnection(conn);\n            return Promise.resolve();\n          }\n          if (options.noControlAfterUse) {\n            pool._releaseConnection(conn);\n            return Promise.resolve();\n          }\n\n          //if server permit it, reset the connection, or rollback only if not\n          // COM_RESET_CONNECTION exist since mysql 5.7.3 and mariadb 10.2.4\n          // but not possible to use it with mysql waiting for https://bugs.mysql.com/bug.php?id=97633 correction.\n          // and mariadb only since https://jira.mariadb.org/browse/MDEV-18281\n          let revertFunction = conn.rollback;\n          if (\n            options.resetAfterUse &&\n            conn.info.isMariaDB() &&\n            ((conn.info.serverVersion.minor === 2 && conn.info.hasMinVersion(10, 2, 22)) ||\n              conn.info.hasMinVersion(10, 3, 13))\n          ) {\n            revertFunction = conn.reset;\n          }\n\n          return revertFunction()\n            .then(() => {\n              pool._releaseConnection(conn);\n              return Promise.resolve();\n            })\n            .catch(err => {\n              //uncertain connection state.\n              // discard it\n              pool._discardConnection(conn);\n              return Promise.resolve();\n            });\n        };\n        conn.end = conn.release;\n        return Promise.resolve(conn);\n      })\n      .catch(err => {\n        return Promise.reject(err);\n      });\n  };\n\n  PoolBase.call(this, options, processTaskPromise, createConnectionPoolPromise, conn =>\n    conn.ping()\n  );\n}\n\nutil.inherits(PoolPromise, PoolBase);\n\nmodule.exports = PoolPromise;\n"]},"metadata":{},"sourceType":"script"}