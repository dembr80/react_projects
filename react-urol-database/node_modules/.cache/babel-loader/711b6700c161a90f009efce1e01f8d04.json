{"ast":null,"code":"'use strict';\n\nvar Capabilities = require('../../const/capabilities');\n\nvar Iconv = require('iconv-lite');\n\nvar NativePasswordAuth = require('./auth/native-password-auth');\n\nvar Ed25519PasswordAuth = require('./auth/ed25519-password-auth');\n\nvar driverVersion = require('../../../package.json').version;\n\nvar os = require('os');\n/**\n * Send Handshake response packet\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/#handshake-response-packet\n *\n * @param cmd         current handshake command\n * @param out         output writer\n * @param opts        connection options\n * @param pluginName  plugin name\n * @param info        connection information\n */\n\n\nmodule.exports.send = function send(cmd, out, opts, pluginName, info) {\n  out.startPacket(cmd);\n  info.defaultPluginName = pluginName;\n  var pwd = Array.isArray(opts.password) ? opts.password[0] : opts.password;\n  var authToken;\n  var authPlugin;\n\n  switch (pluginName) {\n    case 'client_ed25519':\n      authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n      authPlugin = 'client_ed25519';\n      break;\n\n    case 'mysql_clear_password':\n      authToken = Buffer.from(pwd);\n      authPlugin = 'mysql_clear_password';\n      break;\n\n    default:\n      authToken = NativePasswordAuth.encryptPassword(pwd, info.seed);\n      authPlugin = 'mysql_native_password';\n      break;\n  }\n\n  out.writeInt32(info.clientCapabilities);\n  out.writeInt32(1024 * 1024 * 1024); // max packet size\n\n  out.writeInt8(opts.collation.index);\n\n  for (var i = 0; i < 23; i++) {\n    out.writeInt8(0);\n  } //null encoded user\n\n\n  out.writeString(opts.user || '');\n  out.writeInt8(0);\n\n  if (info.serverCapabilities & Capabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA) {\n    out.writeLengthCoded(authToken.length);\n    out.writeBuffer(authToken, 0, authToken.length);\n  } else if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n    out.writeInt8(authToken.length);\n    out.writeBuffer(authToken, 0, authToken.length);\n  } else {\n    out.writeBuffer(authToken, 0, authToken.length);\n    out.writeInt8(0);\n  }\n\n  if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n    out.writeString(opts.database);\n    out.writeInt8(0);\n    info.database = opts.database;\n  }\n\n  if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n    out.writeString(pluginName);\n    out.writeInt8(0);\n  }\n\n  if (opts.connectAttributes && info.serverCapabilities & Capabilities.CONNECT_ATTRS) {\n    out.writeInt8(0xfc);\n    var initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n\n    out.writeInt16(0);\n    var encoding = opts.collation.charset;\n    writeParam(out, '_client_name', encoding);\n    writeParam(out, 'MariaDB connector/Node', encoding);\n    writeParam(out, '_client_version', encoding);\n    writeParam(out, driverVersion, encoding);\n    var address = cmd.getSocket().address().address;\n\n    if (address) {\n      writeParam(out, '_server_host', encoding);\n      writeParam(out, address, encoding);\n    }\n\n    writeParam(out, '_os', encoding);\n    writeParam(out, process.platform, encoding);\n    writeParam(out, '_client_host', encoding);\n    writeParam(out, os.hostname(), encoding);\n    writeParam(out, '_node_version', encoding);\n    writeParam(out, process.versions.node, encoding);\n\n    if (opts.connectAttributes !== true) {\n      var attrNames = Object.keys(opts.connectAttributes);\n\n      for (var k = 0; k < attrNames.length; ++k) {\n        writeParam(out, attrNames[k], encoding);\n        writeParam(out, opts.connectAttributes[attrNames[k]], encoding);\n      }\n    } //write end size\n\n\n    out.writeInt16AtPos(initPos);\n  }\n\n  out.flushBuffer(true);\n};\n\nfunction writeParam(out, val, encoding) {\n  var param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n  out.writeLengthCoded(param.length);\n  out.writeBuffer(param, 0, param.length);\n}","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/cmd/handshake/client-handshake-response.js"],"names":["Capabilities","require","Iconv","NativePasswordAuth","Ed25519PasswordAuth","driverVersion","version","os","module","exports","send","cmd","out","opts","pluginName","info","startPacket","defaultPluginName","pwd","Array","isArray","password","authToken","authPlugin","encryptPassword","seed","Buffer","from","writeInt32","clientCapabilities","writeInt8","collation","index","i","writeString","user","serverCapabilities","PLUGIN_AUTH_LENENC_CLIENT_DATA","writeLengthCoded","length","writeBuffer","SECURE_CONNECTION","CONNECT_WITH_DB","database","PLUGIN_AUTH","connectAttributes","CONNECT_ATTRS","initPos","pos","writeInt16","encoding","charset","writeParam","address","getSocket","process","platform","hostname","versions","node","attrNames","Object","keys","k","writeInt16AtPos","flushBuffer","val","param","isEncoding","encode"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Capabilities = require('../../const/capabilities');\nconst Iconv = require('iconv-lite');\nconst NativePasswordAuth = require('./auth/native-password-auth');\nconst Ed25519PasswordAuth = require('./auth/ed25519-password-auth');\nconst driverVersion = require('../../../package.json').version;\nconst os = require('os');\n\n/**\n * Send Handshake response packet\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/#handshake-response-packet\n *\n * @param cmd         current handshake command\n * @param out         output writer\n * @param opts        connection options\n * @param pluginName  plugin name\n * @param info        connection information\n */\nmodule.exports.send = function send(cmd, out, opts, pluginName, info) {\n  out.startPacket(cmd);\n  info.defaultPluginName = pluginName;\n  const pwd = Array.isArray(opts.password) ? opts.password[0] : opts.password;\n  let authToken;\n  let authPlugin;\n  switch (pluginName) {\n    case 'client_ed25519':\n      authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n      authPlugin = 'client_ed25519';\n      break;\n\n    case 'mysql_clear_password':\n      authToken = Buffer.from(pwd);\n      authPlugin = 'mysql_clear_password';\n      break;\n\n    default:\n      authToken = NativePasswordAuth.encryptPassword(pwd, info.seed);\n      authPlugin = 'mysql_native_password';\n      break;\n  }\n\n  out.writeInt32(info.clientCapabilities);\n  out.writeInt32(1024 * 1024 * 1024); // max packet size\n  out.writeInt8(opts.collation.index);\n  for (let i = 0; i < 23; i++) {\n    out.writeInt8(0);\n  }\n\n  //null encoded user\n  out.writeString(opts.user || '');\n  out.writeInt8(0);\n\n  if (info.serverCapabilities & Capabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA) {\n    out.writeLengthCoded(authToken.length);\n    out.writeBuffer(authToken, 0, authToken.length);\n  } else if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n    out.writeInt8(authToken.length);\n    out.writeBuffer(authToken, 0, authToken.length);\n  } else {\n    out.writeBuffer(authToken, 0, authToken.length);\n    out.writeInt8(0);\n  }\n\n  if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n    out.writeString(opts.database);\n    out.writeInt8(0);\n    info.database = opts.database;\n  }\n\n  if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n    out.writeString(pluginName);\n    out.writeInt8(0);\n  }\n\n  if (opts.connectAttributes && info.serverCapabilities & Capabilities.CONNECT_ATTRS) {\n    out.writeInt8(0xfc);\n    let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n    out.writeInt16(0);\n\n    const encoding = opts.collation.charset;\n\n    writeParam(out, '_client_name', encoding);\n    writeParam(out, 'MariaDB connector/Node', encoding);\n\n    writeParam(out, '_client_version', encoding);\n    writeParam(out, driverVersion, encoding);\n\n    const address = cmd.getSocket().address().address;\n    if (address) {\n      writeParam(out, '_server_host', encoding);\n      writeParam(out, address, encoding);\n    }\n\n    writeParam(out, '_os', encoding);\n    writeParam(out, process.platform, encoding);\n\n    writeParam(out, '_client_host', encoding);\n    writeParam(out, os.hostname(), encoding);\n\n    writeParam(out, '_node_version', encoding);\n    writeParam(out, process.versions.node, encoding);\n\n    if (opts.connectAttributes !== true) {\n      let attrNames = Object.keys(opts.connectAttributes);\n      for (let k = 0; k < attrNames.length; ++k) {\n        writeParam(out, attrNames[k], encoding);\n        writeParam(out, opts.connectAttributes[attrNames[k]], encoding);\n      }\n    }\n\n    //write end size\n    out.writeInt16AtPos(initPos);\n  }\n\n  out.flushBuffer(true);\n};\n\nfunction writeParam(out, val, encoding) {\n  let param = Buffer.isEncoding(encoding)\n    ? Buffer.from(val, encoding)\n    : Iconv.encode(val, encoding);\n  out.writeLengthCoded(param.length);\n  out.writeBuffer(param, 0, param.length);\n}\n"]},"metadata":{},"sourceType":"script"}