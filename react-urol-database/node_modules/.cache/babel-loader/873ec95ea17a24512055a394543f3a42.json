{"ast":null,"code":"'use strict';\n\nvar Connection = require('./connection');\n\nvar util = require('util');\n\nvar Errors = require('./misc/errors');\n\nvar _require = require('./const/connection_status'),\n    Status = _require.Status;\n\nfunction ConnectionCallback(options) {\n  Connection.call(this, options);\n  var connecting = 1;\n  var connectPromise = this.connect.bind(this);\n  var changeUserPromise = this.changeUser.bind(this);\n  var queryPromise = this.query.bind(this);\n  var endPromise = this.end.bind(this);\n  var pingPromise = this.ping.bind(this);\n  var resetPromise = this.reset.bind(this);\n  var commitPromise = this.commit.bind(this);\n  var rollbackPromise = this.rollback.bind(this);\n\n  var emptySuccess = function emptySuccess(rows) {};\n\n  var emptyError = function emptyError(err) {}; //*****************************************************************\n  // internal equivalent with callback of promised functions\n  //*****************************************************************\n\n\n  var _commitCallback = function _commitCallback(callback) {\n    commitPromise().then(function () {\n      if (callback) callback(null, null, null);\n    }).catch(callback || emptyError);\n  };\n\n  var _rollbackCallback = function _rollbackCallback(callback) {\n    rollbackPromise().then(function () {\n      if (callback) callback(null, null, null);\n    }).catch(callback || emptyError);\n  };\n\n  var _pingCallback = function _pingCallback(callback) {\n    pingPromise().then(callback || emptySuccess).catch(callback || emptyError);\n  };\n\n  var _resetCallback = function _resetCallback(callback) {\n    resetPromise().then(callback || emptySuccess).catch(callback || emptyError);\n  };\n\n  var _beginTransactionCallback = function _beginTransactionCallback(callback) {\n    queryPromise('START TRANSACTION').then(function () {\n      if (callback) callback(null, null, null);\n    }).catch(callback || emptyError);\n  };\n\n  var _endCallback = function _endCallback(callback) {\n    endPromise().then(callback || emptySuccess).catch(callback || emptyError);\n  };\n\n  var _connectCallback = function _connectCallback(callback) {\n    if (!callback) {\n      throw new Errors.createError('missing callback parameter', false, this.info, 'HY000', Errors.ER_MISSING_PARAMETER);\n    }\n\n    if (connecting === 1) {\n      this.on('connect', callback);\n    } else {\n      switch (this._status()) {\n        case Status.CLOSING:\n        case Status.CLOSED:\n          callback(Errors.createError('Connection closed', true, this.info, '08S01', Errors.ER_CONNECTION_ALREADY_CLOSED));\n          break;\n\n        default:\n          callback();\n      }\n    }\n  };\n\n  var _changeUserCallback = function _changeUserCallback(options, callback) {\n    var _options, _cb;\n\n    if (typeof options === 'function') {\n      _cb = options;\n      _options = undefined;\n    } else {\n      _options = options;\n      _cb = callback;\n    }\n\n    changeUserPromise(_options).then(function () {\n      if (_cb) _cb(null, null, null);\n    }).catch(_cb || emptyError);\n  }; //*****************************************************************\n  // replacing public promise function with callback equivalent\n  //*****************************************************************\n\n\n  this.commit = _commitCallback;\n  this.rollback = _rollbackCallback;\n  this.ping = _pingCallback;\n  this.reset = _resetCallback;\n  this.end = _endCallback;\n  this.connect = _connectCallback;\n  this.changeUser = _changeUserCallback;\n  this.query = this._queryCallback;\n  this.batch = this._batchCallback;\n  this.beginTransaction = _beginTransactionCallback;\n  var self = this;\n  connectPromise().then(function () {\n    connecting = 0;\n    self.emit('connect');\n  }).catch(function (err) {\n    connecting = 0;\n    self.emit('connect', err);\n  });\n}\n\nutil.inherits(ConnectionCallback, Connection);\nmodule.exports = ConnectionCallback;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/connection-callback.js"],"names":["Connection","require","util","Errors","Status","ConnectionCallback","options","call","connecting","connectPromise","connect","bind","changeUserPromise","changeUser","queryPromise","query","endPromise","end","pingPromise","ping","resetPromise","reset","commitPromise","commit","rollbackPromise","rollback","emptySuccess","rows","emptyError","err","_commitCallback","callback","then","catch","_rollbackCallback","_pingCallback","_resetCallback","_beginTransactionCallback","_endCallback","_connectCallback","createError","info","ER_MISSING_PARAMETER","on","_status","CLOSING","CLOSED","ER_CONNECTION_ALREADY_CLOSED","_changeUserCallback","_options","_cb","undefined","_queryCallback","batch","_batchCallback","beginTransaction","self","emit","inherits","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Connection = require('./connection');\nconst util = require('util');\nconst Errors = require('./misc/errors');\nconst { Status } = require('./const/connection_status');\n\nfunction ConnectionCallback(options) {\n  Connection.call(this, options);\n\n  let connecting = 1;\n  const connectPromise = this.connect.bind(this);\n  const changeUserPromise = this.changeUser.bind(this);\n  const queryPromise = this.query.bind(this);\n  const endPromise = this.end.bind(this);\n  const pingPromise = this.ping.bind(this);\n  const resetPromise = this.reset.bind(this);\n  const commitPromise = this.commit.bind(this);\n  const rollbackPromise = this.rollback.bind(this);\n\n  const emptySuccess = rows => {};\n  const emptyError = err => {};\n\n  //*****************************************************************\n  // internal equivalent with callback of promised functions\n  //*****************************************************************\n\n  const _commitCallback = callback => {\n    commitPromise()\n      .then(() => {\n        if (callback) callback(null, null, null);\n      })\n      .catch(callback || emptyError);\n  };\n\n  const _rollbackCallback = callback => {\n    rollbackPromise()\n      .then(() => {\n        if (callback) callback(null, null, null);\n      })\n      .catch(callback || emptyError);\n  };\n\n  const _pingCallback = callback => {\n    pingPromise()\n      .then(callback || emptySuccess)\n      .catch(callback || emptyError);\n  };\n\n  const _resetCallback = callback => {\n    resetPromise()\n      .then(callback || emptySuccess)\n      .catch(callback || emptyError);\n  };\n\n  const _beginTransactionCallback = callback => {\n    queryPromise('START TRANSACTION')\n      .then(() => {\n        if (callback) callback(null, null, null);\n      })\n      .catch(callback || emptyError);\n  };\n\n  const _endCallback = callback => {\n    endPromise()\n      .then(callback || emptySuccess)\n      .catch(callback || emptyError);\n  };\n\n  const _connectCallback = function(callback) {\n    if (!callback) {\n      throw new Errors.createError(\n        'missing callback parameter',\n        false,\n        this.info,\n        'HY000',\n        Errors.ER_MISSING_PARAMETER\n      );\n    }\n\n    if (connecting === 1) {\n      this.on('connect', callback);\n    } else {\n      switch (this._status()) {\n        case Status.CLOSING:\n        case Status.CLOSED:\n          callback(\n            Errors.createError(\n              'Connection closed',\n              true,\n              this.info,\n              '08S01',\n              Errors.ER_CONNECTION_ALREADY_CLOSED\n            )\n          );\n          break;\n\n        default:\n          callback();\n      }\n    }\n  };\n\n  const _changeUserCallback = (options, callback) => {\n    let _options, _cb;\n    if (typeof options === 'function') {\n      _cb = options;\n      _options = undefined;\n    } else {\n      _options = options;\n      _cb = callback;\n    }\n\n    changeUserPromise(_options)\n      .then(() => {\n        if (_cb) _cb(null, null, null);\n      })\n      .catch(_cb || emptyError);\n  };\n\n  //*****************************************************************\n  // replacing public promise function with callback equivalent\n  //*****************************************************************\n\n  this.commit = _commitCallback;\n  this.rollback = _rollbackCallback;\n  this.ping = _pingCallback;\n  this.reset = _resetCallback;\n  this.end = _endCallback;\n  this.connect = _connectCallback;\n  this.changeUser = _changeUserCallback;\n  this.query = this._queryCallback;\n  this.batch = this._batchCallback;\n  this.beginTransaction = _beginTransactionCallback;\n\n  const self = this;\n  connectPromise()\n    .then(() => {\n      connecting = 0;\n      self.emit('connect');\n    })\n    .catch(err => {\n      connecting = 0;\n      self.emit('connect', err);\n    });\n}\n\nutil.inherits(ConnectionCallback, Connection);\n\nmodule.exports = ConnectionCallback;\n"]},"metadata":{},"sourceType":"script"}