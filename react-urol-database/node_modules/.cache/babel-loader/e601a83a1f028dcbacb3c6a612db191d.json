{"ast":null,"code":"/**\n * Similar to pool cluster with pre-set pattern and selector.\n * Additional method query\n *\n * @param poolCluster    cluster\n * @param patternArg     pre-set pattern\n * @param selectorArg    pre-set selector\n * @constructor\n */\nfunction FilteredPoolCluster(poolCluster, patternArg, selectorArg) {\n  var cluster = poolCluster;\n  var pattern = patternArg;\n  var selector = selectorArg;\n  /**\n   * Get a connection according to previously indicated pattern and selector.\n   *\n   * @return {Promise}\n   */\n\n  this.getConnection = function () {\n    return cluster.getConnection(pattern, selector);\n  };\n  /**\n   * Execute a query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */\n\n\n  this.query = function (sql, value) {\n    return cluster.getConnection(pattern, selector).then(function (conn) {\n      return conn.query(sql, value).then(function (res) {\n        conn.end();\n        return res;\n      }).catch(function (err) {\n        conn.end();\n        return Promise.reject(err);\n      });\n    }).catch(function (err) {\n      return Promise.reject(err);\n    });\n  };\n  /**\n   * Execute a batch on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command\n   * @return {Promise}\n   */\n\n\n  this.batch = function (sql, value) {\n    return cluster.getConnection(pattern, selector).then(function (conn) {\n      return conn.batch(sql, value).then(function (res) {\n        conn.end();\n        return res;\n      }).catch(function (err) {\n        conn.end();\n        return Promise.reject(err);\n      });\n    }).catch(function (err) {\n      return Promise.reject(err);\n    });\n  };\n}\n\nmodule.exports = FilteredPoolCluster;","map":{"version":3,"sources":["C:/Users/dembr/Documents/GitHub/react_projects/react-urol-database/node_modules/mariadb/lib/filtered-pool-cluster.js"],"names":["FilteredPoolCluster","poolCluster","patternArg","selectorArg","cluster","pattern","selector","getConnection","query","sql","value","then","conn","res","end","catch","err","Promise","reject","batch","module","exports"],"mappings":"AAAA;;;;;;;;;AASA,SAASA,mBAAT,CAA6BC,WAA7B,EAA0CC,UAA1C,EAAsDC,WAAtD,EAAmE;AACjE,MAAMC,OAAO,GAAGH,WAAhB;AACA,MAAMI,OAAO,GAAGH,UAAhB;AACA,MAAMI,QAAQ,GAAGH,WAAjB;AAEA;;;;;;AAKA,OAAKI,aAAL,GAAqB,YAAM;AACzB,WAAOH,OAAO,CAACG,aAAR,CAAsBF,OAAtB,EAA+BC,QAA/B,CAAP;AACD,GAFD;AAIA;;;;;;;;;;AAQA,OAAKE,KAAL,GAAa,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAChC,WAAON,OAAO,CACXG,aADI,CACUF,OADV,EACmBC,QADnB,EAEJK,IAFI,CAEC,UAAAC,IAAI,EAAI;AACZ,aAAOA,IAAI,CACRJ,KADI,CACEC,GADF,EACOC,KADP,EAEJC,IAFI,CAEC,UAAAE,GAAG,EAAI;AACXD,QAAAA,IAAI,CAACE,GAAL;AACA,eAAOD,GAAP;AACD,OALI,EAMJE,KANI,CAME,UAAAC,GAAG,EAAI;AACZJ,QAAAA,IAAI,CAACE,GAAL;AACA,eAAOG,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,OATI,CAAP;AAUD,KAbI,EAcJD,KAdI,CAcE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,KAhBI,CAAP;AAiBD,GAlBD;AAoBA;;;;;;;;;;AAQA,OAAKG,KAAL,GAAa,UAASV,GAAT,EAAcC,KAAd,EAAqB;AAChC,WAAON,OAAO,CACXG,aADI,CACUF,OADV,EACmBC,QADnB,EAEJK,IAFI,CAEC,UAAAC,IAAI,EAAI;AACZ,aAAOA,IAAI,CACRO,KADI,CACEV,GADF,EACOC,KADP,EAEJC,IAFI,CAEC,UAAAE,GAAG,EAAI;AACXD,QAAAA,IAAI,CAACE,GAAL;AACA,eAAOD,GAAP;AACD,OALI,EAMJE,KANI,CAME,UAAAC,GAAG,EAAI;AACZJ,QAAAA,IAAI,CAACE,GAAL;AACA,eAAOG,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,OATI,CAAP;AAUD,KAbI,EAcJD,KAdI,CAcE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,KAhBI,CAAP;AAiBD,GAlBD;AAmBD;;AAEDI,MAAM,CAACC,OAAP,GAAiBrB,mBAAjB","sourcesContent":["/**\n * Similar to pool cluster with pre-set pattern and selector.\n * Additional method query\n *\n * @param poolCluster    cluster\n * @param patternArg     pre-set pattern\n * @param selectorArg    pre-set selector\n * @constructor\n */\nfunction FilteredPoolCluster(poolCluster, patternArg, selectorArg) {\n  const cluster = poolCluster;\n  const pattern = patternArg;\n  const selector = selectorArg;\n\n  /**\n   * Get a connection according to previously indicated pattern and selector.\n   *\n   * @return {Promise}\n   */\n  this.getConnection = () => {\n    return cluster.getConnection(pattern, selector);\n  };\n\n  /**\n   * Execute a query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */\n  this.query = function(sql, value) {\n    return cluster\n      .getConnection(pattern, selector)\n      .then(conn => {\n        return conn\n          .query(sql, value)\n          .then(res => {\n            conn.end();\n            return res;\n          })\n          .catch(err => {\n            conn.end();\n            return Promise.reject(err);\n          });\n      })\n      .catch(err => {\n        return Promise.reject(err);\n      });\n  };\n\n  /**\n   * Execute a batch on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command\n   * @return {Promise}\n   */\n  this.batch = function(sql, value) {\n    return cluster\n      .getConnection(pattern, selector)\n      .then(conn => {\n        return conn\n          .batch(sql, value)\n          .then(res => {\n            conn.end();\n            return res;\n          })\n          .catch(err => {\n            conn.end();\n            return Promise.reject(err);\n          });\n      })\n      .catch(err => {\n        return Promise.reject(err);\n      });\n  };\n}\n\nmodule.exports = FilteredPoolCluster;\n"]},"metadata":{},"sourceType":"script"}